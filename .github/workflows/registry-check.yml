on:
  workflow_dispatch:
    inputs:
      timeout:
        description: The number of minutes to wait for Registry ingress
        required: true
        default: 120

defaults:
  run:
    shell: bash

jobs:
  registry-check:
    name: Check Terraform Registry for Latest Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.registry-version.outputs.latest }}
      channel: ${{ steps.message.outputs.channel_id }}
      ts: ${{ steps.message.outputs.ts }}
    steps:
      - name: Get Latest GitHub Release
        id: github-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "tag=$(gh release list --repo ${{ github.repository }} --json name,isLatest --jq '.[] | select(.isLatest).name')" >> "$GITHUB_OUTPUT"

      - name: Set Up Initial Slack Message Blocks
        id: parent
        run: |
          BASE_MESSAGE_BLOCKS=$(jq -nc '[
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "Initialization Check for awscc Version ${{ steps.github-release.outputs.tag }}"
              }
            },
            {
              "type": "divider"
            },
            {
              "type": "rich_text",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "\n\nView the "
                    },
                    {
                      "type": "link",
                      "text": "Run Logs",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "text",
                      "text": " for additional information.\n\n"
                    }
                  ]
                }
              ]
            }
          ]')

          INITIAL_MESSAGE_ADDITION=$(jq -nc '[
            {
              "type": "rich_text",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "waiting-spin"
                    },
                    {
                      "type": "text",
                      "text": " Waiting on Terraform Registry to ingest version ${{ steps.github-release.outputs.tag }}..."
                    }
                  ]
                }
              ]
            }
          ]')

          echo "base-message-blocks=$(echo $BASE_MESSAGE_BLOCKS | jq '. | @json')" >> "$GITHUB_OUTPUT"

          echo "initial-message-blocks=$(echo $BASE_MESSAGE_BLOCKS | jq --argjson addition "$INITIAL_MESSAGE_ADDITION" '. += $addition | @json')" >> "$GITHUB_OUTPUT"

      - name: Post Initial Slack Message
        id: message
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "text": "Testing Provider Initialization",
              "blocks": ${{ fromJSON(steps.parent.outputs.initial-message-blocks) }}
            }

      - name: Await Ingest
        id: registry-version
        run: |
          SECONDS=0

          while :
          do

            if [[ $(($SECONDS/60)) -ge ${{ inputs.timeout }} ]]; then
              echo "Timeout has been reached, exiting."
              TIMED_OUT="true"

              UPDATED_BLOCKS=$(jq -nc '[
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "emoji",
                          "name": "failure"
                        },
                        {
                          "type": "text",
                          "text": " Timed out while waiting for the Terraform Registry to ingest version ${{ steps.github-release.outputs.tag }}"
                        }
                      ]
                    }
                  ]
                }
              ]')

              break
            fi

            LATEST_REGISTRY_DATA=$(curl -s "https://registry.terraform.io/v2/providers/2242/provider-versions/latest")
            LATEST_REGISTRY_VERSION_TAG=$(echo "$LATEST_REGISTRY_DATA" | jq -r '.data.attributes.tag')

            if [[ "${{ steps.github-release.outputs.tag }}" == "$LATEST_REGISTRY_VERSION_TAG" ]]; then
              echo "Registry is now in sync with GitHub"

              LATEST_REGISTRY_VERSION=$(echo $LATEST_REGISTRY_DATA | jq -r '.data.attributes.version')
              echo "latest=$LATEST_REGISTRY_VERSION" >> "$GITHUB_OUTPUT"

              UPDATED_BLOCKS=$(echo $LATEST_REGISTRY_DATA | jq -c '[
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "emoji",
                          "name": "bufo-check"
                        },
                        {
                          "type": "text",
                          "text": (" Terraform Registry has ingested version " + .data.attributes.tag + ". Initialization testing details will be threaded below.")
                        }
                      ]
                    }
                  ]
                }
              ]')

              break
            else
              echo "Latest Registry version tag ($LATEST_REGISTRY_VERSION_TAG) does not yet match lastest GitHub release tag (${{ steps.github-release.outputs.tag }}). Waiting..."
              sleep 300
            fi
          done

          echo "slack-payload-blocks=$(echo ${{ steps.parent.outputs.base-message-blocks }} | jq --argjson update "$UPDATED_BLOCKS" '. += $update | @json')" >> "$GITHUB_OUTPUT"

          if [[ "$TIMED_OUT" == "true" ]]; then
            exit 1
          fi

      - name: Update Initial Slack Message
        if: ${{ success() || failure() }}
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: chat.update
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ steps.message.outputs.channel_id }}",
              "ts": "${{ steps.message.outputs.ts }}",
              "as_user": true,
              "blocks": ${{ fromJSON(steps.registry-version.outputs.slack-payload-blocks) }}
            }

  init-check:
    name: Initialize Provider
    needs: [registry-check]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Add Status Update Message in Thread
        id: thread-message
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ needs.registry-check.outputs.channel }}",
              "text": "Initialization details for ${{ matrix.os }}",
              "thread_ts": "${{ needs.registry-check.outputs.ts }}",
              "blocks": [
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "emoji",
                          "name": "waiting-spin"
                        },
                        {
                          "type": "text",
                          "text": " Initialization check on ${{ matrix.os }} is running..."
                        }
                      ]
                    }
                  ]
                }
              ]
            }

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_wrapper: false

      - name: Set Provider Version in Terraform Configuration
        run: |
          cat <<EOF > main.tf
          terraform {
            required_providers {
              awscc = {
                source  = "hashicorp/awscc"
                version = "${{ needs.registry-check.outputs.version }}"
              }
            }
          }

          provider "awscc" {
            region = "us-east-1"
          }
          EOF

      # Explicitly setting '+o pipefail' here, as GitHub uses 'set -eo pipefail' for the bash shell
      # and we need to capture error messages rather than outright fail
      # Reference:
      # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#defaultsrunshell
      - name: Initialize
        id: init
        run: |
          set +o pipefail
          ERROR=$(terraform init -upgrade -json | jq --slurp '.[] | select(.diagnostic.severity == "error")')

          if [[ "$ERROR" == "" ]]; then
            echo "payload=$(jq -nc '[
              {
                "type": "rich_text",
                "elements": [
                  {
                    "type": "rich_text_section",
                    "elements": [
                      {
                        "type": "emoji",
                        "name": "bufo-check"
                      },
                      {
                        "type": "text",
                        "text": " Initialization on ${{ matrix.os }} succeeded"
                      }
                    ]
                  }
                ]
              }
            ] | @json')" >> "$GITHUB_OUTPUT"
          else
            echo "payload=$(echo $ERROR | jq -c '[
              {
                "type": "rich_text",
                "elements": [
                  {
                    "type": "rich_text_section",
                    "elements": [
                      {
                        "type": "emoji",
                        "name": "failure"
                      },
                      {
                        "type": "text",
                        "text": " Initialization on ${{ matrix.os }} failed."
                      }
                    ]
                  },
                  {
                    "type": "rich_text_section",
                    "elements": [
                      {
                        "type": "text",
                        "text": "\n\n The error produced during initialization was:"
                      }
                    ]
                  },
                  {
                    "type": "rich_text_preformatted",
                    "elements": [
                      {
                        "type": "text",
                        "text": (.["@message"] + "\n\n" + .diagnostic.detail)
                      }
                    ]
                  }
                ]
              }
            ] | @json')" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Update Threaded Message with Results
        if: ${{ success() || failure() }}
        id: thread-message-update
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: chat.update
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ needs.registry-check.outputs.channel }}",
              "as_user": true,
              "ts": "${{ steps.thread-message.outputs.ts }}",
              "blocks": ${{ fromJSON(steps.init.outputs.payload) }}
            }
