// Code generated by generators/resource/main.go; DO NOT EDIT.

package fms

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_fms_policy", policyResourceType)
}

// policyResourceType returns the Terraform awscc_fms_policy resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::FMS::Policy resource type.
func policyResourceType(ctx context.Context) (provider.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "A resource ARN.",
			//   "maxLength": 1024,
			//   "minLength": 1,
			//   "pattern": "^([^\\s]*)$",
			//   "type": "string"
			// }
			Description: "A resource ARN.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"delete_all_policy_resources": {
			// Property: DeleteAllPolicyResources
			// CloudFormation resource type schema:
			// {
			//   "type": "boolean"
			// }
			Type:     types.BoolType,
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
			// DeleteAllPolicyResources is a write-only property.
		},
		"exclude_map": {
			// Property: ExcludeMap
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "An FMS includeMap or excludeMap.",
			//   "properties": {
			//     "ACCOUNT": {
			//       "insertionOrder": true,
			//       "items": {
			//         "description": "An AWS account ID.",
			//         "maxLength": 12,
			//         "minLength": 12,
			//         "pattern": "^([0-9]*)$",
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "ORGUNIT": {
			//       "insertionOrder": true,
			//       "items": {
			//         "description": "An Organizational Unit ID.",
			//         "maxLength": 68,
			//         "minLength": 16,
			//         "pattern": "^(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$",
			//         "type": "string"
			//       },
			//       "type": "array"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "An FMS includeMap or excludeMap.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"account": {
						// Property: ACCOUNT
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayForEach(validate.StringLenBetween(12, 12)),
							validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^([0-9]*)$"), "")),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"orgunit": {
						// Property: ORGUNIT
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayForEach(validate.StringLenBetween(16, 68)),
							validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$"), "")),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"exclude_resource_tags": {
			// Property: ExcludeResourceTags
			// CloudFormation resource type schema:
			// {
			//   "type": "boolean"
			// }
			Type:     types.BoolType,
			Required: true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 36,
			//   "minLength": 36,
			//   "pattern": "^[a-z0-9A-Z-]{36}$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"include_map": {
			// Property: IncludeMap
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "An FMS includeMap or excludeMap.",
			//   "properties": {
			//     "ACCOUNT": {
			//       "insertionOrder": true,
			//       "items": {
			//         "description": "An AWS account ID.",
			//         "maxLength": 12,
			//         "minLength": 12,
			//         "pattern": "^([0-9]*)$",
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "ORGUNIT": {
			//       "insertionOrder": true,
			//       "items": {
			//         "description": "An Organizational Unit ID.",
			//         "maxLength": 68,
			//         "minLength": 16,
			//         "pattern": "^(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$",
			//         "type": "string"
			//       },
			//       "type": "array"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "An FMS includeMap or excludeMap.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"account": {
						// Property: ACCOUNT
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayForEach(validate.StringLenBetween(12, 12)),
							validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^([0-9]*)$"), "")),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"orgunit": {
						// Property: ORGUNIT
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayForEach(validate.StringLenBetween(16, 68)),
							validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$"), "")),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"policy_name": {
			// Property: PolicyName
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 1024,
			//   "minLength": 1,
			//   "pattern": "^([a-zA-Z0-9_.:/=+\\-@]+)$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 1024),
				validate.StringMatch(regexp.MustCompile("^([a-zA-Z0-9_.:/=+\\-@]+)$"), ""),
			},
		},
		"remediation_enabled": {
			// Property: RemediationEnabled
			// CloudFormation resource type schema:
			// {
			//   "type": "boolean"
			// }
			Type:     types.BoolType,
			Required: true,
		},
		"resource_tags": {
			// Property: ResourceTags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": true,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A resource tag.",
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 8,
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenAtMost(256),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenAtMost(8),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"resource_type": {
			// Property: ResourceType
			// CloudFormation resource type schema:
			// {
			//   "description": "An AWS resource type",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "pattern": "^([^\\s]*)$",
			//   "type": "string"
			// }
			Description: "An AWS resource type",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
				validate.StringMatch(regexp.MustCompile("^([^\\s]*)$"), ""),
			},
		},
		"resource_type_list": {
			// Property: ResourceTypeList
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": true,
			//   "items": {
			//     "description": "An AWS resource type",
			//     "maxLength": 128,
			//     "minLength": 1,
			//     "pattern": "^([^\\s]*)$",
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayForEach(validate.StringLenBetween(1, 128)),
				validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^([^\\s]*)$"), "")),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"resources_clean_up": {
			// Property: ResourcesCleanUp
			// CloudFormation resource type schema:
			// {
			//   "type": "boolean"
			// }
			Type:     types.BoolType,
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"security_service_policy_data": {
			// Property: SecurityServicePolicyData
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Firewall security service policy data.",
			//   "properties": {
			//     "ManagedServiceData": {
			//       "description": "Firewall managed service data.",
			//       "maxLength": 8192,
			//       "minLength": 1,
			//       "type": "string"
			//     },
			//     "PolicyOption": {
			//       "additionalProperties": false,
			//       "description": "Firewall policy option.",
			//       "oneOf": [
			//         {
			//           "required": [
			//             "NetworkFirewallPolicy"
			//           ]
			//         },
			//         {
			//           "required": [
			//             "ThirdPartyFirewallPolicy"
			//           ]
			//         }
			//       ],
			//       "properties": {
			//         "NetworkFirewallPolicy": {
			//           "additionalProperties": false,
			//           "description": "Network firewall policy.",
			//           "properties": {
			//             "FirewallDeploymentModel": {
			//               "description": "Firewall deployment mode.",
			//               "enum": [
			//                 "DISTRIBUTED",
			//                 "CENTRALIZED"
			//               ],
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "FirewallDeploymentModel"
			//           ],
			//           "type": "object"
			//         },
			//         "ThirdPartyFirewallPolicy": {
			//           "additionalProperties": false,
			//           "description": "Third party firewall policy.",
			//           "properties": {
			//             "FirewallDeploymentModel": {
			//               "description": "Firewall deployment mode.",
			//               "enum": [
			//                 "DISTRIBUTED",
			//                 "CENTRALIZED"
			//               ],
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "FirewallDeploymentModel"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "Type": {
			//       "description": "Firewall policy type.",
			//       "enum": [
			//         "WAF",
			//         "WAFV2",
			//         "SHIELD_ADVANCED",
			//         "SECURITY_GROUPS_COMMON",
			//         "SECURITY_GROUPS_CONTENT_AUDIT",
			//         "SECURITY_GROUPS_USAGE_AUDIT",
			//         "NETWORK_FIREWALL",
			//         "THIRD_PARTY_FIREWALL",
			//         "DNS_FIREWALL"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "Type"
			//   ],
			//   "type": "object"
			// }
			Description: "Firewall security service policy data.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"managed_service_data": {
						// Property: ManagedServiceData
						Description: "Firewall managed service data.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 8192),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"policy_option": {
						// Property: PolicyOption
						Description: "Firewall policy option.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"network_firewall_policy": {
									// Property: NetworkFirewallPolicy
									Description: "Network firewall policy.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"firewall_deployment_model": {
												// Property: FirewallDeploymentModel
												Description: "Firewall deployment mode.",
												Type:        types.StringType,
												Required:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"DISTRIBUTED",
														"CENTRALIZED",
													}),
												},
											},
										},
									),
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"third_party_firewall_policy": {
									// Property: ThirdPartyFirewallPolicy
									Description: "Third party firewall policy.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"firewall_deployment_model": {
												// Property: FirewallDeploymentModel
												Description: "Firewall deployment mode.",
												Type:        types.StringType,
												Required:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"DISTRIBUTED",
														"CENTRALIZED",
													}),
												},
											},
										},
									),
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.RequiredAttributes(
								validate.OneOfRequired(
									validate.Required(
										"network_firewall_policy",
									),
									validate.Required(
										"third_party_firewall_policy",
									),
								),
							),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"type": {
						// Property: Type
						Description: "Firewall policy type.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"WAF",
								"WAFV2",
								"SHIELD_ADVANCED",
								"SECURITY_GROUPS_COMMON",
								"SECURITY_GROUPS_CONTENT_AUDIT",
								"SECURITY_GROUPS_USAGE_AUDIT",
								"NETWORK_FIREWALL",
								"THIRD_PARTY_FIREWALL",
								"DNS_FIREWALL",
							}),
						},
					},
				},
			),
			Required: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": true,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A policy tag.",
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "pattern": "^([^\\s]*)$",
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "pattern": "^([^\\s]*)$",
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
							validate.StringMatch(regexp.MustCompile("^([^\\s]*)$"), ""),
						},
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenAtMost(256),
							validate.StringMatch(regexp.MustCompile("^([^\\s]*)$"), ""),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
	}

	schema := tfsdk.Schema{
		Description: "Creates an AWS Firewall Manager policy.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::FMS::Policy").WithTerraformTypeName("awscc_fms_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account":                      "ACCOUNT",
		"arn":                          "Arn",
		"delete_all_policy_resources":  "DeleteAllPolicyResources",
		"exclude_map":                  "ExcludeMap",
		"exclude_resource_tags":        "ExcludeResourceTags",
		"firewall_deployment_model":    "FirewallDeploymentModel",
		"id":                           "Id",
		"include_map":                  "IncludeMap",
		"key":                          "Key",
		"managed_service_data":         "ManagedServiceData",
		"network_firewall_policy":      "NetworkFirewallPolicy",
		"orgunit":                      "ORGUNIT",
		"policy_name":                  "PolicyName",
		"policy_option":                "PolicyOption",
		"remediation_enabled":          "RemediationEnabled",
		"resource_tags":                "ResourceTags",
		"resource_type":                "ResourceType",
		"resource_type_list":           "ResourceTypeList",
		"resources_clean_up":           "ResourcesCleanUp",
		"security_service_policy_data": "SecurityServicePolicyData",
		"tags":                         "Tags",
		"third_party_firewall_policy":  "ThirdPartyFirewallPolicy",
		"type":                         "Type",
		"value":                        "Value",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/DeleteAllPolicyResources",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
