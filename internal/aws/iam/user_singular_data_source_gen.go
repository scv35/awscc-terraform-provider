// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_iam_user", userDataSource)
}

// userDataSource returns the Terraform awscc_iam_user data source.
// This Terraform data source corresponds to the CloudFormation AWS::IAM::User resource.
func userDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see IAM Identifiers in the IAM User Guide.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see IAM Identifiers in the IAM User Guide.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Groups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of group names to which you want to add the user.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of group names to which you want to add the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoginProfile
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the AWS Management Console.",
		//	  "properties": {
		//	    "Password": {
		//	      "description": "The user's password.",
		//	      "type": "string"
		//	    },
		//	    "PasswordResetRequired": {
		//	      "description": "Specifies whether the user is required to set a new password on next sign-in.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "required": [
		//	    "Password"
		//	  ],
		//	  "type": "object"
		//	}
		"login_profile": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Password
				"password": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The user's password.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PasswordResetRequired
				"password_reset_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether the user is required to set a new password on next sign-in.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the AWS Management Console.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManagedPolicyArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"managed_policy_arns": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Path
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The path to the user. For more information about paths, see IAM identifiers in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.",
		//	  "type": "string"
		//	}
		"path": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The path to the user. For more information about paths, see IAM identifiers in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PermissionsBoundary
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the policy that is used to set the permissions boundary for the user.",
		//	  "type": "string"
		//	}
		"permissions_boundary": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the policy that is used to set the permissions boundary for the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Policies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Adds or updates an inline policy document that is embedded in the specified IAM role.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about an attached policy.",
		//	    "properties": {
		//	      "PolicyDocument": {
		//	        "description": "The policy document.",
		//	        "type": "string"
		//	      },
		//	      "PolicyName": {
		//	        "description": "The friendly name (not ARN) identifying the policy.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "PolicyName",
		//	      "PolicyDocument"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: PolicyDocument
					"policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The policy document.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PolicyName
					"policy_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The friendly name (not ARN) identifying the policy.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Adds or updates an inline policy document that is embedded in the specified IAM role.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of tags that are associated with the user. For more information about tagging, see Tagging IAM resources in the IAM User Guide.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of tags that are associated with the user. For more information about tagging, see Tagging IAM resources in the IAM User Guide.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The friendly name identifying the user.",
		//	  "type": "string"
		//	}
		"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The friendly name identifying the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IAM::User",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IAM::User").WithTerraformTypeName("awscc_iam_user")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                     "Arn",
		"groups":                  "Groups",
		"key":                     "Key",
		"login_profile":           "LoginProfile",
		"managed_policy_arns":     "ManagedPolicyArns",
		"password":                "Password",
		"password_reset_required": "PasswordResetRequired",
		"path":                    "Path",
		"permissions_boundary":    "PermissionsBoundary",
		"policies":                "Policies",
		"policy_document":         "PolicyDocument",
		"policy_name":             "PolicyName",
		"tags":                    "Tags",
		"user_name":               "UserName",
		"value":                   "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
