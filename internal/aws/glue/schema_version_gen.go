// Code generated by generators/resource/main.go; DO NOT EDIT.

package glue

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_glue_schema_version", schemaVersionResourceType)
}

// schemaVersionResourceType returns the Terraform aws_glue_schema_version resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Glue::SchemaVersion resource type.
func schemaVersionResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"schema": {
			// Property: Schema
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "description": "Identifier for the schema where the schema version will be created.",
			     "properties": {
			       "RegistryName": {
			         "description": "Name of the registry to identify where the Schema is located.",
			         "maxLength": 255,
			         "minLength": 1,
			         "type": "string"
			       },
			       "SchemaArn": {
			         "description": "Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.",
			         "pattern": "",
			         "type": "string"
			       },
			       "SchemaName": {
			         "description": "Name of the schema. This parameter requires RegistryName to be provided.",
			         "maxLength": 255,
			         "minLength": 1,
			         "type": "string"
			       }
			     },
			     "type": "object"
			   }
			*/
			Description: "Identifier for the schema where the schema version will be created.",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"registry_name": {
						// Property: RegistryName
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Name of the registry to identify where the Schema is located.",
						     "maxLength": 255,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "Name of the registry to identify where the Schema is located.",
						Type:        types.StringType,
						Optional:    true,
					},
					"schema_arn": {
						// Property: SchemaArn
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.",
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.",
						Type:        types.StringType,
						Optional:    true,
					},
					"schema_name": {
						// Property: SchemaName
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Name of the schema. This parameter requires RegistryName to be provided.",
						     "maxLength": 255,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "Name of the schema. This parameter requires RegistryName to be provided.",
						Type:        types.StringType,
						Optional:    true,
					},
				},
			),
			Required: true,
			// Schema is a force-new attribute.
		},
		"schema_definition": {
			// Property: SchemaDefinition
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Complete definition of the schema in plain-text.",
			     "maxLength": 170000,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Complete definition of the schema in plain-text.",
			Type:        types.StringType,
			Required:    true,
			// SchemaDefinition is a force-new attribute.
		},
		"version_id": {
			// Property: VersionId
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Represents the version ID associated with the schema version.",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Represents the version ID associated with the schema version.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "This resource represents an individual schema version of a schema defined in Glue Schema Registry.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Glue::SchemaVersion").WithTerraformTypeName("aws_glue_schema_version").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_glue_schema_version", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
