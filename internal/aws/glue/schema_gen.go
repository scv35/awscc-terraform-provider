// Code generated by generators/resource/main.go; DO NOT EDIT.

package glue

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_glue_schema", schemaResourceType)
}

// schemaResourceType returns the Terraform aws_glue_schema resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Glue::Schema resource type.
func schemaResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Amazon Resource Name for the Schema.",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Amazon Resource Name for the Schema.",
			Type:        types.StringType,
			Computed:    true,
		},
		"checkpoint_version": {
			// Property: CheckpointVersion
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "description": "Specify checkpoint version for update. This is only required to update the Compatibility.",
			     "properties": {
			       "IsLatest": {
			         "description": "Indicates if the latest version needs to be updated.",
			         "type": "boolean"
			       },
			       "VersionNumber": {
			         "description": "Indicates the version number in the schema to update.",
			         "type": "integer"
			       }
			     },
			     "$ref": "#/definitions/SchemaVersion",
			     "type": "object"
			   }
			*/
			Description: "Specify checkpoint version for update. This is only required to update the Compatibility.",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"is_latest": {
						// Property: IsLatest
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Indicates if the latest version needs to be updated.",
						     "type": "boolean"
						   }
						*/
						Description: "Indicates if the latest version needs to be updated.",
						Type:        types.BoolType,
						Optional:    true,
					},
					"version_number": {
						// Property: VersionNumber
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Indicates the version number in the schema to update.",
						     "type": "integer"
						   }
						*/
						Description: "Indicates the version number in the schema to update.",
						Type:        types.NumberType,
						Optional:    true,
					},
				},
			),
			Optional: true,
		},
		"compatibility": {
			// Property: Compatibility
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Compatibility setting for the schema.",
			     "enum": [
			       "NONE",
			       "DISABLED",
			       "BACKWARD",
			       "BACKWARD_ALL",
			       "FORWARD",
			       "FORWARD_ALL",
			       "FULL",
			       "FULL_ALL"
			     ],
			     "type": "string"
			   }
			*/
			Description: "Compatibility setting for the schema.",
			Type:        types.StringType,
			Required:    true,
		},
		"data_format": {
			// Property: DataFormat
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'",
			     "enum": [
			       "AVRO",
			       "JSON"
			     ],
			     "type": "string"
			   }
			*/
			Description: "Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'",
			Type:        types.StringType,
			Required:    true,
			// DataFormat is a force-new attribute.
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "A description of the schema. If description is not provided, there will not be any default value for this.",
			     "maxLength": 1000,
			     "minLength": 0,
			     "type": "string"
			   }
			*/
			Description: "A description of the schema. If description is not provided, there will not be any default value for this.",
			Type:        types.StringType,
			Optional:    true,
		},
		"initial_schema_version_id": {
			// Property: InitialSchemaVersionId
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Represents the version ID associated with the initial schema version.",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Represents the version ID associated with the initial schema version.",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Name of the schema.",
			     "maxLength": 255,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Name of the schema.",
			Type:        types.StringType,
			Required:    true,
			// Name is a force-new attribute.
		},
		"registry": {
			// Property: Registry
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "description": "Identifier for the registry which the schema is part of.",
			     "properties": {
			       "Arn": {
			         "description": "Amazon Resource Name for the Registry.",
			         "pattern": "",
			         "type": "string"
			       },
			       "Name": {
			         "description": "Name of the registry in which the schema will be created.",
			         "maxLength": 255,
			         "minLength": 1,
			         "type": "string"
			       }
			     },
			     "$ref": "#/definitions/Registry",
			     "type": "object"
			   }
			*/
			Description: "Identifier for the registry which the schema is part of.",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"arn": {
						// Property: Arn
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Amazon Resource Name for the Registry.",
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "Amazon Resource Name for the Registry.",
						Type:        types.StringType,
						Optional:    true,
					},
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Name of the registry in which the schema will be created.",
						     "maxLength": 255,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "Name of the registry in which the schema will be created.",
						Type:        types.StringType,
						Optional:    true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// Registry is a force-new attribute.
		},
		"schema_definition": {
			// Property: SchemaDefinition
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Definition for the initial schema version in plain-text.",
			     "maxLength": 170000,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Definition for the initial schema version in plain-text.",
			Type:        types.StringType,
			Required:    true,
			// SchemaDefinition is a force-new attribute.
			// SchemaDefinition is a write-only attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "List of tags to tag the schema",
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Key": {
			           "description": "A key to identify the tag.",
			           "maxLength": 128,
			           "minLength": 1,
			           "type": "string"
			         },
			         "Value": {
			           "description": "Corresponding tag value for the key.",
			           "maxLength": 256,
			           "minLength": 0,
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "maxItems": 10,
			     "minItems": 0,
			     "type": "array"
			   }
			*/
			Description: "List of tags to tag the schema",
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A key to identify the tag.",
						     "maxLength": 128,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "A key to identify the tag.",
						Type:        types.StringType,
						Required:    true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Corresponding tag value for the key.",
						     "maxLength": 256,
						     "minLength": 0,
						     "type": "string"
						   }
						*/
						Description: "Corresponding tag value for the key.",
						Type:        types.StringType,
						Required:    true,
					},
				},
				schema.ListNestedAttributesOptions{
					MinItems: 0,
					MaxItems: 10,
				},
			),
			Optional: true,
			Computed: true,
			// Tags is a force-new attribute.
			// Tags is a write-only attribute.
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "This resource represents a schema of Glue Schema Registry.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Glue::Schema").WithTerraformTypeName("aws_glue_schema").WithTerraformSchema(schema)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Tags",
		"/properties/SchemaDefinition",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_glue_schema", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
