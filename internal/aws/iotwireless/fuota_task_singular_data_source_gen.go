// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iotwireless

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_iotwireless_fuota_task", fuotaTaskDataSourceType)
}

// fuotaTaskDataSourceType returns the Terraform awscc_iotwireless_fuota_task data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::IoTWireless::FuotaTask resource type.
func fuotaTaskDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "FUOTA task arn. Returned after successful create.",
			//   "type": "string"
			// }
			Description: "FUOTA task arn. Returned after successful create.",
			Type:        types.StringType,
			Computed:    true,
		},
		"associate_multicast_group": {
			// Property: AssociateMulticastGroup
			// CloudFormation resource type schema:
			// {
			//   "description": "Multicast group to associate. Only for update request.",
			//   "maxLength": 256,
			//   "type": "string"
			// }
			Description: "Multicast group to associate. Only for update request.",
			Type:        types.StringType,
			Computed:    true,
		},
		"associate_wireless_device": {
			// Property: AssociateWirelessDevice
			// CloudFormation resource type schema:
			// {
			//   "description": "Wireless device to associate. Only for update request.",
			//   "maxLength": 256,
			//   "type": "string"
			// }
			Description: "Wireless device to associate. Only for update request.",
			Type:        types.StringType,
			Computed:    true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "FUOTA task description",
			//   "maxLength": 2048,
			//   "type": "string"
			// }
			Description: "FUOTA task description",
			Type:        types.StringType,
			Computed:    true,
		},
		"disassociate_multicast_group": {
			// Property: DisassociateMulticastGroup
			// CloudFormation resource type schema:
			// {
			//   "description": "Multicast group to disassociate. Only for update request.",
			//   "maxLength": 256,
			//   "type": "string"
			// }
			Description: "Multicast group to disassociate. Only for update request.",
			Type:        types.StringType,
			Computed:    true,
		},
		"disassociate_wireless_device": {
			// Property: DisassociateWirelessDevice
			// CloudFormation resource type schema:
			// {
			//   "description": "Wireless device to disassociate. Only for update request.",
			//   "maxLength": 256,
			//   "type": "string"
			// }
			Description: "Wireless device to disassociate. Only for update request.",
			Type:        types.StringType,
			Computed:    true,
		},
		"firmware_update_image": {
			// Property: FirmwareUpdateImage
			// CloudFormation resource type schema:
			// {
			//   "description": "FUOTA task firmware update image binary S3 link",
			//   "maxLength": 2048,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "FUOTA task firmware update image binary S3 link",
			Type:        types.StringType,
			Computed:    true,
		},
		"firmware_update_role": {
			// Property: FirmwareUpdateRole
			// CloudFormation resource type schema:
			// {
			//   "description": "FUOTA task firmware IAM role for reading S3",
			//   "maxLength": 256,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "FUOTA task firmware IAM role for reading S3",
			Type:        types.StringType,
			Computed:    true,
		},
		"fuota_task_status": {
			// Property: FuotaTaskStatus
			// CloudFormation resource type schema:
			// {
			//   "description": "FUOTA task status. Returned after successful read.",
			//   "type": "string"
			// }
			Description: "FUOTA task status. Returned after successful read.",
			Type:        types.StringType,
			Computed:    true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "FUOTA task id. Returned after successful create.",
			//   "maxLength": 256,
			//   "type": "string"
			// }
			Description: "FUOTA task id. Returned after successful create.",
			Type:        types.StringType,
			Computed:    true,
		},
		"lo_ra_wan": {
			// Property: LoRaWAN
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "FUOTA task LoRaWAN",
			//   "properties": {
			//     "RfRegion": {
			//       "description": "FUOTA task LoRaWAN RF region",
			//       "maxLength": 64,
			//       "minLength": 1,
			//       "type": "string"
			//     },
			//     "StartTime": {
			//       "description": "FUOTA task LoRaWAN start time",
			//       "maxLength": 64,
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "RfRegion"
			//   ],
			//   "type": "object"
			// }
			Description: "FUOTA task LoRaWAN",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"rf_region": {
						// Property: RfRegion
						Description: "FUOTA task LoRaWAN RF region",
						Type:        types.StringType,
						Computed:    true,
					},
					"start_time": {
						// Property: StartTime
						Description: "FUOTA task LoRaWAN start time",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "Name of FUOTA task",
			//   "maxLength": 256,
			//   "type": "string"
			// }
			Description: "Name of FUOTA task",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "A list of key-value pairs that contain metadata for the FUOTA task.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 200,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "A list of key-value pairs that contain metadata for the FUOTA task.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.SetNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::IoTWireless::FuotaTask",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTWireless::FuotaTask").WithTerraformTypeName("awscc_iotwireless_fuota_task")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                          "Arn",
		"associate_multicast_group":    "AssociateMulticastGroup",
		"associate_wireless_device":    "AssociateWirelessDevice",
		"description":                  "Description",
		"disassociate_multicast_group": "DisassociateMulticastGroup",
		"disassociate_wireless_device": "DisassociateWirelessDevice",
		"firmware_update_image":        "FirmwareUpdateImage",
		"firmware_update_role":         "FirmwareUpdateRole",
		"fuota_task_status":            "FuotaTaskStatus",
		"id":                           "Id",
		"key":                          "Key",
		"lo_ra_wan":                    "LoRaWAN",
		"name":                         "Name",
		"rf_region":                    "RfRegion",
		"start_time":                   "StartTime",
		"tags":                         "Tags",
		"value":                        "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return singularDataSourceType, nil
}
