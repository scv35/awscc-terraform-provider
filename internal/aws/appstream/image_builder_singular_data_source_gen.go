// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appstream

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appstream_image_builder", imageBuilderDataSource)
}

// imageBuilderDataSource returns the Terraform awscc_appstream_image_builder data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppStream::ImageBuilder resource.
func imageBuilderDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"access_endpoints": {
			// Property: AccessEndpoints
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "EndpointType": {
			//	        "type": "string"
			//	      },
			//	      "VpceId": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "EndpointType",
			//	      "VpceId"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"endpoint_type": {
						// Property: EndpointType
						Type:     types.StringType,
						Computed: true,
					},
					"vpce_id": {
						// Property: VpceId
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"appstream_agent_version": {
			// Property: AppstreamAgentVersion
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"display_name": {
			// Property: DisplayName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"domain_join_info": {
			// Property: DomainJoinInfo
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "DirectoryName": {
			//	      "type": "string"
			//	    },
			//	    "OrganizationalUnitDistinguishedName": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"directory_name": {
						// Property: DirectoryName
						Type:     types.StringType,
						Computed: true,
					},
					"organizational_unit_distinguished_name": {
						// Property: OrganizationalUnitDistinguishedName
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"enable_default_internet_access": {
			// Property: EnableDefaultInternetAccess
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "boolean"
			//	}
			Type:     types.BoolType,
			Computed: true,
		},
		"iam_role_arn": {
			// Property: IamRoleArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"image_arn": {
			// Property: ImageArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"image_name": {
			// Property: ImageName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"instance_type": {
			// Property: InstanceType
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"streaming_url": {
			// Property: StreamingUrl
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Value",
			//	      "Key"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"vpc_config": {
			// Property: VpcConfig
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "SecurityGroupIds": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": false
			//	    },
			//	    "SubnetIds": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": false
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"security_group_ids": {
						// Property: SecurityGroupIds
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"subnet_ids": {
						// Property: SubnetIds
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::AppStream::ImageBuilder",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppStream::ImageBuilder").WithTerraformTypeName("awscc_appstream_image_builder")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_endpoints":                       "AccessEndpoints",
		"appstream_agent_version":                "AppstreamAgentVersion",
		"description":                            "Description",
		"directory_name":                         "DirectoryName",
		"display_name":                           "DisplayName",
		"domain_join_info":                       "DomainJoinInfo",
		"enable_default_internet_access":         "EnableDefaultInternetAccess",
		"endpoint_type":                          "EndpointType",
		"iam_role_arn":                           "IamRoleArn",
		"image_arn":                              "ImageArn",
		"image_name":                             "ImageName",
		"instance_type":                          "InstanceType",
		"key":                                    "Key",
		"name":                                   "Name",
		"organizational_unit_distinguished_name": "OrganizationalUnitDistinguishedName",
		"security_group_ids":                     "SecurityGroupIds",
		"streaming_url":                          "StreamingUrl",
		"subnet_ids":                             "SubnetIds",
		"tags":                                   "Tags",
		"value":                                  "Value",
		"vpc_config":                             "VpcConfig",
		"vpce_id":                                "VpceId",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
