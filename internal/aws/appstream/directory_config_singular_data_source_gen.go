// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appstream

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appstream_directory_config", directoryConfigDataSource)
}

// directoryConfigDataSource returns the Terraform awscc_appstream_directory_config data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppStream::DirectoryConfig resource.
func directoryConfigDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"certificate_based_auth_properties": {
			// Property: CertificateBasedAuthProperties
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "CertificateAuthorityArn": {
			//	      "type": "string"
			//	    },
			//	    "Status": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"certificate_authority_arn": {
						// Property: CertificateAuthorityArn
						Type:     types.StringType,
						Computed: true,
					},
					"status": {
						// Property: Status
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"directory_name": {
			// Property: DirectoryName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"organizational_unit_distinguished_names": {
			// Property: OrganizationalUnitDistinguishedNames
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "type": "string"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"service_account_credentials": {
			// Property: ServiceAccountCredentials
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "AccountName": {
			//	      "type": "string"
			//	    },
			//	    "AccountPassword": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "AccountName",
			//	    "AccountPassword"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"account_name": {
						// Property: AccountName
						Type:     types.StringType,
						Computed: true,
					},
					"account_password": {
						// Property: AccountPassword
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::AppStream::DirectoryConfig",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppStream::DirectoryConfig").WithTerraformTypeName("awscc_appstream_directory_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_name":                            "AccountName",
		"account_password":                        "AccountPassword",
		"certificate_authority_arn":               "CertificateAuthorityArn",
		"certificate_based_auth_properties":       "CertificateBasedAuthProperties",
		"directory_name":                          "DirectoryName",
		"organizational_unit_distinguished_names": "OrganizationalUnitDistinguishedNames",
		"service_account_credentials":             "ServiceAccountCredentials",
		"status":                                  "Status",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
