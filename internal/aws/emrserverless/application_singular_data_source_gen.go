// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package emrserverless

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_emrserverless_application", applicationDataSource)
}

// applicationDataSource returns the Terraform awscc_emrserverless_application data source.
// This Terraform data source corresponds to the CloudFormation AWS::EMRServerless::Application resource.
func applicationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"application_id": {
			// Property: ApplicationId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the EMR Serverless Application.",
			//	  "maxLength": 64,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "The ID of the EMR Serverless Application.",
			Type:        types.StringType,
			Computed:    true,
		},
		"architecture": {
			// Property: Architecture
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The cpu architecture of an application.",
			//	  "enum": [
			//	    "ARM64",
			//	    "X86_64"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "The cpu architecture of an application.",
			Type:        types.StringType,
			Computed:    true,
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Amazon Resource Name (ARN) of the EMR Serverless Application.",
			//	  "type": "string"
			//	}
			Description: "The Amazon Resource Name (ARN) of the EMR Serverless Application.",
			Type:        types.StringType,
			Computed:    true,
		},
		"auto_start_configuration": {
			// Property: AutoStartConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Configuration for Auto Start of Application.",
			//	  "properties": {
			//	    "Enabled": {
			//	      "default": true,
			//	      "description": "If set to true, the Application will automatically start. Defaults to true.",
			//	      "type": "boolean"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "Configuration for Auto Start of Application.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"enabled": {
						// Property: Enabled
						Description: "If set to true, the Application will automatically start. Defaults to true.",
						Type:        types.BoolType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"auto_stop_configuration": {
			// Property: AutoStopConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Configuration for Auto Stop of Application.",
			//	  "properties": {
			//	    "Enabled": {
			//	      "default": true,
			//	      "description": "If set to true, the Application will automatically stop after being idle. Defaults to true.",
			//	      "type": "boolean"
			//	    },
			//	    "IdleTimeoutMinutes": {
			//	      "description": "The amount of time [in minutes] to wait before auto stopping the Application when idle. Defaults to 15 minutes.",
			//	      "type": "integer"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "Configuration for Auto Stop of Application.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"enabled": {
						// Property: Enabled
						Description: "If set to true, the Application will automatically stop after being idle. Defaults to true.",
						Type:        types.BoolType,
						Computed:    true,
					},
					"idle_timeout_minutes": {
						// Property: IdleTimeoutMinutes
						Description: "The amount of time [in minutes] to wait before auto stopping the Application when idle. Defaults to 15 minutes.",
						Type:        types.Int64Type,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"initial_capacity": {
			// Property: InitialCapacity
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Initial capacity initialized when an Application is started.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "description": "Worker type for an analytics framework.",
			//	        "maxLength": 50,
			//	        "minLength": 1,
			//	        "pattern": "^[a-zA-Z]+[-_]*[a-zA-Z]+$",
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "additionalProperties": false,
			//	        "properties": {
			//	          "WorkerConfiguration": {
			//	            "additionalProperties": false,
			//	            "properties": {
			//	              "Cpu": {
			//	                "description": "Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.",
			//	                "maxLength": 15,
			//	                "minLength": 1,
			//	                "pattern": "^[1-9][0-9]*(\\s)?(vCPU|vcpu|VCPU)?$",
			//	                "type": "string"
			//	              },
			//	              "Disk": {
			//	                "description": "Per worker Disk resource. GB is the only supported unit and specifying GB is optional",
			//	                "maxLength": 15,
			//	                "minLength": 1,
			//	                "pattern": "^[1-9][0-9]*(\\s)?(GB|gb|gB|Gb)$",
			//	                "type": "string"
			//	              },
			//	              "Memory": {
			//	                "description": "Per worker memory resource. GB is the only supported unit and specifying GB is optional.",
			//	                "maxLength": 15,
			//	                "minLength": 1,
			//	                "pattern": "^[1-9][0-9]*(\\s)?(GB|gb|gB|Gb)?$",
			//	                "type": "string"
			//	              }
			//	            },
			//	            "required": [
			//	              "Cpu",
			//	              "Memory"
			//	            ],
			//	            "type": "object"
			//	          },
			//	          "WorkerCount": {
			//	            "description": "Initial count of workers to be initialized when an Application is started. This count will be continued to be maintained until the Application is stopped",
			//	            "format": "int64",
			//	            "maximum": 1000000,
			//	            "minimum": 1,
			//	            "type": "integer"
			//	          }
			//	        },
			//	        "required": [
			//	          "WorkerCount",
			//	          "WorkerConfiguration"
			//	        ],
			//	        "type": "object"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": true
			//	}
			Description: "Initial capacity initialized when an Application is started.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "Worker type for an analytics framework.",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"worker_configuration": {
									// Property: WorkerConfiguration
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"cpu": {
												// Property: Cpu
												Description: "Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.",
												Type:        types.StringType,
												Computed:    true,
											},
											"disk": {
												// Property: Disk
												Description: "Per worker Disk resource. GB is the only supported unit and specifying GB is optional",
												Type:        types.StringType,
												Computed:    true,
											},
											"memory": {
												// Property: Memory
												Description: "Per worker memory resource. GB is the only supported unit and specifying GB is optional.",
												Type:        types.StringType,
												Computed:    true,
											},
										},
									),
									Computed: true,
								},
								"worker_count": {
									// Property: WorkerCount
									Description: "Initial count of workers to be initialized when an Application is started. This count will be continued to be maintained until the Application is stopped",
									Type:        types.Int64Type,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"maximum_capacity": {
			// Property: MaximumCapacity
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.",
			//	  "properties": {
			//	    "Cpu": {
			//	      "description": "Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.",
			//	      "maxLength": 15,
			//	      "minLength": 1,
			//	      "pattern": "^[1-9][0-9]*(\\s)?(vCPU|vcpu|VCPU)?$",
			//	      "type": "string"
			//	    },
			//	    "Disk": {
			//	      "description": "Per worker Disk resource. GB is the only supported unit and specifying GB is optional",
			//	      "maxLength": 15,
			//	      "minLength": 1,
			//	      "pattern": "^[1-9][0-9]*(\\s)?(GB|gb|gB|Gb)$",
			//	      "type": "string"
			//	    },
			//	    "Memory": {
			//	      "description": "Per worker memory resource. GB is the only supported unit and specifying GB is optional.",
			//	      "maxLength": 15,
			//	      "minLength": 1,
			//	      "pattern": "^[1-9][0-9]*(\\s)?(GB|gb|gB|Gb)?$",
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "Cpu",
			//	    "Memory"
			//	  ],
			//	  "type": "object"
			//	}
			Description: "Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"cpu": {
						// Property: Cpu
						Description: "Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.",
						Type:        types.StringType,
						Computed:    true,
					},
					"disk": {
						// Property: Disk
						Description: "Per worker Disk resource. GB is the only supported unit and specifying GB is optional",
						Type:        types.StringType,
						Computed:    true,
					},
					"memory": {
						// Property: Memory
						Description: "Per worker memory resource. GB is the only supported unit and specifying GB is optional.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "User friendly Application name.",
			//	  "maxLength": 64,
			//	  "minLength": 1,
			//	  "pattern": "^[A-Za-z0-9._\\/#-]+$",
			//	  "type": "string"
			//	}
			Description: "User friendly Application name.",
			Type:        types.StringType,
			Computed:    true,
		},
		"network_configuration": {
			// Property: NetworkConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Network Configuration for customer VPC connectivity.",
			//	  "properties": {
			//	    "SecurityGroupIds": {
			//	      "description": "The ID of the security groups in the VPC to which you want to connect your job or application.",
			//	      "insertionOrder": false,
			//	      "items": {
			//	        "description": "Identifier of a security group",
			//	        "maxLength": 32,
			//	        "minLength": 1,
			//	        "pattern": "^[-0-9a-zA-Z]+",
			//	        "type": "string"
			//	      },
			//	      "maxItems": 5,
			//	      "minItems": 1,
			//	      "type": "array",
			//	      "uniqueItems": true
			//	    },
			//	    "SubnetIds": {
			//	      "description": "The ID of the subnets in the VPC to which you want to connect your job or application.",
			//	      "insertionOrder": false,
			//	      "items": {
			//	        "description": "Identifier of a subnet",
			//	        "maxLength": 32,
			//	        "minLength": 1,
			//	        "pattern": "^[-0-9a-zA-Z]+",
			//	        "type": "string"
			//	      },
			//	      "maxItems": 16,
			//	      "minItems": 1,
			//	      "type": "array",
			//	      "uniqueItems": true
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "Network Configuration for customer VPC connectivity.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"security_group_ids": {
						// Property: SecurityGroupIds
						Description: "The ID of the security groups in the VPC to which you want to connect your job or application.",
						Type:        types.SetType{ElemType: types.StringType},
						Computed:    true,
					},
					"subnet_ids": {
						// Property: SubnetIds
						Description: "The ID of the subnets in the VPC to which you want to connect your job or application.",
						Type:        types.SetType{ElemType: types.StringType},
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"release_label": {
			// Property: ReleaseLabel
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "EMR release label.",
			//	  "maxLength": 64,
			//	  "minLength": 1,
			//	  "pattern": "^[A-Za-z0-9._/-]+$",
			//	  "type": "string"
			//	}
			Description: "EMR release label.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Tag map with key and value",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "description": "A key-value pair to associate with a resource.",
			//	    "properties": {
			//	      "Key": {
			//	        "description": "The value for the tag. You can specify a value that is 1 to 128 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			//	        "maxLength": 128,
			//	        "minLength": 1,
			//	        "pattern": "^[A-Za-z0-9 /_.:=+@-]+$",
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			//	        "maxLength": 256,
			//	        "minLength": 0,
			//	        "pattern": "^[A-Za-z0-9 /_.:=+@-]*$",
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": true
			//	}
			Description: "Tag map with key and value",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The value for the tag. You can specify a value that is 1 to 128 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"type": {
			// Property: Type
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The type of the application",
			//	  "type": "string"
			//	}
			Description: "The type of the application",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EMRServerless::Application",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EMRServerless::Application").WithTerraformTypeName("awscc_emrserverless_application")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_id":           "ApplicationId",
		"architecture":             "Architecture",
		"arn":                      "Arn",
		"auto_start_configuration": "AutoStartConfiguration",
		"auto_stop_configuration":  "AutoStopConfiguration",
		"cpu":                      "Cpu",
		"disk":                     "Disk",
		"enabled":                  "Enabled",
		"idle_timeout_minutes":     "IdleTimeoutMinutes",
		"initial_capacity":         "InitialCapacity",
		"key":                      "Key",
		"maximum_capacity":         "MaximumCapacity",
		"memory":                   "Memory",
		"name":                     "Name",
		"network_configuration":    "NetworkConfiguration",
		"release_label":            "ReleaseLabel",
		"security_group_ids":       "SecurityGroupIds",
		"subnet_ids":               "SubnetIds",
		"tags":                     "Tags",
		"type":                     "Type",
		"value":                    "Value",
		"worker_configuration":     "WorkerConfiguration",
		"worker_count":             "WorkerCount",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
