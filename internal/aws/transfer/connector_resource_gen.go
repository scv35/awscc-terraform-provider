// Code generated by generators/resource/main.go; DO NOT EDIT.

package transfer

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"regexp"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_transfer_connector", connectorResource)
}

// connectorResource returns the Terraform awscc_transfer_connector resource.
// This Terraform resource corresponds to the CloudFormation AWS::Transfer::Connector resource.
func connectorResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessRole
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the access role for the connector.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "arn:.*role/.*",
		//	  "type": "string"
		//	}
		"access_role": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the access role for the connector.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(20, 2048),
				stringvalidator.RegexMatches(regexp.MustCompile("arn:.*role/.*"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the unique Amazon Resource Name (ARN) for the workflow.",
		//	  "maxLength": 1600,
		//	  "minLength": 20,
		//	  "pattern": "arn:.*",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the unique Amazon Resource Name (ARN) for the workflow.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: As2Config
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration for an AS2 connector.",
		//	  "properties": {
		//	    "Compression": {
		//	      "description": "Compression setting for this AS2 connector configuration.",
		//	      "enum": [
		//	        "ZLIB",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "EncryptionAlgorithm": {
		//	      "description": "Encryption algorithm for this AS2 connector configuration.",
		//	      "enum": [
		//	        "AES128_CBC",
		//	        "AES192_CBC",
		//	        "AES256_CBC",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "LocalProfileId": {
		//	      "description": "A unique identifier for the local profile.",
		//	      "maxLength": 19,
		//	      "minLength": 19,
		//	      "pattern": "^p-([0-9a-f]{17})$",
		//	      "type": "string"
		//	    },
		//	    "MdnResponse": {
		//	      "description": "MDN Response setting for this AS2 connector configuration.",
		//	      "enum": [
		//	        "SYNC",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "MdnSigningAlgorithm": {
		//	      "description": "MDN Signing algorithm for this AS2 connector configuration.",
		//	      "enum": [
		//	        "SHA256",
		//	        "SHA384",
		//	        "SHA512",
		//	        "SHA1",
		//	        "NONE",
		//	        "DEFAULT"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "MessageSubject": {
		//	      "description": "The message subject for this AS2 connector configuration.",
		//	      "maxLength": 1024,
		//	      "minLength": 1,
		//	      "pattern": "",
		//	      "type": "string"
		//	    },
		//	    "PartnerProfileId": {
		//	      "description": "A unique identifier for the partner profile.",
		//	      "maxLength": 19,
		//	      "minLength": 19,
		//	      "pattern": "^p-([0-9a-f]{17})$",
		//	      "type": "string"
		//	    },
		//	    "SigningAlgorithm": {
		//	      "description": "Signing algorithm for this AS2 connector configuration.",
		//	      "enum": [
		//	        "SHA256",
		//	        "SHA384",
		//	        "SHA512",
		//	        "SHA1",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"as_2_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Compression
				"compression": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Compression setting for this AS2 connector configuration.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ZLIB",
							"DISABLED",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: EncryptionAlgorithm
				"encryption_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Encryption algorithm for this AS2 connector configuration.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"AES128_CBC",
							"AES192_CBC",
							"AES256_CBC",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LocalProfileId
				"local_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A unique identifier for the local profile.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(19, 19),
						stringvalidator.RegexMatches(regexp.MustCompile("^p-([0-9a-f]{17})$"), ""),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MdnResponse
				"mdn_response": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "MDN Response setting for this AS2 connector configuration.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"SYNC",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MdnSigningAlgorithm
				"mdn_signing_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "MDN Signing algorithm for this AS2 connector configuration.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"SHA256",
							"SHA384",
							"SHA512",
							"SHA1",
							"NONE",
							"DEFAULT",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MessageSubject
				"message_subject": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The message subject for this AS2 connector configuration.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 1024),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PartnerProfileId
				"partner_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A unique identifier for the partner profile.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(19, 19),
						stringvalidator.RegexMatches(regexp.MustCompile("^p-([0-9a-f]{17})$"), ""),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SigningAlgorithm
				"signing_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Signing algorithm for this AS2 connector configuration.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"SHA256",
							"SHA384",
							"SHA512",
							"SHA1",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration for an AS2 connector.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectorId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the connector.",
		//	  "maxLength": 19,
		//	  "minLength": 19,
		//	  "pattern": "^c-([0-9a-f]{17})$",
		//	  "type": "string"
		//	}
		"connector_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the connector.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoggingRole
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the logging role for the connector.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "arn:.*role/.*",
		//	  "type": "string"
		//	}
		"logging_role": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the logging role for the connector.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(20, 2048),
				stringvalidator.RegexMatches(regexp.MustCompile("arn:.*role/.*"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Creates a key-value pair for a specific resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The name assigned to the tag that you create.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Contains one or more values that you assigned to the key name you create.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name assigned to the tag that you create.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Contains one or more values that you assigned to the key name you create.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Url
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "URL for Connector",
		//	  "maxLength": 255,
		//	  "type": "string"
		//	}
		"url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "URL for Connector",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(255),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::Transfer::Connector",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Transfer::Connector").WithTerraformTypeName("awscc_transfer_connector")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_role":           "AccessRole",
		"arn":                   "Arn",
		"as_2_config":           "As2Config",
		"compression":           "Compression",
		"connector_id":          "ConnectorId",
		"encryption_algorithm":  "EncryptionAlgorithm",
		"key":                   "Key",
		"local_profile_id":      "LocalProfileId",
		"logging_role":          "LoggingRole",
		"mdn_response":          "MdnResponse",
		"mdn_signing_algorithm": "MdnSigningAlgorithm",
		"message_subject":       "MessageSubject",
		"partner_profile_id":    "PartnerProfileId",
		"signing_algorithm":     "SigningAlgorithm",
		"tags":                  "Tags",
		"url":                   "Url",
		"value":                 "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
