// Code generated by generators/resource/main.go; DO NOT EDIT.

package transfer

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_transfer_workflow", workflowResourceType)
}

// workflowResourceType returns the Terraform awscc_transfer_workflow resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Transfer::Workflow resource type.
func workflowResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "Specifies the unique Amazon Resource Name (ARN) for the workflow.",
			//   "maxLength": 1600,
			//   "minLength": 20,
			//   "pattern": "arn:.*",
			//   "type": "string"
			// }
			Description: "Specifies the unique Amazon Resource Name (ARN) for the workflow.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "A textual description for the workflow.",
			//   "maxLength": 256,
			//   "minLength": 0,
			//   "pattern": "^[\\w\\- ]*$",
			//   "type": "string"
			// }
			Description: "A textual description for the workflow.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 256),
				validate.StringMatch(regexp.MustCompile("^[\\w\\- ]*$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
				tfsdk.RequiresReplace(),
			},
		},
		"on_exception_steps": {
			// Property: OnExceptionSteps
			// CloudFormation resource type schema:
			// {
			//   "description": "Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.",
			//   "insertionOrder": true,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "The basic building block of a workflow.",
			//     "properties": {
			//       "CopyStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that performs a file copy.",
			//         "properties": {
			//           "DestinationFileLocation": {
			//             "additionalProperties": false,
			//             "description": "Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.",
			//             "properties": {
			//               "S3FileLocation": {
			//                 "additionalProperties": false,
			//                 "description": "Specifies the details for the S3 file being copied.",
			//                 "properties": {
			//                   "Bucket": {
			//                     "description": "Specifies the S3 bucket that contains the file being copied.",
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
			//                     "type": "string"
			//                   },
			//                   "Key": {
			//                     "description": "The name assigned to the file when it was created in S3. You use the object key to retrieve the object.",
			//                     "maxLength": 1024,
			//                     "minLength": 0,
			//                     "pattern": ".*",
			//                     "type": "string"
			//                   }
			//                 },
			//                 "type": "object"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "OverwriteExisting": {
			//             "description": "A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.",
			//             "enum": [
			//               "TRUE",
			//               "FALSE"
			//             ],
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "CustomStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that invokes a lambda function.",
			//         "properties": {
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           },
			//           "Target": {
			//             "description": "The ARN for the lambda function that is being called.",
			//             "maxLength": 170,
			//             "minLength": 0,
			//             "pattern": "arn:[a-z-]+:lambda:.*$",
			//             "type": "string"
			//           },
			//           "TimeoutSeconds": {
			//             "description": "Timeout, in seconds, for the step.",
			//             "maximum": 1800,
			//             "minimum": 1,
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "DeleteStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that deletes the file.",
			//         "properties": {
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "TagStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that creates one or more tags.",
			//         "properties": {
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           },
			//           "Tags": {
			//             "description": "Array that contains from 1 to 10 key/value pairs.",
			//             "insertionOrder": false,
			//             "items": {
			//               "additionalProperties": false,
			//               "description": "Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.",
			//               "properties": {
			//                 "Key": {
			//                   "description": "The name assigned to the tag that you create.",
			//                   "maxLength": 128,
			//                   "minLength": 1,
			//                   "type": "string"
			//                 },
			//                 "Value": {
			//                   "description": "The value that corresponds to the key.",
			//                   "maxLength": 256,
			//                   "minLength": 0,
			//                   "type": "string"
			//                 }
			//               },
			//               "required": [
			//                 "Key",
			//                 "Value"
			//               ],
			//               "type": "object"
			//             },
			//             "maxItems": 10,
			//             "type": "array",
			//             "uniqueItems": true
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "Type": {
			//         "enum": [
			//           "COPY",
			//           "CUSTOM",
			//           "DELETE",
			//           "TAG"
			//         ],
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 8,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"copy_step_details": {
						// Property: CopyStepDetails
						Description: "Details for a step that performs a file copy.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"destination_file_location": {
									// Property: DestinationFileLocation
									Description: "Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"s3_file_location": {
												// Property: S3FileLocation
												Description: "Specifies the details for the S3 file being copied.",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket": {
															// Property: Bucket
															Description: "Specifies the S3 bucket that contains the file being copied.",
															Type:        types.StringType,
															Optional:    true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
																validate.StringMatch(regexp.MustCompile("^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$"), ""),
															},
														},
														"key": {
															// Property: Key
															Description: "The name assigned to the file when it was created in S3. You use the object key to retrieve the object.",
															Type:        types.StringType,
															Optional:    true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 1024),
																validate.StringMatch(regexp.MustCompile(".*"), ""),
															},
														},
													},
												),
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"overwrite_existing": {
									// Property: OverwriteExisting
									Description: "A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"TRUE",
											"FALSE",
										}),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
							},
						),
						Optional: true,
					},
					"custom_step_details": {
						// Property: CustomStepDetails
						Description: "Details for a step that invokes a lambda function.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
								"target": {
									// Property: Target
									Description: "The ARN for the lambda function that is being called.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 170),
										validate.StringMatch(regexp.MustCompile("arn:[a-z-]+:lambda:.*$"), ""),
									},
								},
								"timeout_seconds": {
									// Property: TimeoutSeconds
									Description: "Timeout, in seconds, for the step.",
									Type:        types.Int64Type,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(1, 1800),
									},
								},
							},
						),
						Optional: true,
					},
					"delete_step_details": {
						// Property: DeleteStepDetails
						Description: "Details for a step that deletes the file.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
							},
						),
						Optional: true,
					},
					"tag_step_details": {
						// Property: TagStepDetails
						Description: "Details for a step that creates one or more tags.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
								"tags": {
									// Property: Tags
									Description: "Array that contains from 1 to 10 key/value pairs.",
									Attributes: tfsdk.SetNestedAttributes(
										map[string]tfsdk.Attribute{
											"key": {
												// Property: Key
												Description: "The name assigned to the tag that you create.",
												Type:        types.StringType,
												Required:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 128),
												},
											},
											"value": {
												// Property: Value
												Description: "The value that corresponds to the key.",
												Type:        types.StringType,
												Required:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 256),
												},
											},
										},
										tfsdk.SetNestedAttributesOptions{},
									),
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.ArrayLenAtMost(10),
									},
								},
							},
						),
						Optional: true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"COPY",
								"CUSTOM",
								"DELETE",
								"TAG",
							}),
						},
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenAtMost(8),
				validate.UniqueItems(),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
				tfsdk.RequiresReplace(),
			},
		},
		"steps": {
			// Property: Steps
			// CloudFormation resource type schema:
			// {
			//   "description": "Specifies the details for the steps that are in the specified workflow.",
			//   "insertionOrder": true,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "The basic building block of a workflow.",
			//     "properties": {
			//       "CopyStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that performs a file copy.",
			//         "properties": {
			//           "DestinationFileLocation": {
			//             "additionalProperties": false,
			//             "description": "Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.",
			//             "properties": {
			//               "S3FileLocation": {
			//                 "additionalProperties": false,
			//                 "description": "Specifies the details for the S3 file being copied.",
			//                 "properties": {
			//                   "Bucket": {
			//                     "description": "Specifies the S3 bucket that contains the file being copied.",
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
			//                     "type": "string"
			//                   },
			//                   "Key": {
			//                     "description": "The name assigned to the file when it was created in S3. You use the object key to retrieve the object.",
			//                     "maxLength": 1024,
			//                     "minLength": 0,
			//                     "pattern": ".*",
			//                     "type": "string"
			//                   }
			//                 },
			//                 "type": "object"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "OverwriteExisting": {
			//             "description": "A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.",
			//             "enum": [
			//               "TRUE",
			//               "FALSE"
			//             ],
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "CustomStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that invokes a lambda function.",
			//         "properties": {
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           },
			//           "Target": {
			//             "description": "The ARN for the lambda function that is being called.",
			//             "maxLength": 170,
			//             "minLength": 0,
			//             "pattern": "arn:[a-z-]+:lambda:.*$",
			//             "type": "string"
			//           },
			//           "TimeoutSeconds": {
			//             "description": "Timeout, in seconds, for the step.",
			//             "maximum": 1800,
			//             "minimum": 1,
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "DeleteStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that deletes the file.",
			//         "properties": {
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "TagStepDetails": {
			//         "additionalProperties": false,
			//         "description": "Details for a step that creates one or more tags.",
			//         "properties": {
			//           "Name": {
			//             "description": "The name of the step, used as an identifier.",
			//             "maxLength": 30,
			//             "minLength": 0,
			//             "pattern": "^[\\w-]*$",
			//             "type": "string"
			//           },
			//           "SourceFileLocation": {
			//             "description": "Specifies which file to use as input to the workflow step.",
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
			//             "type": "string"
			//           },
			//           "Tags": {
			//             "description": "Array that contains from 1 to 10 key/value pairs.",
			//             "insertionOrder": false,
			//             "items": {
			//               "additionalProperties": false,
			//               "description": "Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.",
			//               "properties": {
			//                 "Key": {
			//                   "description": "The name assigned to the tag that you create.",
			//                   "maxLength": 128,
			//                   "minLength": 1,
			//                   "type": "string"
			//                 },
			//                 "Value": {
			//                   "description": "The value that corresponds to the key.",
			//                   "maxLength": 256,
			//                   "minLength": 0,
			//                   "type": "string"
			//                 }
			//               },
			//               "required": [
			//                 "Key",
			//                 "Value"
			//               ],
			//               "type": "object"
			//             },
			//             "maxItems": 10,
			//             "type": "array",
			//             "uniqueItems": true
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "Type": {
			//         "enum": [
			//           "COPY",
			//           "CUSTOM",
			//           "DELETE",
			//           "TAG"
			//         ],
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 8,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "Specifies the details for the steps that are in the specified workflow.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"copy_step_details": {
						// Property: CopyStepDetails
						Description: "Details for a step that performs a file copy.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"destination_file_location": {
									// Property: DestinationFileLocation
									Description: "Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"s3_file_location": {
												// Property: S3FileLocation
												Description: "Specifies the details for the S3 file being copied.",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket": {
															// Property: Bucket
															Description: "Specifies the S3 bucket that contains the file being copied.",
															Type:        types.StringType,
															Optional:    true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
																validate.StringMatch(regexp.MustCompile("^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$"), ""),
															},
														},
														"key": {
															// Property: Key
															Description: "The name assigned to the file when it was created in S3. You use the object key to retrieve the object.",
															Type:        types.StringType,
															Optional:    true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 1024),
																validate.StringMatch(regexp.MustCompile(".*"), ""),
															},
														},
													},
												),
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"overwrite_existing": {
									// Property: OverwriteExisting
									Description: "A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"TRUE",
											"FALSE",
										}),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
							},
						),
						Optional: true,
					},
					"custom_step_details": {
						// Property: CustomStepDetails
						Description: "Details for a step that invokes a lambda function.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
								"target": {
									// Property: Target
									Description: "The ARN for the lambda function that is being called.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 170),
										validate.StringMatch(regexp.MustCompile("arn:[a-z-]+:lambda:.*$"), ""),
									},
								},
								"timeout_seconds": {
									// Property: TimeoutSeconds
									Description: "Timeout, in seconds, for the step.",
									Type:        types.Int64Type,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(1, 1800),
									},
								},
							},
						),
						Optional: true,
					},
					"delete_step_details": {
						// Property: DeleteStepDetails
						Description: "Details for a step that deletes the file.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
							},
						),
						Optional: true,
					},
					"tag_step_details": {
						// Property: TagStepDetails
						Description: "Details for a step that creates one or more tags.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"name": {
									// Property: Name
									Description: "The name of the step, used as an identifier.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 30),
										validate.StringMatch(regexp.MustCompile("^[\\w-]*$"), ""),
									},
								},
								"source_file_location": {
									// Property: SourceFileLocation
									Description: "Specifies which file to use as input to the workflow step.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
										validate.StringMatch(regexp.MustCompile("^\\$\\{(\\w+.)+\\w+\\}$"), ""),
									},
								},
								"tags": {
									// Property: Tags
									Description: "Array that contains from 1 to 10 key/value pairs.",
									Attributes: tfsdk.SetNestedAttributes(
										map[string]tfsdk.Attribute{
											"key": {
												// Property: Key
												Description: "The name assigned to the tag that you create.",
												Type:        types.StringType,
												Required:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 128),
												},
											},
											"value": {
												// Property: Value
												Description: "The value that corresponds to the key.",
												Type:        types.StringType,
												Required:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 256),
												},
											},
										},
										tfsdk.SetNestedAttributesOptions{},
									),
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.ArrayLenAtMost(10),
									},
								},
							},
						),
						Optional: true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"COPY",
								"CUSTOM",
								"DELETE",
								"TAG",
							}),
						},
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenAtMost(8),
				validate.UniqueItems(),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "Creates a key-value pair for a specific resource.",
			//     "properties": {
			//       "Key": {
			//         "description": "The name assigned to the tag that you create.",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "Contains one or more values that you assigned to the key name you create.",
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The name assigned to the tag that you create.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Description: "Contains one or more values that you assigned to the key name you create.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
				},
				tfsdk.SetNestedAttributesOptions{},
			),
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenAtMost(50),
			},
		},
		"workflow_id": {
			// Property: WorkflowId
			// CloudFormation resource type schema:
			// {
			//   "description": "A unique identifier for the workflow.",
			//   "maxLength": 19,
			//   "minLength": 19,
			//   "pattern": "^w-([a-z0-9]{17})$",
			//   "type": "string"
			// }
			Description: "A unique identifier for the workflow.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::Transfer::Workflow",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Transfer::Workflow").WithTerraformTypeName("awscc_transfer_workflow")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                       "Arn",
		"bucket":                    "Bucket",
		"copy_step_details":         "CopyStepDetails",
		"custom_step_details":       "CustomStepDetails",
		"delete_step_details":       "DeleteStepDetails",
		"description":               "Description",
		"destination_file_location": "DestinationFileLocation",
		"key":                       "Key",
		"name":                      "Name",
		"on_exception_steps":        "OnExceptionSteps",
		"overwrite_existing":        "OverwriteExisting",
		"s3_file_location":          "S3FileLocation",
		"source_file_location":      "SourceFileLocation",
		"steps":                     "Steps",
		"tag_step_details":          "TagStepDetails",
		"tags":                      "Tags",
		"target":                    "Target",
		"timeout_seconds":           "TimeoutSeconds",
		"type":                      "Type",
		"value":                     "Value",
		"workflow_id":               "WorkflowId",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
