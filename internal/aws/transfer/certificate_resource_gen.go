// Code generated by generators/resource/main.go; DO NOT EDIT.

package transfer

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_transfer_certificate", certificateResource)
}

// certificateResource returns the Terraform awscc_transfer_certificate resource.
// This Terraform resource corresponds to the CloudFormation AWS::Transfer::Certificate resource.
func certificateResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"active_date": {
			// Property: ActiveDate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the active date for the certificate.",
			//	  "type": "string"
			//	}
			Description: "Specifies the active date for the certificate.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the unique Amazon Resource Name (ARN) for the agreement.",
			//	  "maxLength": 1600,
			//	  "minLength": 20,
			//	  "pattern": "arn:.*",
			//	  "type": "string"
			//	}
			Description: "Specifies the unique Amazon Resource Name (ARN) for the agreement.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"certificate": {
			// Property: Certificate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the certificate body to be imported.",
			//	  "maxLength": 16384,
			//	  "minLength": 1,
			//	  "pattern": "^[\t\n\r -ÿ]*",
			//	  "type": "string"
			//	}
			Description: "Specifies the certificate body to be imported.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 16384),
				validate.StringMatch(regexp.MustCompile("^[\t\n\r -ÿ]*"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"certificate_chain": {
			// Property: CertificateChain
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the certificate chain to be imported.",
			//	  "maxLength": 2097152,
			//	  "minLength": 1,
			//	  "pattern": "^[\t\n\r -ÿ]*",
			//	  "type": "string"
			//	}
			Description: "Specifies the certificate chain to be imported.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 2097152),
				validate.StringMatch(regexp.MustCompile("^[\t\n\r -ÿ]*"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"certificate_id": {
			// Property: CertificateId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A unique identifier for the certificate.",
			//	  "maxLength": 22,
			//	  "minLength": 22,
			//	  "pattern": "^cert-([0-9a-f]{17})$",
			//	  "type": "string"
			//	}
			Description: "A unique identifier for the certificate.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A textual description for the certificate.",
			//	  "maxLength": 200,
			//	  "minLength": 1,
			//	  "pattern": "^[\\w\\- ]*$",
			//	  "type": "string"
			//	}
			Description: "A textual description for the certificate.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 200),
				validate.StringMatch(regexp.MustCompile("^[\\w\\- ]*$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"inactive_date": {
			// Property: InactiveDate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the inactive date for the certificate.",
			//	  "type": "string"
			//	}
			Description: "Specifies the inactive date for the certificate.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"not_after_date": {
			// Property: NotAfterDate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the not after date for the certificate.",
			//	  "type": "string"
			//	}
			Description: "Specifies the not after date for the certificate.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"not_before_date": {
			// Property: NotBeforeDate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the not before date for the certificate.",
			//	  "type": "string"
			//	}
			Description: "Specifies the not before date for the certificate.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"private_key": {
			// Property: PrivateKey
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the private key for the certificate.",
			//	  "maxLength": 16384,
			//	  "minLength": 1,
			//	  "pattern": "^[\t\n\r -ÿ]*",
			//	  "type": "string"
			//	}
			Description: "Specifies the private key for the certificate.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 16384),
				validate.StringMatch(regexp.MustCompile("^[\t\n\r -ÿ]*"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
			// PrivateKey is a write-only property.
		},
		"serial": {
			// Property: Serial
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies Certificate's serial.",
			//	  "maxLength": 48,
			//	  "minLength": 0,
			//	  "pattern": "",
			//	  "type": "string"
			//	}
			Description: "Specifies Certificate's serial.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A status description for the certificate.",
			//	  "enum": [
			//	    "ACTIVE",
			//	    "PENDING",
			//	    "INACTIVE"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "A status description for the certificate.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "description": "A key-value pair to associate with a resource.",
			//	    "properties": {
			//	      "Key": {
			//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//	        "maxLength": 128,
			//	        "minLength": 1,
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//	        "maxLength": 256,
			//	        "minLength": 0,
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "maxItems": 50,
			//	  "type": "array",
			//	  "uniqueItems": true
			//	}
			Description: "Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenAtMost(50),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"type": {
			// Property: Type
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Describing the type of certificate. With or without a private key.",
			//	  "enum": [
			//	    "CERTIFICATE",
			//	    "CERTIFICATE_WITH_PRIVATE_KEY"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "Describing the type of certificate. With or without a private key.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"usage": {
			// Property: Usage
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the usage type for the certificate.",
			//	  "enum": [
			//	    "SIGNING",
			//	    "ENCRYPTION"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "Specifies the usage type for the certificate.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"SIGNING",
					"ENCRYPTION",
				}),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::Transfer::Certificate",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Transfer::Certificate").WithTerraformTypeName("awscc_transfer_certificate")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"active_date":       "ActiveDate",
		"arn":               "Arn",
		"certificate":       "Certificate",
		"certificate_chain": "CertificateChain",
		"certificate_id":    "CertificateId",
		"description":       "Description",
		"inactive_date":     "InactiveDate",
		"key":               "Key",
		"not_after_date":    "NotAfterDate",
		"not_before_date":   "NotBeforeDate",
		"private_key":       "PrivateKey",
		"serial":            "Serial",
		"status":            "Status",
		"tags":              "Tags",
		"type":              "Type",
		"usage":             "Usage",
		"value":             "Value",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/PrivateKey",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
