// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package acmpca

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_acmpca_certificate", certificateDataSource)
}

// certificateDataSource returns the Terraform awscc_acmpca_certificate data source.
// This Terraform data source corresponds to the CloudFormation AWS::ACMPCA::Certificate resource.
func certificateDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiPassthrough
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "These are fields to be overridden in a certificate at the time of issuance. These requires an API_Passthrough template be used or they will be ignored.",
		//	  "properties": {
		//	    "Extensions": {
		//	      "additionalProperties": false,
		//	      "description": "Structure that contains X.500 extensions for a Certificate.",
		//	      "properties": {
		//	        "CertificatePolicies": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Structure that contains X.509 Policy information.",
		//	            "properties": {
		//	              "CertPolicyId": {
		//	                "description": "String that contains X.509 ObjectIdentifier information.",
		//	                "type": "string"
		//	              },
		//	              "PolicyQualifiers": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Structure that contains X.509 Policy qualifier information.",
		//	                  "properties": {
		//	                    "PolicyQualifierId": {
		//	                      "type": "string"
		//	                    },
		//	                    "Qualifier": {
		//	                      "additionalProperties": false,
		//	                      "description": "Structure that contains a X.509 policy qualifier.",
		//	                      "properties": {
		//	                        "CpsUri": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "CpsUri"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "PolicyQualifierId",
		//	                    "Qualifier"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              }
		//	            },
		//	            "required": [
		//	              "CertPolicyId"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "CustomExtensions": {
		//	          "description": "Array of X.509 extensions for a certificate.",
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Structure that contains X.509 extension information for a certificate.",
		//	            "properties": {
		//	              "Critical": {
		//	                "type": "boolean"
		//	              },
		//	              "ObjectIdentifier": {
		//	                "description": "String that contains X.509 ObjectIdentifier information.",
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ObjectIdentifier",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "ExtendedKeyUsage": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Structure that contains X.509 ExtendedKeyUsage information.",
		//	            "properties": {
		//	              "ExtendedKeyUsageObjectIdentifier": {
		//	                "description": "String that contains X.509 ObjectIdentifier information.",
		//	                "type": "string"
		//	              },
		//	              "ExtendedKeyUsageType": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "KeyUsage": {
		//	          "additionalProperties": false,
		//	          "description": "Structure that contains X.509 KeyUsage information.",
		//	          "properties": {
		//	            "CRLSign": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "DataEncipherment": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "DecipherOnly": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "DigitalSignature": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "EncipherOnly": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "KeyAgreement": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "KeyCertSign": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "KeyEncipherment": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            },
		//	            "NonRepudiation": {
		//	              "default": false,
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SubjectAlternativeNames": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Structure that contains X.509 GeneralName information. Assign one and ONLY one field.",
		//	            "properties": {
		//	              "DirectoryName": {
		//	                "additionalProperties": false,
		//	                "description": "Structure that contains X.500 distinguished name information.",
		//	                "properties": {
		//	                  "CommonName": {
		//	                    "type": "string"
		//	                  },
		//	                  "Country": {
		//	                    "type": "string"
		//	                  },
		//	                  "CustomAttributes": {
		//	                    "description": "Array of X.500 attribute type and value. CustomAttributes cannot be used along with pre-defined attributes.",
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Structure that contains X.500 attribute type and value.",
		//	                      "properties": {
		//	                        "ObjectIdentifier": {
		//	                          "description": "String that contains X.509 ObjectIdentifier information.",
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "ObjectIdentifier",
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "DistinguishedNameQualifier": {
		//	                    "type": "string"
		//	                  },
		//	                  "GenerationQualifier": {
		//	                    "type": "string"
		//	                  },
		//	                  "GivenName": {
		//	                    "type": "string"
		//	                  },
		//	                  "Initials": {
		//	                    "type": "string"
		//	                  },
		//	                  "Locality": {
		//	                    "type": "string"
		//	                  },
		//	                  "Organization": {
		//	                    "type": "string"
		//	                  },
		//	                  "OrganizationalUnit": {
		//	                    "type": "string"
		//	                  },
		//	                  "Pseudonym": {
		//	                    "type": "string"
		//	                  },
		//	                  "SerialNumber": {
		//	                    "type": "string"
		//	                  },
		//	                  "State": {
		//	                    "type": "string"
		//	                  },
		//	                  "Surname": {
		//	                    "type": "string"
		//	                  },
		//	                  "Title": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "DnsName": {
		//	                "description": "String that contains X.509 DnsName information.",
		//	                "type": "string"
		//	              },
		//	              "EdiPartyName": {
		//	                "additionalProperties": false,
		//	                "description": "Structure that contains X.509 EdiPartyName information.",
		//	                "properties": {
		//	                  "NameAssigner": {
		//	                    "type": "string"
		//	                  },
		//	                  "PartyName": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "PartyName",
		//	                  "NameAssigner"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "IpAddress": {
		//	                "description": "String that contains X.509 IpAddress information.",
		//	                "type": "string"
		//	              },
		//	              "OtherName": {
		//	                "additionalProperties": false,
		//	                "description": "Structure that contains X.509 OtherName information.",
		//	                "properties": {
		//	                  "TypeId": {
		//	                    "description": "String that contains X.509 ObjectIdentifier information.",
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "TypeId",
		//	                  "Value"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "RegisteredId": {
		//	                "description": "String that contains X.509 ObjectIdentifier information.",
		//	                "type": "string"
		//	              },
		//	              "Rfc822Name": {
		//	                "description": "String that contains X.509 Rfc822Name information.",
		//	                "type": "string"
		//	              },
		//	              "UniformResourceIdentifier": {
		//	                "description": "String that contains X.509 UniformResourceIdentifier information.",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Subject": {
		//	      "additionalProperties": false,
		//	      "description": "Structure that contains X.500 distinguished name information.",
		//	      "properties": {
		//	        "CommonName": {
		//	          "type": "string"
		//	        },
		//	        "Country": {
		//	          "type": "string"
		//	        },
		//	        "CustomAttributes": {
		//	          "description": "Array of X.500 attribute type and value. CustomAttributes cannot be used along with pre-defined attributes.",
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Structure that contains X.500 attribute type and value.",
		//	            "properties": {
		//	              "ObjectIdentifier": {
		//	                "description": "String that contains X.509 ObjectIdentifier information.",
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ObjectIdentifier",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "DistinguishedNameQualifier": {
		//	          "type": "string"
		//	        },
		//	        "GenerationQualifier": {
		//	          "type": "string"
		//	        },
		//	        "GivenName": {
		//	          "type": "string"
		//	        },
		//	        "Initials": {
		//	          "type": "string"
		//	        },
		//	        "Locality": {
		//	          "type": "string"
		//	        },
		//	        "Organization": {
		//	          "type": "string"
		//	        },
		//	        "OrganizationalUnit": {
		//	          "type": "string"
		//	        },
		//	        "Pseudonym": {
		//	          "type": "string"
		//	        },
		//	        "SerialNumber": {
		//	          "type": "string"
		//	        },
		//	        "State": {
		//	          "type": "string"
		//	        },
		//	        "Surname": {
		//	          "type": "string"
		//	        },
		//	        "Title": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"api_passthrough": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Extensions
				"extensions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CertificatePolicies
						"certificate_policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: CertPolicyId
									"cert_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 ObjectIdentifier information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: PolicyQualifiers
									"policy_qualifiers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: PolicyQualifierId
												"policy_qualifier_id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Qualifier
												"qualifier": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: CpsUri
														"cps_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Structure that contains a X.509 policy qualifier.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CustomExtensions
						"custom_extensions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Critical
									"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ObjectIdentifier
									"object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 ObjectIdentifier information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "Array of X.509 extensions for a certificate.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ExtendedKeyUsage
						"extended_key_usage": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ExtendedKeyUsageObjectIdentifier
									"extended_key_usage_object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 ObjectIdentifier information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ExtendedKeyUsageType
									"extended_key_usage_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: KeyUsage
						"key_usage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CRLSign
								"crl_sign": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DataEncipherment
								"data_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DecipherOnly
								"decipher_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DigitalSignature
								"digital_signature": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EncipherOnly
								"encipher_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyAgreement
								"key_agreement": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyCertSign
								"key_cert_sign": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyEncipherment
								"key_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NonRepudiation
								"non_repudiation": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Structure that contains X.509 KeyUsage information.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SubjectAlternativeNames
						"subject_alternative_names": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DirectoryName
									"directory_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: CommonName
											"common_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Country
											"country": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: CustomAttributes
											"custom_attributes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: ObjectIdentifier
														"object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "String that contains X.509 ObjectIdentifier information.",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "Array of X.500 attribute type and value. CustomAttributes cannot be used along with pre-defined attributes.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: DistinguishedNameQualifier
											"distinguished_name_qualifier": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: GenerationQualifier
											"generation_qualifier": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: GivenName
											"given_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Initials
											"initials": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Locality
											"locality": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Organization
											"organization": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: OrganizationalUnit
											"organizational_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Pseudonym
											"pseudonym": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: SerialNumber
											"serial_number": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: State
											"state": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Surname
											"surname": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Title
											"title": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Structure that contains X.500 distinguished name information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: DnsName
									"dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 DnsName information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: EdiPartyName
									"edi_party_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: NameAssigner
											"name_assigner": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: PartyName
											"party_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Structure that contains X.509 EdiPartyName information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: IpAddress
									"ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 IpAddress information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: OtherName
									"other_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: TypeId
											"type_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "String that contains X.509 ObjectIdentifier information.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Structure that contains X.509 OtherName information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: RegisteredId
									"registered_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 ObjectIdentifier information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Rfc822Name
									"rfc_822_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 Rfc822Name information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: UniformResourceIdentifier
									"uniform_resource_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 UniformResourceIdentifier information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Structure that contains X.500 extensions for a Certificate.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Subject
				"subject": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CommonName
						"common_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Country
						"country": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CustomAttributes
						"custom_attributes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ObjectIdentifier
									"object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "String that contains X.509 ObjectIdentifier information.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "Array of X.500 attribute type and value. CustomAttributes cannot be used along with pre-defined attributes.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DistinguishedNameQualifier
						"distinguished_name_qualifier": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GenerationQualifier
						"generation_qualifier": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GivenName
						"given_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Initials
						"initials": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Locality
						"locality": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Organization
						"organization": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OrganizationalUnit
						"organizational_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Pseudonym
						"pseudonym": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SerialNumber
						"serial_number": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: State
						"state": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Surname
						"surname": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Title
						"title": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Structure that contains X.500 distinguished name information.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "These are fields to be overridden in a certificate at the time of issuance. These requires an API_Passthrough template be used or they will be ignored.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the issued certificate.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the issued certificate.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Certificate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The issued certificate in base 64 PEM-encoded format.",
		//	  "type": "string"
		//	}
		"certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The issued certificate in base 64 PEM-encoded format.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateAuthorityArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for the private CA to issue the certificate.",
		//	  "type": "string"
		//	}
		"certificate_authority_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for the private CA to issue the certificate.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateSigningRequest
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The certificate signing request (CSR) for the Certificate.",
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"certificate_signing_request": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The certificate signing request (CSR) for the Certificate.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SigningAlgorithm
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the algorithm that will be used to sign the Certificate.",
		//	  "type": "string"
		//	}
		"signing_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the algorithm that will be used to sign the Certificate.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TemplateArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, ACM Private CA defaults to the EndEntityCertificate/V1 template.",
		//	  "type": "string"
		//	}
		"template_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, ACM Private CA defaults to the EndEntityCertificate/V1 template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Validity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The time before which the Certificate will be valid.",
		//	  "properties": {
		//	    "Type": {
		//	      "type": "string"
		//	    },
		//	    "Value": {
		//	      "type": "number"
		//	    }
		//	  },
		//	  "required": [
		//	    "Value",
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"validity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Value
				"value": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The time before which the Certificate will be valid.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ValidityNotBefore
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The time after which the Certificate will be valid.",
		//	  "properties": {
		//	    "Type": {
		//	      "type": "string"
		//	    },
		//	    "Value": {
		//	      "type": "number"
		//	    }
		//	  },
		//	  "required": [
		//	    "Value",
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"validity_not_before": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Value
				"value": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The time after which the Certificate will be valid.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ACMPCA::Certificate",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ACMPCA::Certificate").WithTerraformTypeName("awscc_acmpca_certificate")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_passthrough":                      "ApiPassthrough",
		"arn":                                  "Arn",
		"cert_policy_id":                       "CertPolicyId",
		"certificate":                          "Certificate",
		"certificate_authority_arn":            "CertificateAuthorityArn",
		"certificate_policies":                 "CertificatePolicies",
		"certificate_signing_request":          "CertificateSigningRequest",
		"common_name":                          "CommonName",
		"country":                              "Country",
		"cps_uri":                              "CpsUri",
		"critical":                             "Critical",
		"crl_sign":                             "CRLSign",
		"custom_attributes":                    "CustomAttributes",
		"custom_extensions":                    "CustomExtensions",
		"data_encipherment":                    "DataEncipherment",
		"decipher_only":                        "DecipherOnly",
		"digital_signature":                    "DigitalSignature",
		"directory_name":                       "DirectoryName",
		"distinguished_name_qualifier":         "DistinguishedNameQualifier",
		"dns_name":                             "DnsName",
		"edi_party_name":                       "EdiPartyName",
		"encipher_only":                        "EncipherOnly",
		"extended_key_usage":                   "ExtendedKeyUsage",
		"extended_key_usage_object_identifier": "ExtendedKeyUsageObjectIdentifier",
		"extended_key_usage_type":              "ExtendedKeyUsageType",
		"extensions":                           "Extensions",
		"generation_qualifier":                 "GenerationQualifier",
		"given_name":                           "GivenName",
		"initials":                             "Initials",
		"ip_address":                           "IpAddress",
		"key_agreement":                        "KeyAgreement",
		"key_cert_sign":                        "KeyCertSign",
		"key_encipherment":                     "KeyEncipherment",
		"key_usage":                            "KeyUsage",
		"locality":                             "Locality",
		"name_assigner":                        "NameAssigner",
		"non_repudiation":                      "NonRepudiation",
		"object_identifier":                    "ObjectIdentifier",
		"organization":                         "Organization",
		"organizational_unit":                  "OrganizationalUnit",
		"other_name":                           "OtherName",
		"party_name":                           "PartyName",
		"policy_qualifier_id":                  "PolicyQualifierId",
		"policy_qualifiers":                    "PolicyQualifiers",
		"pseudonym":                            "Pseudonym",
		"qualifier":                            "Qualifier",
		"registered_id":                        "RegisteredId",
		"rfc_822_name":                         "Rfc822Name",
		"serial_number":                        "SerialNumber",
		"signing_algorithm":                    "SigningAlgorithm",
		"state":                                "State",
		"subject":                              "Subject",
		"subject_alternative_names":            "SubjectAlternativeNames",
		"surname":                              "Surname",
		"template_arn":                         "TemplateArn",
		"title":                                "Title",
		"type":                                 "Type",
		"type_id":                              "TypeId",
		"uniform_resource_identifier":          "UniformResourceIdentifier",
		"validity":                             "Validity",
		"validity_not_before":                  "ValidityNotBefore",
		"value":                                "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
