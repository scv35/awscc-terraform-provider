// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package networkmanager

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_networkmanager_device", deviceDataSource)
}

// deviceDataSource returns the Terraform awscc_networkmanager_device data source.
// This Terraform data source corresponds to the CloudFormation AWS::NetworkManager::Device resource.
func deviceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the device.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the device.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeviceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the device.",
		//	  "type": "string"
		//	}
		"device_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the device.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeviceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the device.",
		//	  "type": "string"
		//	}
		"device_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the device.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GlobalNetworkId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the global network.",
		//	  "type": "string"
		//	}
		"global_network_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the global network.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The site location.",
		//	  "properties": {
		//	    "Address": {
		//	      "description": "The physical address.",
		//	      "type": "string"
		//	    },
		//	    "Latitude": {
		//	      "description": "The latitude.",
		//	      "type": "string"
		//	    },
		//	    "Longitude": {
		//	      "description": "The longitude.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Address
				"address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The physical address.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Latitude
				"latitude": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The latitude.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Longitude
				"longitude": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The longitude.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The site location.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Model
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The device model",
		//	  "type": "string"
		//	}
		"model": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The device model",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SerialNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The device serial number.",
		//	  "type": "string"
		//	}
		"serial_number": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The device serial number.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SiteId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The site ID.",
		//	  "type": "string"
		//	}
		"site_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The site ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags for the device.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a device resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags for the device.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The device type.",
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The device type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Vendor
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The device vendor.",
		//	  "type": "string"
		//	}
		"vendor": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The device vendor.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::NetworkManager::Device",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::NetworkManager::Device").WithTerraformTypeName("awscc_networkmanager_device")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"address":           "Address",
		"description":       "Description",
		"device_arn":        "DeviceArn",
		"device_id":         "DeviceId",
		"global_network_id": "GlobalNetworkId",
		"key":               "Key",
		"latitude":          "Latitude",
		"location":          "Location",
		"longitude":         "Longitude",
		"model":             "Model",
		"serial_number":     "SerialNumber",
		"site_id":           "SiteId",
		"tags":              "Tags",
		"type":              "Type",
		"value":             "Value",
		"vendor":            "Vendor",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
