// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package networkmanager

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_networkmanager_connect_peer", connectPeerDataSourceType)
}

// connectPeerDataSourceType returns the Terraform awscc_networkmanager_connect_peer data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::NetworkManager::ConnectPeer resource type.
func connectPeerDataSourceType(ctx context.Context) (provider.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"bgp_options": {
			// Property: BgpOptions
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Bgp options for connect peer.",
			//   "properties": {
			//     "PeerAsn": {
			//       "type": "number"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Bgp options for connect peer.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"peer_asn": {
						// Property: PeerAsn
						Type:     types.Float64Type,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"configuration": {
			// Property: Configuration
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Configuration of the connect peer.",
			//   "properties": {
			//     "BgpConfigurations": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "Bgp configuration for connect peer",
			//         "properties": {
			//           "CoreNetworkAddress": {
			//             "type": "string"
			//           },
			//           "CoreNetworkAsn": {
			//             "type": "number"
			//           },
			//           "PeerAddress": {
			//             "type": "string"
			//           },
			//           "PeerAsn": {
			//             "type": "number"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "type": "array"
			//     },
			//     "CoreNetworkAddress": {
			//       "type": "string"
			//     },
			//     "InsideCidrBlocks": {
			//       "insertionOrder": false,
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "PeerAddress": {
			//       "type": "string"
			//     },
			//     "Protocol": {
			//       "description": "Tunnel protocol type (Only support GRE for now)",
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Configuration of the connect peer.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"bgp_configurations": {
						// Property: BgpConfigurations
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"core_network_address": {
									// Property: CoreNetworkAddress
									Type:     types.StringType,
									Computed: true,
								},
								"core_network_asn": {
									// Property: CoreNetworkAsn
									Type:     types.Float64Type,
									Computed: true,
								},
								"peer_address": {
									// Property: PeerAddress
									Type:     types.StringType,
									Computed: true,
								},
								"peer_asn": {
									// Property: PeerAsn
									Type:     types.Float64Type,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"core_network_address": {
						// Property: CoreNetworkAddress
						Type:     types.StringType,
						Computed: true,
					},
					"inside_cidr_blocks": {
						// Property: InsideCidrBlocks
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"peer_address": {
						// Property: PeerAddress
						Type:     types.StringType,
						Computed: true,
					},
					"protocol": {
						// Property: Protocol
						Description: "Tunnel protocol type (Only support GRE for now)",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"connect_attachment_id": {
			// Property: ConnectAttachmentId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the attachment to connect.",
			//   "type": "string"
			// }
			Description: "The ID of the attachment to connect.",
			Type:        types.StringType,
			Computed:    true,
		},
		"connect_peer_id": {
			// Property: ConnectPeerId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the Connect peer.",
			//   "type": "string"
			// }
			Description: "The ID of the Connect peer.",
			Type:        types.StringType,
			Computed:    true,
		},
		"core_network_address": {
			// Property: CoreNetworkAddress
			// CloudFormation resource type schema:
			// {
			//   "description": "The IP address of a core network.",
			//   "type": "string"
			// }
			Description: "The IP address of a core network.",
			Type:        types.StringType,
			Computed:    true,
		},
		"core_network_id": {
			// Property: CoreNetworkId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the core network.",
			//   "type": "string"
			// }
			Description: "The ID of the core network.",
			Type:        types.StringType,
			Computed:    true,
		},
		"created_at": {
			// Property: CreatedAt
			// CloudFormation resource type schema:
			// {
			//   "description": "Connect peer creation time.",
			//   "type": "string"
			// }
			Description: "Connect peer creation time.",
			Type:        types.StringType,
			Computed:    true,
		},
		"edge_location": {
			// Property: EdgeLocation
			// CloudFormation resource type schema:
			// {
			//   "description": "The Connect peer Regions where edges are located.",
			//   "type": "string"
			// }
			Description: "The Connect peer Regions where edges are located.",
			Type:        types.StringType,
			Computed:    true,
		},
		"inside_cidr_blocks": {
			// Property: InsideCidrBlocks
			// CloudFormation resource type schema:
			// {
			//   "description": "The inside IP addresses used for a Connect peer configuration.",
			//   "insertionOrder": false,
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Description: "The inside IP addresses used for a Connect peer configuration.",
			Type:        types.ListType{ElemType: types.StringType},
			Computed:    true,
		},
		"peer_address": {
			// Property: PeerAddress
			// CloudFormation resource type schema:
			// {
			//   "description": "The IP address of the Connect peer.",
			//   "type": "string"
			// }
			Description: "The IP address of the Connect peer.",
			Type:        types.StringType,
			Computed:    true,
		},
		"state": {
			// Property: State
			// CloudFormation resource type schema:
			// {
			//   "description": "State of the connect peer.",
			//   "type": "string"
			// }
			Description: "State of the connect peer.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "An array of key-value pairs to apply to this resource.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A key-value pair to associate with a resource.",
			//     "properties": {
			//       "Key": {
			//         "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Description: "An array of key-value pairs to apply to this resource.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::NetworkManager::ConnectPeer",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::NetworkManager::ConnectPeer").WithTerraformTypeName("awscc_networkmanager_connect_peer")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bgp_configurations":    "BgpConfigurations",
		"bgp_options":           "BgpOptions",
		"configuration":         "Configuration",
		"connect_attachment_id": "ConnectAttachmentId",
		"connect_peer_id":       "ConnectPeerId",
		"core_network_address":  "CoreNetworkAddress",
		"core_network_asn":      "CoreNetworkAsn",
		"core_network_id":       "CoreNetworkId",
		"created_at":            "CreatedAt",
		"edge_location":         "EdgeLocation",
		"inside_cidr_blocks":    "InsideCidrBlocks",
		"key":                   "Key",
		"peer_address":          "PeerAddress",
		"peer_asn":              "PeerAsn",
		"protocol":              "Protocol",
		"state":                 "State",
		"tags":                  "Tags",
		"value":                 "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return singularDataSourceType, nil
}
