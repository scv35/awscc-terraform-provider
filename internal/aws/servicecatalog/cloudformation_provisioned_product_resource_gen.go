// Code generated by generators/resource/main.go; DO NOT EDIT.

package servicecatalog

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_servicecatalog_cloudformation_provisioned_product", cloudFormationProvisionedProductResource)
}

// cloudFormationProvisionedProductResource returns the Terraform awscc_servicecatalog_cloudformation_provisioned_product resource.
// This Terraform resource corresponds to the CloudFormation AWS::ServiceCatalog::CloudFormationProvisionedProduct resource.
func cloudFormationProvisionedProductResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"accept_language": {
			// Property: AcceptLanguage
			// CloudFormation resource type schema:
			//
			//	{
			//	  "enum": [
			//	    "en",
			//	    "jp",
			//	    "zh"
			//	  ],
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"en",
					"jp",
					"zh",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"cloudformation_stack_arn": {
			// Property: CloudformationStackArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 256,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"notification_arns": {
			// Property: NotificationArns
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "type": "string"
			//	  },
			//	  "maxItems": 5,
			//	  "type": "array",
			//	  "uniqueItems": true
			//	}
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenAtMost(5),
				validate.UniqueItems(),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"outputs": {
			// Property: Outputs
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "List of key-value pair outputs.",
			//	  "patternProperties": {
			//	    "": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "List of key-value pair outputs.",
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"path_id": {
			// Property: PathId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 100,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 100),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"path_name": {
			// Property: PathName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 100,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 100),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"product_id": {
			// Property: ProductId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 100,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 100),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"product_name": {
			// Property: ProductName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 128,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"provisioned_product_id": {
			// Property: ProvisionedProductId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 50,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"provisioned_product_name": {
			// Property: ProvisionedProductName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 128,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"provisioning_artifact_id": {
			// Property: ProvisioningArtifactId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 100,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 100),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"provisioning_artifact_name": {
			// Property: ProvisioningArtifactName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"provisioning_parameters": {
			// Property: ProvisioningParameters
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "maxLength": 1000,
			//	        "minLength": 1,
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "maxLength": 4096,
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array"
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 1000),
						},
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenAtMost(4096),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"provisioning_preferences": {
			// Property: ProvisioningPreferences
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "StackSetAccounts": {
			//	      "items": {
			//	        "pattern": "^[0-9]{12}$",
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": true
			//	    },
			//	    "StackSetFailureToleranceCount": {
			//	      "minimum": 0,
			//	      "type": "integer"
			//	    },
			//	    "StackSetFailureTolerancePercentage": {
			//	      "maximum": 100,
			//	      "minimum": 0,
			//	      "type": "integer"
			//	    },
			//	    "StackSetMaxConcurrencyCount": {
			//	      "minimum": 1,
			//	      "type": "integer"
			//	    },
			//	    "StackSetMaxConcurrencyPercentage": {
			//	      "maximum": 100,
			//	      "minimum": 1,
			//	      "type": "integer"
			//	    },
			//	    "StackSetOperationType": {
			//	      "enum": [
			//	        "CREATE",
			//	        "UPDATE",
			//	        "DELETE"
			//	      ],
			//	      "type": "string"
			//	    },
			//	    "StackSetRegions": {
			//	      "items": {
			//	        "pattern": "^[a-z]{2}-([a-z]+-)+[1-9]",
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": true
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"stack_set_accounts": {
						// Property: StackSetAccounts
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.UniqueItems(),
							validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^[0-9]{12}$"), "")),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"stack_set_failure_tolerance_count": {
						// Property: StackSetFailureToleranceCount
						Type:     types.Int64Type,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.IntAtLeast(0),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"stack_set_failure_tolerance_percentage": {
						// Property: StackSetFailureTolerancePercentage
						Type:     types.Int64Type,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.IntBetween(0, 100),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"stack_set_max_concurrency_count": {
						// Property: StackSetMaxConcurrencyCount
						Type:     types.Int64Type,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.IntAtLeast(1),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"stack_set_max_concurrency_percentage": {
						// Property: StackSetMaxConcurrencyPercentage
						Type:     types.Int64Type,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.IntBetween(1, 100),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"stack_set_operation_type": {
						// Property: StackSetOperationType
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"CREATE",
								"UPDATE",
								"DELETE",
							}),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"stack_set_regions": {
						// Property: StackSetRegions
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.UniqueItems(),
							validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^[a-z]{2}-([a-z]+-)+[1-9]"), "")),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"record_id": {
			// Property: RecordId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 50,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "maxLength": 128,
			//	        "minLength": 1,
			//	        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "maxLength": 256,
			//	        "minLength": 1,
			//	        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array"
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
							validate.StringMatch(regexp.MustCompile("^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"), ""),
						},
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 256),
							validate.StringMatch(regexp.MustCompile("^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"), ""),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Schema for AWS::ServiceCatalog::CloudFormationProvisionedProduct",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ServiceCatalog::CloudFormationProvisionedProduct").WithTerraformTypeName("awscc_servicecatalog_cloudformation_provisioned_product")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"accept_language":                        "AcceptLanguage",
		"cloudformation_stack_arn":               "CloudformationStackArn",
		"key":                                    "Key",
		"notification_arns":                      "NotificationArns",
		"outputs":                                "Outputs",
		"path_id":                                "PathId",
		"path_name":                              "PathName",
		"product_id":                             "ProductId",
		"product_name":                           "ProductName",
		"provisioned_product_id":                 "ProvisionedProductId",
		"provisioned_product_name":               "ProvisionedProductName",
		"provisioning_artifact_id":               "ProvisioningArtifactId",
		"provisioning_artifact_name":             "ProvisioningArtifactName",
		"provisioning_parameters":                "ProvisioningParameters",
		"provisioning_preferences":               "ProvisioningPreferences",
		"record_id":                              "RecordId",
		"stack_set_accounts":                     "StackSetAccounts",
		"stack_set_failure_tolerance_count":      "StackSetFailureToleranceCount",
		"stack_set_failure_tolerance_percentage": "StackSetFailureTolerancePercentage",
		"stack_set_max_concurrency_count":        "StackSetMaxConcurrencyCount",
		"stack_set_max_concurrency_percentage":   "StackSetMaxConcurrencyPercentage",
		"stack_set_operation_type":               "StackSetOperationType",
		"stack_set_regions":                      "StackSetRegions",
		"tags":                                   "Tags",
		"value":                                  "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(720).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(720)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
