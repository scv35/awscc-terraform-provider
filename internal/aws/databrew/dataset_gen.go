// Code generated by generators/resource/main.go; DO NOT EDIT.

package databrew

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_databrew_dataset", datasetResourceType)
}

// datasetResourceType returns the Terraform aws_databrew_dataset resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::DataBrew::Dataset resource type.
func datasetResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"format": {
			// Property: Format
			// CloudFormation resource type schema:
			// {
			//   "description": "Dataset format",
			//   "enum": [
			//     "CSV",
			//     "JSON",
			//     "PARQUET",
			//     "EXCEL"
			//   ],
			//   "type": "string"
			// }
			Description: "Dataset format",
			Type:        types.StringType,
			Optional:    true,
		},
		"format_options": {
			// Property: FormatOptions
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Format options for dataset",
			//   "properties": {
			//     "Csv": {
			//       "additionalProperties": false,
			//       "description": "Csv options",
			//       "properties": {
			//         "Delimiter": {
			//           "maxLength": 1,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "HeaderRow": {
			//           "type": "boolean"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "Excel": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "HeaderRow": {
			//           "type": "boolean"
			//         },
			//         "SheetIndexes": {
			//           "insertionOrder": true,
			//           "items": {
			//             "type": "integer"
			//           },
			//           "maxItems": 1,
			//           "minItems": 1,
			//           "type": "array"
			//         },
			//         "SheetNames": {
			//           "insertionOrder": true,
			//           "items": {
			//             "type": "string"
			//           },
			//           "maxItems": 1,
			//           "minItems": 1,
			//           "type": "array"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "Json": {
			//       "additionalProperties": false,
			//       "description": "Json options",
			//       "properties": {
			//         "MultiLine": {
			//           "type": "boolean"
			//         }
			//       },
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Format options for dataset",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"csv": {
						// Property: Csv
						Description: "Csv options",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"delimiter": {
									// Property: Delimiter
									Type:     types.StringType,
									Optional: true,
								},
								"header_row": {
									// Property: HeaderRow
									Type:     types.BoolType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"excel": {
						// Property: Excel
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"header_row": {
									// Property: HeaderRow
									Type:     types.BoolType,
									Optional: true,
								},
								"sheet_indexes": {
									// Property: SheetIndexes
									Type:     types.ListType{ElemType: types.NumberType},
									Optional: true,
								},
								"sheet_names": {
									// Property: SheetNames
									Type:     types.ListType{ElemType: types.StringType},
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"json": {
						// Property: Json
						Description: "Json options",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"multi_line": {
									// Property: MultiLine
									Type:     types.BoolType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"input": {
			// Property: Input
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Input",
			//   "properties": {
			//     "DataCatalogInputDefinition": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "CatalogId": {
			//           "description": "Catalog id",
			//           "type": "string"
			//         },
			//         "DatabaseName": {
			//           "description": "Database name",
			//           "type": "string"
			//         },
			//         "TableName": {
			//           "description": "Table name",
			//           "type": "string"
			//         },
			//         "TempDirectory": {
			//           "additionalProperties": false,
			//           "description": "Input location",
			//           "properties": {
			//             "Bucket": {
			//               "type": "string"
			//             },
			//             "Key": {
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Bucket"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "DatabaseInputDefinition": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "DatabaseTableName": {
			//           "description": "Database table name",
			//           "type": "string"
			//         },
			//         "GlueConnectionName": {
			//           "description": "Glue connection name",
			//           "type": "string"
			//         },
			//         "TempDirectory": {
			//           "additionalProperties": false,
			//           "description": "Input location",
			//           "properties": {
			//             "Bucket": {
			//               "type": "string"
			//             },
			//             "Key": {
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Bucket"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "S3InputDefinition": {
			//       "additionalProperties": false,
			//       "description": "Input location",
			//       "properties": {
			//         "Bucket": {
			//           "type": "string"
			//         },
			//         "Key": {
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "Bucket"
			//       ],
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Input",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"data_catalog_input_definition": {
						// Property: DataCatalogInputDefinition
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"catalog_id": {
									// Property: CatalogId
									Description: "Catalog id",
									Type:        types.StringType,
									Optional:    true,
								},
								"database_name": {
									// Property: DatabaseName
									Description: "Database name",
									Type:        types.StringType,
									Optional:    true,
								},
								"table_name": {
									// Property: TableName
									Description: "Table name",
									Type:        types.StringType,
									Optional:    true,
								},
								"temp_directory": {
									// Property: TempDirectory
									Description: "Input location",
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"bucket": {
												// Property: Bucket
												Type:     types.StringType,
												Required: true,
											},
											"key": {
												// Property: Key
												Type:     types.StringType,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"database_input_definition": {
						// Property: DatabaseInputDefinition
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"database_table_name": {
									// Property: DatabaseTableName
									Description: "Database table name",
									Type:        types.StringType,
									Optional:    true,
								},
								"glue_connection_name": {
									// Property: GlueConnectionName
									Description: "Glue connection name",
									Type:        types.StringType,
									Optional:    true,
								},
								"temp_directory": {
									// Property: TempDirectory
									Description: "Input location",
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"bucket": {
												// Property: Bucket
												Type:     types.StringType,
												Required: true,
											},
											"key": {
												// Property: Key
												Type:     types.StringType,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"s3_input_definition": {
						// Property: S3InputDefinition
						Description: "Input location",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"bucket": {
									// Property: Bucket
									Type:     types.StringType,
									Required: true,
								},
								"key": {
									// Property: Key
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
				},
			),
			Required: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "Dataset name",
			//   "maxLength": 255,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Dataset name",
			Type:        types.StringType,
			Required:    true,
			// Name is a force-new attribute.
		},
		"path_options": {
			// Property: PathOptions
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Path options for dataset",
			//   "properties": {
			//     "FilesLimit": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "MaxFiles": {
			//           "description": "Maximum number of files",
			//           "type": "integer"
			//         },
			//         "Order": {
			//           "description": "Order",
			//           "enum": [
			//             "ASCENDING",
			//             "DESCENDING"
			//           ],
			//           "type": "string"
			//         },
			//         "OrderedBy": {
			//           "description": "Ordered by",
			//           "enum": [
			//             "LAST_MODIFIED_DATE"
			//           ],
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "MaxFiles"
			//       ],
			//       "type": "object"
			//     },
			//     "LastModifiedDateCondition": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "Expression": {
			//           "description": "Filtering expression for a parameter",
			//           "maxLength": 1024,
			//           "minLength": 4,
			//           "pattern": "",
			//           "type": "string"
			//         },
			//         "ValuesMap": {
			//           "insertionOrder": true,
			//           "items": {
			//             "additionalProperties": false,
			//             "description": "A key-value pair to associate expression variable names with their values",
			//             "properties": {
			//               "Value": {
			//                 "maxLength": 1024,
			//                 "minLength": 0,
			//                 "type": "string"
			//               },
			//               "ValueReference": {
			//                 "description": "Variable name",
			//                 "maxLength": 128,
			//                 "minLength": 2,
			//                 "pattern": "",
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "ValueReference",
			//               "Value"
			//             ],
			//             "type": "object"
			//           },
			//           "type": "array"
			//         }
			//       },
			//       "required": [
			//         "Expression",
			//         "ValuesMap"
			//       ],
			//       "type": "object"
			//     },
			//     "Parameters": {
			//       "insertionOrder": true,
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "A key-value pair to associate dataset parameter name with its definition.",
			//         "properties": {
			//           "DatasetParameter": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "CreateColumn": {
			//                 "description": "Add the value of this parameter as a column in a dataset.",
			//                 "type": "boolean"
			//               },
			//               "DatetimeOptions": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "Format": {
			//                     "description": "Date/time format of a date parameter",
			//                     "maxLength": 100,
			//                     "minLength": 2,
			//                     "type": "string"
			//                   },
			//                   "LocaleCode": {
			//                     "description": "Locale code for a date parameter",
			//                     "maxLength": 100,
			//                     "minLength": 2,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "TimezoneOffset": {
			//                     "description": "Timezone offset",
			//                     "maxLength": 6,
			//                     "minLength": 1,
			//                     "pattern": "",
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Format"
			//                 ],
			//                 "type": "object"
			//               },
			//               "Filter": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "Expression": {
			//                     "description": "Filtering expression for a parameter",
			//                     "maxLength": 1024,
			//                     "minLength": 4,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "ValuesMap": {
			//                     "insertionOrder": true,
			//                     "items": {
			//                       "additionalProperties": false,
			//                       "description": "A key-value pair to associate expression variable names with their values",
			//                       "properties": {
			//                         "Value": {
			//                           "maxLength": 1024,
			//                           "minLength": 0,
			//                           "type": "string"
			//                         },
			//                         "ValueReference": {
			//                           "description": "Variable name",
			//                           "maxLength": 128,
			//                           "minLength": 2,
			//                           "pattern": "",
			//                           "type": "string"
			//                         }
			//                       },
			//                       "required": [
			//                         "ValueReference",
			//                         "Value"
			//                       ],
			//                       "type": "object"
			//                     },
			//                     "type": "array"
			//                   }
			//                 },
			//                 "required": [
			//                   "Expression",
			//                   "ValuesMap"
			//                 ],
			//                 "type": "object"
			//               },
			//               "Name": {
			//                 "description": "Parameter name",
			//                 "maxLength": 255,
			//                 "minLength": 1,
			//                 "type": "string"
			//               },
			//               "Type": {
			//                 "description": "Parameter type",
			//                 "enum": [
			//                   "String",
			//                   "Number",
			//                   "Datetime"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Name",
			//               "Type"
			//             ],
			//             "type": "object"
			//           },
			//           "PathParameterName": {
			//             "description": "Parameter name",
			//             "maxLength": 255,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "PathParameterName",
			//           "DatasetParameter"
			//         ],
			//         "type": "object"
			//       },
			//       "type": "array"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Path options for dataset",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"files_limit": {
						// Property: FilesLimit
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"max_files": {
									// Property: MaxFiles
									Description: "Maximum number of files",
									Type:        types.NumberType,
									Required:    true,
								},
								"order": {
									// Property: Order
									Description: "Order",
									Type:        types.StringType,
									Optional:    true,
								},
								"ordered_by": {
									// Property: OrderedBy
									Description: "Ordered by",
									Type:        types.StringType,
									Optional:    true,
								},
							},
						),
						Optional: true,
					},
					"last_modified_date_condition": {
						// Property: LastModifiedDateCondition
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"expression": {
									// Property: Expression
									Description: "Filtering expression for a parameter",
									Type:        types.StringType,
									Required:    true,
								},
								"values_map": {
									// Property: ValuesMap
									Attributes: schema.ListNestedAttributes(
										map[string]schema.Attribute{
											"value": {
												// Property: Value
												Type:     types.StringType,
												Required: true,
											},
											"value_reference": {
												// Property: ValueReference
												Description: "Variable name",
												Type:        types.StringType,
												Required:    true,
											},
										},
										schema.ListNestedAttributesOptions{},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"parameters": {
						// Property: Parameters
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"dataset_parameter": {
									// Property: DatasetParameter
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"create_column": {
												// Property: CreateColumn
												Description: "Add the value of this parameter as a column in a dataset.",
												Type:        types.BoolType,
												Optional:    true,
											},
											"datetime_options": {
												// Property: DatetimeOptions
												Attributes: schema.SingleNestedAttributes(
													map[string]schema.Attribute{
														"format": {
															// Property: Format
															Description: "Date/time format of a date parameter",
															Type:        types.StringType,
															Required:    true,
														},
														"locale_code": {
															// Property: LocaleCode
															Description: "Locale code for a date parameter",
															Type:        types.StringType,
															Optional:    true,
														},
														"timezone_offset": {
															// Property: TimezoneOffset
															Description: "Timezone offset",
															Type:        types.StringType,
															Optional:    true,
														},
													},
												),
												Optional: true,
											},
											"filter": {
												// Property: Filter
												Attributes: schema.SingleNestedAttributes(
													map[string]schema.Attribute{
														"expression": {
															// Property: Expression
															Description: "Filtering expression for a parameter",
															Type:        types.StringType,
															Required:    true,
														},
														"values_map": {
															// Property: ValuesMap
															Attributes: schema.ListNestedAttributes(
																map[string]schema.Attribute{
																	"value": {
																		// Property: Value
																		Type:     types.StringType,
																		Required: true,
																	},
																	"value_reference": {
																		// Property: ValueReference
																		Description: "Variable name",
																		Type:        types.StringType,
																		Required:    true,
																	},
																},
																schema.ListNestedAttributesOptions{},
															),
															Required: true,
														},
													},
												),
												Optional: true,
											},
											"name": {
												// Property: Name
												Description: "Parameter name",
												Type:        types.StringType,
												Required:    true,
											},
											"type": {
												// Property: Type
												Description: "Parameter type",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
								"path_parameter_name": {
									// Property: PathParameterName
									Description: "Parameter name",
									Type:        types.StringType,
									Required:    true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A key-value pair to associate with a resource.",
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Value",
			//       "Key"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": false
			// }
			// Multiset.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// Tags is a force-new attribute.
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::DataBrew::Dataset.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataBrew::Dataset").WithTerraformTypeName("aws_databrew_dataset").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_databrew_dataset", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
