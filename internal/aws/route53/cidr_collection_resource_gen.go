// Code generated by generators/resource/main.go; DO NOT EDIT.

package route53

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_route53_cidr_collection", cidrCollectionResourceType)
}

// cidrCollectionResourceType returns the Terraform awscc_route53_cidr_collection resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Route53::CidrCollection resource type.
func cidrCollectionResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon resource name (ARN) to uniquely identify the AWS resource.",
			//   "type": "string"
			// }
			Description: "The Amazon resource name (ARN) to uniquely identify the AWS resource.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "UUID of the CIDR collection.",
			//   "type": "string"
			// }
			Description: "UUID of the CIDR collection.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"locations": {
			// Property: Locations
			// CloudFormation resource type schema:
			// {
			//   "description": "A complex type that contains information about the list of CIDR locations.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "CidrList": {
			//         "description": "A list of CIDR blocks.",
			//         "insertionOrder": false,
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "LocationName": {
			//         "description": "The name of the location that is associated with the CIDR collection.",
			//         "maxLength": 16,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "LocationName",
			//       "CidrList"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "A complex type that contains information about the list of CIDR locations.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"cidr_list": {
						// Property: CidrList
						Description: "A list of CIDR blocks.",
						Type:        types.SetType{ElemType: types.StringType},
						Required:    true,
					},
					"location_name": {
						// Property: LocationName
						Description: "The name of the location that is associated with the CIDR collection.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 16),
						},
					},
				},
			),
			Optional: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "A unique name for the CIDR collection.",
			//   "maxLength": 64,
			//   "minLength": 1,
			//   "pattern": "^[0-9A-Za-z_\\-]+$",
			//   "type": "string"
			// }
			Description: "A unique name for the CIDR collection.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 64),
				validate.StringMatch(regexp.MustCompile("^[0-9A-Za-z_\\-]+$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::Route53::CidrCollection.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Route53::CidrCollection").WithTerraformTypeName("awscc_route53_cidr_collection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":           "Arn",
		"cidr_list":     "CidrList",
		"id":            "Id",
		"location_name": "LocationName",
		"locations":     "Locations",
		"name":          "Name",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
