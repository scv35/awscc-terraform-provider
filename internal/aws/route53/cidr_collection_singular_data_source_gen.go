// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package route53

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_route53_cidr_collection", cidrCollectionDataSourceType)
}

// cidrCollectionDataSourceType returns the Terraform awscc_route53_cidr_collection data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::Route53::CidrCollection resource type.
func cidrCollectionDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon resource name (ARN) to uniquely identify the AWS resource.",
			//   "type": "string"
			// }
			Description: "The Amazon resource name (ARN) to uniquely identify the AWS resource.",
			Type:        types.StringType,
			Computed:    true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "UUID of the CIDR collection.",
			//   "type": "string"
			// }
			Description: "UUID of the CIDR collection.",
			Type:        types.StringType,
			Computed:    true,
		},
		"locations": {
			// Property: Locations
			// CloudFormation resource type schema:
			// {
			//   "description": "A complex type that contains information about the list of CIDR locations.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "CidrList": {
			//         "description": "A list of CIDR blocks.",
			//         "insertionOrder": false,
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "LocationName": {
			//         "description": "The name of the location that is associated with the CIDR collection.",
			//         "maxLength": 16,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "LocationName",
			//       "CidrList"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "A complex type that contains information about the list of CIDR locations.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"cidr_list": {
						// Property: CidrList
						Description: "A list of CIDR blocks.",
						Type:        types.SetType{ElemType: types.StringType},
						Computed:    true,
					},
					"location_name": {
						// Property: LocationName
						Description: "The name of the location that is associated with the CIDR collection.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "A unique name for the CIDR collection.",
			//   "maxLength": 64,
			//   "minLength": 1,
			//   "pattern": "^[0-9A-Za-z_\\-]+$",
			//   "type": "string"
			// }
			Description: "A unique name for the CIDR collection.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Route53::CidrCollection",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Route53::CidrCollection").WithTerraformTypeName("awscc_route53_cidr_collection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":           "Arn",
		"cidr_list":     "CidrList",
		"id":            "Id",
		"location_name": "LocationName",
		"locations":     "Locations",
		"name":          "Name",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return singularDataSourceType, nil
}
