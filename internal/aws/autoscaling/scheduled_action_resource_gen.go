// Code generated by generators/resource/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_autoscaling_scheduled_action", scheduledActionResource)
}

// scheduledActionResource returns the Terraform awscc_autoscaling_scheduled_action resource.
// This Terraform resource corresponds to the CloudFormation AWS::AutoScaling::ScheduledAction resource.
func scheduledActionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"auto_scaling_group_name": {
			// Property: AutoScalingGroupName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the Auto Scaling group.",
			//	  "type": "string"
			//	}
			Description: "The name of the Auto Scaling group.",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"desired_capacity": {
			// Property: DesiredCapacity
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.",
			//	  "type": "integer"
			//	}
			Description: "The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.",
			Type:        types.Int64Type,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"end_time": {
			// Property: EndTime
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
			//	  "type": "string"
			//	}
			Description: "The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"max_size": {
			// Property: MaxSize
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The minimum size of the Auto Scaling group.",
			//	  "type": "integer"
			//	}
			Description: "The minimum size of the Auto Scaling group.",
			Type:        types.Int64Type,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"min_size": {
			// Property: MinSize
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The minimum size of the Auto Scaling group.",
			//	  "type": "integer"
			//	}
			Description: "The minimum size of the Auto Scaling group.",
			Type:        types.Int64Type,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"recurrence": {
			// Property: Recurrence
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence , they form the boundaries of when the recurring action starts and stops.",
			//	  "type": "string"
			//	}
			Description: "The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence , they form the boundaries of when the recurring action starts and stops.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"scheduled_action_name": {
			// Property: ScheduledActionName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Auto-generated unique identifier",
			//	  "type": "string"
			//	}
			Description: "Auto-generated unique identifier",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"start_time": {
			// Property: StartTime
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
			//	  "type": "string"
			//	}
			Description: "The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"time_zone": {
			// Property: TimeZone
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The time zone for the cron expression.",
			//	  "type": "string"
			//	}
			Description: "The time zone for the cron expression.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "The AWS::AutoScaling::ScheduledAction resource specifies an Amazon EC2 Auto Scaling scheduled action so that the Auto Scaling group can change the number of instances available for your application in response to predictable load changes.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AutoScaling::ScheduledAction").WithTerraformTypeName("awscc_autoscaling_scheduled_action")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"auto_scaling_group_name": "AutoScalingGroupName",
		"desired_capacity":        "DesiredCapacity",
		"end_time":                "EndTime",
		"max_size":                "MaxSize",
		"min_size":                "MinSize",
		"recurrence":              "Recurrence",
		"scheduled_action_name":   "ScheduledActionName",
		"start_time":              "StartTime",
		"time_zone":               "TimeZone",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
