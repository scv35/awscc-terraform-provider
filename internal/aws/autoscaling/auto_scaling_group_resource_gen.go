// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"regexp"
)

func init() {
	registry.AddResourceFactory("awscc_autoscaling_auto_scaling_group", autoScalingGroupResource)
}

// autoScalingGroupResource returns the Terraform awscc_autoscaling_auto_scaling_group resource.
// This Terraform resource corresponds to the CloudFormation AWS::AutoScaling::AutoScalingGroup resource.
func autoScalingGroupResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AutoScalingGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"auto_scaling_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZones
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"availability_zones": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CapacityRebalance
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"capacity_rebalance": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Context
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"context": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Cooldown
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"cooldown": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DefaultInstanceWarmup
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"default_instance_warmup": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DesiredCapacity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[0-9]+$",
		//	  "type": "string"
		//	}
		"desired_capacity": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DesiredCapacityType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"desired_capacity_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckGracePeriod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"health_check_grace_period": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"health_check_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
			// InstanceId is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: InstanceMaintenancePolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "MaxHealthyPercentage": {
		//	      "type": "integer"
		//	    },
		//	    "MinHealthyPercentage": {
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"instance_maintenance_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MaxHealthyPercentage
				"max_healthy_percentage": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MinHealthyPercentage
				"min_healthy_percentage": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LaunchConfigurationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"launch_configuration_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LaunchTemplate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "LaunchTemplateId": {
		//	      "type": "string"
		//	    },
		//	    "LaunchTemplateName": {
		//	      "type": "string"
		//	    },
		//	    "Version": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Version"
		//	  ],
		//	  "type": "object"
		//	}
		"launch_template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LaunchTemplateId
				"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LaunchTemplateName
				"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Required: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LifecycleHookSpecificationList
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "DefaultResult": {
		//	        "type": "string"
		//	      },
		//	      "HeartbeatTimeout": {
		//	        "type": "integer"
		//	      },
		//	      "LifecycleHookName": {
		//	        "type": "string"
		//	      },
		//	      "LifecycleTransition": {
		//	        "type": "string"
		//	      },
		//	      "NotificationMetadata": {
		//	        "type": "string"
		//	      },
		//	      "NotificationTargetARN": {
		//	        "type": "string"
		//	      },
		//	      "RoleARN": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "LifecycleHookName",
		//	      "LifecycleTransition"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"lifecycle_hook_specification_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DefaultResult
					"default_result": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: HeartbeatTimeout
					"heartbeat_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: LifecycleHookName
					"lifecycle_hook_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: LifecycleTransition
					"lifecycle_transition": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: NotificationMetadata
					"notification_metadata": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: NotificationTargetARN
					"notification_target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: RoleARN
					"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerNames
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"load_balancer_names": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxInstanceLifetime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"max_instance_lifetime": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[0-9]+$",
		//	  "type": "string"
		//	}
		"max_size": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: MetricsCollection
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Granularity": {
		//	        "type": "string"
		//	      },
		//	      "Metrics": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      }
		//	    },
		//	    "required": [
		//	      "Granularity"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"metrics_collection": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Granularity
					"granularity": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: Metrics
					"metrics": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MinSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[0-9]+$",
		//	  "type": "string"
		//	}
		"min_size": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: MixedInstancesPolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "InstancesDistribution": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "OnDemandAllocationStrategy": {
		//	          "type": "string"
		//	        },
		//	        "OnDemandBaseCapacity": {
		//	          "type": "integer"
		//	        },
		//	        "OnDemandPercentageAboveBaseCapacity": {
		//	          "type": "integer"
		//	        },
		//	        "SpotAllocationStrategy": {
		//	          "type": "string"
		//	        },
		//	        "SpotInstancePools": {
		//	          "type": "integer"
		//	        },
		//	        "SpotMaxPrice": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "LaunchTemplate": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "LaunchTemplateSpecification": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "LaunchTemplateId": {
		//	              "type": "string"
		//	            },
		//	            "LaunchTemplateName": {
		//	              "type": "string"
		//	            },
		//	            "Version": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Version"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Overrides": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "InstanceRequirements": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AcceleratorCount": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "integer"
		//	                      },
		//	                      "Min": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "AcceleratorManufacturers": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "AcceleratorNames": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "AcceleratorTotalMemoryMiB": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "integer"
		//	                      },
		//	                      "Min": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "AcceleratorTypes": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "AllowedInstanceTypes": {
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "BareMetal": {
		//	                    "type": "string"
		//	                  },
		//	                  "BaselineEbsBandwidthMbps": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "integer"
		//	                      },
		//	                      "Min": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "BurstablePerformance": {
		//	                    "type": "string"
		//	                  },
		//	                  "CpuManufacturers": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "ExcludedInstanceTypes": {
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "InstanceGenerations": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "LocalStorage": {
		//	                    "type": "string"
		//	                  },
		//	                  "LocalStorageTypes": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  },
		//	                  "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice": {
		//	                    "type": "integer"
		//	                  },
		//	                  "MemoryGiBPerVCpu": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "number"
		//	                      },
		//	                      "Min": {
		//	                        "type": "number"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "MemoryMiB": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "integer"
		//	                      },
		//	                      "Min": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "NetworkBandwidthGbps": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "number"
		//	                      },
		//	                      "Min": {
		//	                        "type": "number"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "NetworkInterfaceCount": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "integer"
		//	                      },
		//	                      "Min": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "OnDemandMaxPricePercentageOverLowestPrice": {
		//	                    "type": "integer"
		//	                  },
		//	                  "RequireHibernateSupport": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "SpotMaxPricePercentageOverLowestPrice": {
		//	                    "type": "integer"
		//	                  },
		//	                  "TotalLocalStorageGB": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "number"
		//	                      },
		//	                      "Min": {
		//	                        "type": "number"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "VCpuCount": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Max": {
		//	                        "type": "integer"
		//	                      },
		//	                      "Min": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "MemoryMiB",
		//	                  "VCpuCount"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "InstanceType": {
		//	                "type": "string"
		//	              },
		//	              "LaunchTemplateSpecification": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "LaunchTemplateId": {
		//	                    "type": "string"
		//	                  },
		//	                  "LaunchTemplateName": {
		//	                    "type": "string"
		//	                  },
		//	                  "Version": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Version"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "WeightedCapacity": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        }
		//	      },
		//	      "required": [
		//	        "LaunchTemplateSpecification"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "LaunchTemplate"
		//	  ],
		//	  "type": "object"
		//	}
		"mixed_instances_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: InstancesDistribution
				"instances_distribution": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: OnDemandAllocationStrategy
						"on_demand_allocation_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: OnDemandBaseCapacity
						"on_demand_base_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: OnDemandPercentageAboveBaseCapacity
						"on_demand_percentage_above_base_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SpotAllocationStrategy
						"spot_allocation_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SpotInstancePools
						"spot_instance_pools": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SpotMaxPrice
						"spot_max_price": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LaunchTemplate
				"launch_template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LaunchTemplateSpecification
						"launch_template_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: LaunchTemplateId
								"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: LaunchTemplateName
								"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Version
								"version": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Required: true,
						}, /*END ATTRIBUTE*/
						// Property: Overrides
						"overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: InstanceRequirements
									"instance_requirements": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AcceleratorCount
											"accelerator_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AcceleratorManufacturers
											"accelerator_manufacturers": schema.SetAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
													setplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AcceleratorNames
											"accelerator_names": schema.SetAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
													setplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AcceleratorTotalMemoryMiB
											"accelerator_total_memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AcceleratorTypes
											"accelerator_types": schema.SetAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
													setplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AllowedInstanceTypes
											"allowed_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: BareMetal
											"bare_metal": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: BaselineEbsBandwidthMbps
											"baseline_ebs_bandwidth_mbps": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: BurstablePerformance
											"burstable_performance": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: CpuManufacturers
											"cpu_manufacturers": schema.SetAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
													setplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ExcludedInstanceTypes
											"excluded_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: InstanceGenerations
											"instance_generations": schema.SetAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
													setplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: LocalStorage
											"local_storage": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: LocalStorageTypes
											"local_storage_types": schema.SetAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
													setplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: MaxSpotPriceAsPercentageOfOptimalOnDemandPrice
											"max_spot_price_as_percentage_of_optimal_on_demand_price": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: MemoryGiBPerVCpu
											"memory_gi_b_per_v_cpu": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: MemoryMiB
											"memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Required: true,
											}, /*END ATTRIBUTE*/
											// Property: NetworkBandwidthGbps
											"network_bandwidth_gbps": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: NetworkInterfaceCount
											"network_interface_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: OnDemandMaxPricePercentageOverLowestPrice
											"on_demand_max_price_percentage_over_lowest_price": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: RequireHibernateSupport
											"require_hibernate_support": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
													boolplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: SpotMaxPricePercentageOverLowestPrice
											"spot_max_price_percentage_over_lowest_price": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: TotalLocalStorageGB
											"total_local_storage_gb": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: VCpuCount
											"v_cpu_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Max
													"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Min
													"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: InstanceType
									"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: LaunchTemplateSpecification
									"launch_template_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: LaunchTemplateId
											"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: LaunchTemplateName
											"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Version
											"version": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: WeightedCapacity
									"weighted_capacity": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Required: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NewInstancesProtectedFromScaleIn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"new_instances_protected_from_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NotificationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "NotificationTypes": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "TopicARN": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "TopicARN"
		//	  ],
		//	  "type": "object"
		//	}
		"notification_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NotificationTypes
				"notification_types": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TopicARN
				"topic_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Required: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NotificationConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "NotificationTypes": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "TopicARN": {
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "TopicARN"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"notification_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: NotificationTypes
					"notification_types": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: TopicARN
					"topic_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PlacementGroup
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"placement_group": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServiceLinkedRoleARN
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"service_linked_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "PropagateAtLaunch": {
		//	        "type": "boolean"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key",
		//	      "PropagateAtLaunch"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: PropagateAtLaunch
					"propagate_at_launch": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetGroupARNs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"target_group_ar_ns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TerminationPolicies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"termination_policies": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VPCZoneIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"vpc_zone_identifier": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::AutoScaling::AutoScalingGroup",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AutoScaling::AutoScalingGroup").WithTerraformTypeName("awscc_autoscaling_auto_scaling_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"accelerator_count":                 "AcceleratorCount",
		"accelerator_manufacturers":         "AcceleratorManufacturers",
		"accelerator_names":                 "AcceleratorNames",
		"accelerator_total_memory_mi_b":     "AcceleratorTotalMemoryMiB",
		"accelerator_types":                 "AcceleratorTypes",
		"allowed_instance_types":            "AllowedInstanceTypes",
		"auto_scaling_group_name":           "AutoScalingGroupName",
		"availability_zones":                "AvailabilityZones",
		"bare_metal":                        "BareMetal",
		"baseline_ebs_bandwidth_mbps":       "BaselineEbsBandwidthMbps",
		"burstable_performance":             "BurstablePerformance",
		"capacity_rebalance":                "CapacityRebalance",
		"context":                           "Context",
		"cooldown":                          "Cooldown",
		"cpu_manufacturers":                 "CpuManufacturers",
		"default_instance_warmup":           "DefaultInstanceWarmup",
		"default_result":                    "DefaultResult",
		"desired_capacity":                  "DesiredCapacity",
		"desired_capacity_type":             "DesiredCapacityType",
		"excluded_instance_types":           "ExcludedInstanceTypes",
		"granularity":                       "Granularity",
		"health_check_grace_period":         "HealthCheckGracePeriod",
		"health_check_type":                 "HealthCheckType",
		"heartbeat_timeout":                 "HeartbeatTimeout",
		"instance_generations":              "InstanceGenerations",
		"instance_id":                       "InstanceId",
		"instance_maintenance_policy":       "InstanceMaintenancePolicy",
		"instance_requirements":             "InstanceRequirements",
		"instance_type":                     "InstanceType",
		"instances_distribution":            "InstancesDistribution",
		"key":                               "Key",
		"launch_configuration_name":         "LaunchConfigurationName",
		"launch_template":                   "LaunchTemplate",
		"launch_template_id":                "LaunchTemplateId",
		"launch_template_name":              "LaunchTemplateName",
		"launch_template_specification":     "LaunchTemplateSpecification",
		"lifecycle_hook_name":               "LifecycleHookName",
		"lifecycle_hook_specification_list": "LifecycleHookSpecificationList",
		"lifecycle_transition":              "LifecycleTransition",
		"load_balancer_names":               "LoadBalancerNames",
		"local_storage":                     "LocalStorage",
		"local_storage_types":               "LocalStorageTypes",
		"max":                               "Max",
		"max_healthy_percentage":            "MaxHealthyPercentage",
		"max_instance_lifetime":             "MaxInstanceLifetime",
		"max_size":                          "MaxSize",
		"max_spot_price_as_percentage_of_optimal_on_demand_price": "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice",
		"memory_gi_b_per_v_cpu":                                   "MemoryGiBPerVCpu",
		"memory_mi_b":                                             "MemoryMiB",
		"metrics":                                                 "Metrics",
		"metrics_collection":                                      "MetricsCollection",
		"min":                                                     "Min",
		"min_healthy_percentage":                                  "MinHealthyPercentage",
		"min_size":                                                "MinSize",
		"mixed_instances_policy":                                  "MixedInstancesPolicy",
		"network_bandwidth_gbps":                                  "NetworkBandwidthGbps",
		"network_interface_count":                                 "NetworkInterfaceCount",
		"new_instances_protected_from_scale_in":                   "NewInstancesProtectedFromScaleIn",
		"notification_configuration":                              "NotificationConfiguration",
		"notification_configurations":                             "NotificationConfigurations",
		"notification_metadata":                                   "NotificationMetadata",
		"notification_target_arn":                                 "NotificationTargetARN",
		"notification_types":                                      "NotificationTypes",
		"on_demand_allocation_strategy":                           "OnDemandAllocationStrategy",
		"on_demand_base_capacity":                                 "OnDemandBaseCapacity",
		"on_demand_max_price_percentage_over_lowest_price":        "OnDemandMaxPricePercentageOverLowestPrice",
		"on_demand_percentage_above_base_capacity":                "OnDemandPercentageAboveBaseCapacity",
		"overrides":                                               "Overrides",
		"placement_group":                                         "PlacementGroup",
		"propagate_at_launch":                                     "PropagateAtLaunch",
		"require_hibernate_support":                               "RequireHibernateSupport",
		"role_arn":                                                "RoleARN",
		"service_linked_role_arn":                                 "ServiceLinkedRoleARN",
		"spot_allocation_strategy":                                "SpotAllocationStrategy",
		"spot_instance_pools":                                     "SpotInstancePools",
		"spot_max_price":                                          "SpotMaxPrice",
		"spot_max_price_percentage_over_lowest_price":             "SpotMaxPricePercentageOverLowestPrice",
		"tags":                   "Tags",
		"target_group_ar_ns":     "TargetGroupARNs",
		"termination_policies":   "TerminationPolicies",
		"topic_arn":              "TopicARN",
		"total_local_storage_gb": "TotalLocalStorageGB",
		"v_cpu_count":            "VCpuCount",
		"value":                  "Value",
		"version":                "Version",
		"vpc_zone_identifier":    "VPCZoneIdentifier",
		"weighted_capacity":      "WeightedCapacity",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/InstanceId",
	})
	opts = opts.WithCreateTimeoutInMinutes(360).WithDeleteTimeoutInMinutes(180)

	opts = opts.WithUpdateTimeoutInMinutes(660)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
