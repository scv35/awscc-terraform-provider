// Code generated by generators/resource/main.go; DO NOT EDIT.

package licensemanager

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_licensemanager_license", licenseResourceType)
}

// licenseResourceType returns the Terraform aws_licensemanager_license resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::LicenseManager::License resource type.
func licenseResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"beneficiary": {
			// Property: Beneficiary
			// CloudFormation resource type schema:
			// {
			//   "description": "Beneficiary of the license.",
			//   "type": "string"
			// }
			Description: "Beneficiary of the license.",
			Type:        types.StringType,
			Optional:    true,
		},
		"consumption_configuration": {
			// Property: ConsumptionConfiguration
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "BorrowConfiguration": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "AllowEarlyCheckIn": {
			//           "type": "boolean"
			//         },
			//         "MaxTimeToLiveInMinutes": {
			//           "type": "integer"
			//         }
			//       },
			//       "required": [
			//         "MaxTimeToLiveInMinutes",
			//         "AllowEarlyCheckIn"
			//       ],
			//       "type": "object"
			//     },
			//     "ProvisionalConfiguration": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "MaxTimeToLiveInMinutes": {
			//           "type": "integer"
			//         }
			//       },
			//       "required": [
			//         "MaxTimeToLiveInMinutes"
			//       ],
			//       "type": "object"
			//     },
			//     "RenewType": {
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"borrow_configuration": {
						// Property: BorrowConfiguration
						// CloudFormation resource type schema:
						// {
						//   "additionalProperties": false,
						//   "properties": {
						//     "AllowEarlyCheckIn": {
						//       "type": "boolean"
						//     },
						//     "MaxTimeToLiveInMinutes": {
						//       "type": "integer"
						//     }
						//   },
						//   "required": [
						//     "MaxTimeToLiveInMinutes",
						//     "AllowEarlyCheckIn"
						//   ],
						//   "type": "object"
						// }
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"allow_early_check_in": {
									// Property: AllowEarlyCheckIn
									// CloudFormation resource type schema:
									// {
									//   "type": "boolean"
									// }
									Type:     types.BoolType,
									Required: true,
								},
								"max_time_to_live_in_minutes": {
									// Property: MaxTimeToLiveInMinutes
									// CloudFormation resource type schema:
									// {
									//   "type": "integer"
									// }
									Type:     types.NumberType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"provisional_configuration": {
						// Property: ProvisionalConfiguration
						// CloudFormation resource type schema:
						// {
						//   "additionalProperties": false,
						//   "properties": {
						//     "MaxTimeToLiveInMinutes": {
						//       "type": "integer"
						//     }
						//   },
						//   "required": [
						//     "MaxTimeToLiveInMinutes"
						//   ],
						//   "type": "object"
						// }
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"max_time_to_live_in_minutes": {
									// Property: MaxTimeToLiveInMinutes
									// CloudFormation resource type schema:
									// {
									//   "type": "integer"
									// }
									Type:     types.NumberType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"renew_type": {
						// Property: RenewType
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Required: true,
		},
		"entitlements": {
			// Property: Entitlements
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "AllowCheckIn": {
			//         "type": "boolean"
			//       },
			//       "MaxCount": {
			//         "type": "integer"
			//       },
			//       "Name": {
			//         "type": "string"
			//       },
			//       "Overage": {
			//         "type": "boolean"
			//       },
			//       "Unit": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Name",
			//       "Unit"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"allow_check_in": {
						// Property: AllowCheckIn
						// CloudFormation resource type schema:
						// {
						//   "type": "boolean"
						// }
						Type:     types.BoolType,
						Optional: true,
					},
					"max_count": {
						// Property: MaxCount
						// CloudFormation resource type schema:
						// {
						//   "type": "integer"
						// }
						Type:     types.NumberType,
						Optional: true,
					},
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Required: true,
					},
					"overage": {
						// Property: Overage
						// CloudFormation resource type schema:
						// {
						//   "type": "boolean"
						// }
						Type:     types.BoolType,
						Optional: true,
					},
					"unit": {
						// Property: Unit
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Required: true,
		},
		"home_region": {
			// Property: HomeRegion
			// CloudFormation resource type schema:
			// {
			//   "description": "Home region for the created license.",
			//   "type": "string"
			// }
			Description: "Home region for the created license.",
			Type:        types.StringType,
			Required:    true,
		},
		"issuer": {
			// Property: Issuer
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "Name": {
			//       "type": "string"
			//     },
			//     "SignKey": {
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "Name"
			//   ],
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Required: true,
					},
					"sign_key": {
						// Property: SignKey
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Required: true,
		},
		"license_arn": {
			// Property: LicenseArn
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 2048,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"license_metadata": {
			// Property: LicenseMetadata
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Name": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Name",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"license_name": {
			// Property: LicenseName
			// CloudFormation resource type schema:
			// {
			//   "description": "Name for the created license.",
			//   "type": "string"
			// }
			Description: "Name for the created license.",
			Type:        types.StringType,
			Required:    true,
		},
		"product_name": {
			// Property: ProductName
			// CloudFormation resource type schema:
			// {
			//   "description": "Product name for the created license.",
			//   "type": "string"
			// }
			Description: "Product name for the created license.",
			Type:        types.StringType,
			Required:    true,
		},
		"product_sku": {
			// Property: ProductSKU
			// CloudFormation resource type schema:
			// {
			//   "description": "ProductSKU of the license.",
			//   "maxLength": 1024,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "ProductSKU of the license.",
			Type:        types.StringType,
			Optional:    true,
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			// Status is a write-only attribute.
		},
		"validity": {
			// Property: Validity
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "Begin": {
			//       "description": "Validity begin date for the license.",
			//       "format": "date-time",
			//       "type": "string"
			//     },
			//     "End": {
			//       "description": "Validity begin date for the license.",
			//       "format": "date-time",
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "Begin",
			//     "End"
			//   ],
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"begin": {
						// Property: Begin
						// CloudFormation resource type schema:
						// {
						//   "description": "Validity begin date for the license.",
						//   "format": "date-time",
						//   "type": "string"
						// }
						Description: "Validity begin date for the license.",
						Type:        types.StringType,
						Required:    true,
					},
					"end": {
						// Property: End
						// CloudFormation resource type schema:
						// {
						//   "description": "Validity begin date for the license.",
						//   "format": "date-time",
						//   "type": "string"
						// }
						Description: "Validity begin date for the license.",
						Type:        types.StringType,
						Required:    true,
					},
				},
			),
			Required: true,
		},
		"version": {
			// Property: Version
			// CloudFormation resource type schema:
			// {
			//   "description": "The version of the license.",
			//   "type": "string"
			// }
			Description: "The version of the license.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::LicenseManager::License",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::LicenseManager::License").WithTerraformTypeName("aws_licensemanager_license").WithTerraformSchema(schema)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Status",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_licensemanager_license", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
