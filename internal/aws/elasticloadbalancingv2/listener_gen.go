// Code generated by generators/resource/main.go; DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"

	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_elasticloadbalancingv2_listener", listenerResourceType)
}

// listenerResourceType returns the Terraform awscc_elasticloadbalancingv2_listener resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::ElasticLoadBalancingV2::Listener resource type.
func listenerResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"alpn_policy": {
			// Property: AlpnPolicy
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
		},
		"certificates": {
			// Property: Certificates
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "CertificateArn": {
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"certificate_arn": {
						// Property: CertificateArn
						Type:     types.StringType,
						Optional: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.UniqueItems(),
			},
		},
		"default_actions": {
			// Property: DefaultActions
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "AuthenticateCognitoConfig": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "AuthenticationRequestExtraParams": {
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "OnUnauthenticatedRequest": {
			//             "type": "string"
			//           },
			//           "Scope": {
			//             "type": "string"
			//           },
			//           "SessionCookieName": {
			//             "type": "string"
			//           },
			//           "SessionTimeout": {
			//             "type": "string"
			//           },
			//           "UserPoolArn": {
			//             "type": "string"
			//           },
			//           "UserPoolClientId": {
			//             "type": "string"
			//           },
			//           "UserPoolDomain": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "UserPoolClientId",
			//           "UserPoolDomain",
			//           "UserPoolArn"
			//         ],
			//         "type": "object"
			//       },
			//       "AuthenticateOidcConfig": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "AuthenticationRequestExtraParams": {
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "AuthorizationEndpoint": {
			//             "type": "string"
			//           },
			//           "ClientId": {
			//             "type": "string"
			//           },
			//           "ClientSecret": {
			//             "type": "string"
			//           },
			//           "Issuer": {
			//             "type": "string"
			//           },
			//           "OnUnauthenticatedRequest": {
			//             "type": "string"
			//           },
			//           "Scope": {
			//             "type": "string"
			//           },
			//           "SessionCookieName": {
			//             "type": "string"
			//           },
			//           "SessionTimeout": {
			//             "type": "string"
			//           },
			//           "TokenEndpoint": {
			//             "type": "string"
			//           },
			//           "UserInfoEndpoint": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "TokenEndpoint",
			//           "Issuer",
			//           "ClientSecret",
			//           "UserInfoEndpoint",
			//           "ClientId",
			//           "AuthorizationEndpoint"
			//         ],
			//         "type": "object"
			//       },
			//       "FixedResponseConfig": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "ContentType": {
			//             "type": "string"
			//           },
			//           "MessageBody": {
			//             "type": "string"
			//           },
			//           "StatusCode": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "StatusCode"
			//         ],
			//         "type": "object"
			//       },
			//       "ForwardConfig": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "TargetGroupStickinessConfig": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "DurationSeconds": {
			//                 "type": "integer"
			//               },
			//               "Enabled": {
			//                 "type": "boolean"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "TargetGroups": {
			//             "items": {
			//               "additionalProperties": false,
			//               "properties": {
			//                 "TargetGroupArn": {
			//                   "type": "string"
			//                 },
			//                 "Weight": {
			//                   "type": "integer"
			//                 }
			//               },
			//               "type": "object"
			//             },
			//             "type": "array",
			//             "uniqueItems": true
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "Order": {
			//         "type": "integer"
			//       },
			//       "RedirectConfig": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Host": {
			//             "type": "string"
			//           },
			//           "Path": {
			//             "type": "string"
			//           },
			//           "Port": {
			//             "type": "string"
			//           },
			//           "Protocol": {
			//             "type": "string"
			//           },
			//           "Query": {
			//             "type": "string"
			//           },
			//           "StatusCode": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "StatusCode"
			//         ],
			//         "type": "object"
			//       },
			//       "TargetGroupArn": {
			//         "type": "string"
			//       },
			//       "Type": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Type"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"authenticate_cognito_config": {
						// Property: AuthenticateCognitoConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"authentication_request_extra_params": {
									// Property: AuthenticationRequestExtraParams
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Optional: true,
								},
								"on_unauthenticated_request": {
									// Property: OnUnauthenticatedRequest
									Type:     types.StringType,
									Optional: true,
								},
								"scope": {
									// Property: Scope
									Type:     types.StringType,
									Optional: true,
								},
								"session_cookie_name": {
									// Property: SessionCookieName
									Type:     types.StringType,
									Optional: true,
								},
								"session_timeout": {
									// Property: SessionTimeout
									Type:     types.StringType,
									Optional: true,
								},
								"user_pool_arn": {
									// Property: UserPoolArn
									Type:     types.StringType,
									Required: true,
								},
								"user_pool_client_id": {
									// Property: UserPoolClientId
									Type:     types.StringType,
									Required: true,
								},
								"user_pool_domain": {
									// Property: UserPoolDomain
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"authenticate_oidc_config": {
						// Property: AuthenticateOidcConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"authentication_request_extra_params": {
									// Property: AuthenticationRequestExtraParams
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Optional: true,
								},
								"authorization_endpoint": {
									// Property: AuthorizationEndpoint
									Type:     types.StringType,
									Required: true,
								},
								"client_id": {
									// Property: ClientId
									Type:     types.StringType,
									Required: true,
								},
								"client_secret": {
									// Property: ClientSecret
									Type:     types.StringType,
									Required: true,
								},
								"issuer": {
									// Property: Issuer
									Type:     types.StringType,
									Required: true,
								},
								"on_unauthenticated_request": {
									// Property: OnUnauthenticatedRequest
									Type:     types.StringType,
									Optional: true,
								},
								"scope": {
									// Property: Scope
									Type:     types.StringType,
									Optional: true,
								},
								"session_cookie_name": {
									// Property: SessionCookieName
									Type:     types.StringType,
									Optional: true,
								},
								"session_timeout": {
									// Property: SessionTimeout
									Type:     types.StringType,
									Optional: true,
								},
								"token_endpoint": {
									// Property: TokenEndpoint
									Type:     types.StringType,
									Required: true,
								},
								"user_info_endpoint": {
									// Property: UserInfoEndpoint
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"fixed_response_config": {
						// Property: FixedResponseConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"content_type": {
									// Property: ContentType
									Type:     types.StringType,
									Optional: true,
								},
								"message_body": {
									// Property: MessageBody
									Type:     types.StringType,
									Optional: true,
								},
								"status_code": {
									// Property: StatusCode
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"forward_config": {
						// Property: ForwardConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"target_group_stickiness_config": {
									// Property: TargetGroupStickinessConfig
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"duration_seconds": {
												// Property: DurationSeconds
												Type:     types.NumberType,
												Optional: true,
											},
											"enabled": {
												// Property: Enabled
												Type:     types.BoolType,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"target_groups": {
									// Property: TargetGroups
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"target_group_arn": {
												// Property: TargetGroupArn
												Type:     types.StringType,
												Optional: true,
											},
											"weight": {
												// Property: Weight
												Type:     types.NumberType,
												Optional: true,
											},
										},
										tfsdk.ListNestedAttributesOptions{},
									),
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.UniqueItems(),
									},
								},
							},
						),
						Optional: true,
					},
					"order": {
						// Property: Order
						Type:     types.NumberType,
						Optional: true,
					},
					"redirect_config": {
						// Property: RedirectConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"host": {
									// Property: Host
									Type:     types.StringType,
									Optional: true,
								},
								"path": {
									// Property: Path
									Type:     types.StringType,
									Optional: true,
								},
								"port": {
									// Property: Port
									Type:     types.StringType,
									Optional: true,
								},
								"protocol": {
									// Property: Protocol
									Type:     types.StringType,
									Optional: true,
								},
								"query": {
									// Property: Query
									Type:     types.StringType,
									Optional: true,
								},
								"status_code": {
									// Property: StatusCode
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"target_group_arn": {
						// Property: TargetGroupArn
						Type:     types.StringType,
						Optional: true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Required: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.UniqueItems(),
			},
		},
		"listener_arn": {
			// Property: ListenerArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"load_balancer_arn": {
			// Property: LoadBalancerArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			// LoadBalancerArn is a force-new attribute.
		},
		"port": {
			// Property: Port
			// CloudFormation resource type schema:
			// {
			//   "type": "integer"
			// }
			Type:     types.NumberType,
			Optional: true,
		},
		"protocol": {
			// Property: Protocol
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
		},
		"ssl_policy": {
			// Property: SslPolicy
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::ElasticLoadBalancingV2::Listener",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::ElasticLoadBalancingV2::Listener").WithTerraformTypeName("awscc_elasticloadbalancingv2_listener")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alpn_policy":                         "AlpnPolicy",
		"authenticate_cognito_config":         "AuthenticateCognitoConfig",
		"authenticate_oidc_config":            "AuthenticateOidcConfig",
		"authentication_request_extra_params": "AuthenticationRequestExtraParams",
		"authorization_endpoint":              "AuthorizationEndpoint",
		"certificate_arn":                     "CertificateArn",
		"certificates":                        "Certificates",
		"client_id":                           "ClientId",
		"client_secret":                       "ClientSecret",
		"content_type":                        "ContentType",
		"default_actions":                     "DefaultActions",
		"duration_seconds":                    "DurationSeconds",
		"enabled":                             "Enabled",
		"fixed_response_config":               "FixedResponseConfig",
		"forward_config":                      "ForwardConfig",
		"host":                                "Host",
		"issuer":                              "Issuer",
		"listener_arn":                        "ListenerArn",
		"load_balancer_arn":                   "LoadBalancerArn",
		"message_body":                        "MessageBody",
		"on_unauthenticated_request":          "OnUnauthenticatedRequest",
		"order":                               "Order",
		"path":                                "Path",
		"port":                                "Port",
		"protocol":                            "Protocol",
		"query":                               "Query",
		"redirect_config":                     "RedirectConfig",
		"scope":                               "Scope",
		"session_cookie_name":                 "SessionCookieName",
		"session_timeout":                     "SessionTimeout",
		"ssl_policy":                          "SslPolicy",
		"status_code":                         "StatusCode",
		"target_group_arn":                    "TargetGroupArn",
		"target_group_stickiness_config":      "TargetGroupStickinessConfig",
		"target_groups":                       "TargetGroups",
		"token_endpoint":                      "TokenEndpoint",
		"type":                                "Type",
		"user_info_endpoint":                  "UserInfoEndpoint",
		"user_pool_arn":                       "UserPoolArn",
		"user_pool_client_id":                 "UserPoolClientId",
		"user_pool_domain":                    "UserPoolDomain",
		"weight":                              "Weight",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/DefaultActions/*/AuthenticateOidcConfig/ClientSecret",
		"/properties/DefaultActions/*/ForwardConfig",
		"/properties/DefaultActions/*/TargetGroupArn",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_elasticloadbalancingv2_listener", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
