// Code generated by generators/resource/main.go; DO NOT EDIT.

package datasync

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
	providertypes "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/types"
)

func init() {
	registry.AddResourceTypeFactory("aws_datasync_agent", agentResourceType)
}

// agentResourceType returns the Terraform aws_datasync_agent resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::DataSync::Agent resource type.
func agentResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"activation_key": {
			// Property: ActivationKey
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Activation key of the Agent.",
			     "maxLength": 29,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Activation key of the Agent.",
			Type:        types.StringType,
			Required:    true,
			// ActivationKey is a force-new attribute.
			// ActivationKey is a write-only attribute.
		},
		"agent_arn": {
			// Property: AgentArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The DataSync Agent ARN.",
			     "maxLength": 128,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The DataSync Agent ARN.",
			Type:        types.StringType,
			Computed:    true,
		},
		"agent_name": {
			// Property: AgentName
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The name configured for the agent. Text reference used to identify the agent in the console.",
			     "maxLength": 256,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The name configured for the agent. Text reference used to identify the agent in the console.",
			Type:        types.StringType,
			Optional:    true,
		},
		"endpoint_type": {
			// Property: EndpointType
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The service endpoints that the agent will connect to.",
			     "enum": [
			       "FIPS",
			       "PUBLIC",
			       "PRIVATE_LINK"
			     ],
			     "type": "string"
			   }
			*/
			Description: "The service endpoints that the agent will connect to.",
			Type:        types.StringType,
			Computed:    true,
		},
		"security_group_arns": {
			// Property: SecurityGroupArns
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The ARNs of the security group used to protect your data transfer task subnets.",
			     "insertionOrder": false,
			     "items": {
			       "maxLength": 128,
			       "pattern": "",
			       "type": "string"
			     },
			     "type": "array"
			   }
			*/
			Description: "The ARNs of the security group used to protect your data transfer task subnets.",
			// Multiset.
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			// SecurityGroupArns is a force-new attribute.
		},
		"subnet_arns": {
			// Property: SubnetArns
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.",
			     "insertionOrder": false,
			     "items": {
			       "maxLength": 128,
			       "pattern": "",
			       "type": "string"
			     },
			     "type": "array"
			   }
			*/
			Description: "The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.",
			// Multiset.
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			// SubnetArns is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "An array of key-value pairs to apply to this resource.",
			     "insertionOrder": false,
			     "items": {
			       "additionalProperties": false,
			       "description": "A key-value pair to associate with a resource.",
			       "properties": {
			         "Key": {
			           "description": "The key for an AWS resource tag.",
			           "maxLength": 256,
			           "minLength": 1,
			           "pattern": "",
			           "type": "string"
			         },
			         "Value": {
			           "description": "The value for an AWS resource tag.",
			           "maxLength": 256,
			           "minLength": 1,
			           "pattern": "",
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "maxItems": 50,
			     "type": "array",
			     "uniqueItems": true
			   }
			*/
			Description: "An array of key-value pairs to apply to this resource.",
			Attributes: providertypes.SetNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The key for an AWS resource tag.",
						     "maxLength": 256,
						     "minLength": 1,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "The key for an AWS resource tag.",
						Type:        types.StringType,
						Required:    true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The value for an AWS resource tag.",
						     "maxLength": 256,
						     "minLength": 1,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "The value for an AWS resource tag.",
						Type:        types.StringType,
						Required:    true,
					},
				},
				providertypes.SetNestedAttributesOptions{
					MaxItems: 50,
				},
			),
			Optional: true,
		},
		"vpc_endpoint_id": {
			// Property: VpcEndpointId
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The ID of the VPC endpoint that the agent has access to.",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The ID of the VPC endpoint that the agent has access to.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			// VpcEndpointId is a force-new attribute.
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::DataSync::Agent.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataSync::Agent").WithTerraformTypeName("aws_datasync_agent").WithTerraformSchema(schema)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/ActivationKey",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_datasync_agent", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
