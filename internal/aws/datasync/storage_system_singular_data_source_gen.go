// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package datasync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_datasync_storage_system", storageSystemDataSource)
}

// storageSystemDataSource returns the Terraform awscc_datasync_storage_system data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataSync::StorageSystem resource.
func storageSystemDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AgentArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the DataSync agent that connects to and reads from the on-premises storage system's management interface.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 128,
		//	    "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"agent_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The ARN of the DataSync agent that connects to and reads from the on-premises storage system's management interface.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CloudWatchLogGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the Amazon CloudWatch log group used to monitor and log discovery job events.",
		//	  "maxLength": 562,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):logs:[a-z\\-0-9]+:[0-9]{12}:log-group:([^:\\*]*)(:\\*)?$",
		//	  "type": "string"
		//	}
		"cloudwatch_log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the Amazon CloudWatch log group used to monitor and log discovery job events.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectivityStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the DataSync agent can access the on-premises storage system.",
		//	  "enum": [
		//	    "PASS",
		//	    "FAIL",
		//	    "UNKNOWN"
		//	  ],
		//	  "type": "string"
		//	}
		"connectivity_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the DataSync agent can access the on-premises storage system.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A familiar name for the on-premises storage system.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\s+=._:@/-]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A familiar name for the on-premises storage system.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecretsManagerArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of a secret stored by AWS Secrets Manager.",
		//	  "maxLength": 2048,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):secretsmanager:[a-z\\-0-9]+:[0-9]{12}:secret:.*",
		//	  "type": "string"
		//	}
		"secrets_manager_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of a secret stored by AWS Secrets Manager.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ServerConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The server name and network port required to connect with the management interface of the on-premises storage system.",
		//	  "properties": {
		//	    "ServerHostname": {
		//	      "description": "The domain name or IP address of the storage system's management interface.",
		//	      "maxLength": 255,
		//	      "pattern": "^(([a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9\\-]*[A-Za-z0-9])$",
		//	      "type": "string"
		//	    },
		//	    "ServerPort": {
		//	      "description": "The network port needed to access the system's management interface",
		//	      "maximum": 65535,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "ServerHostname"
		//	  ],
		//	  "type": "object"
		//	}
		"server_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ServerHostname
				"server_hostname": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The domain name or IP address of the storage system's management interface.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ServerPort
				"server_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The network port needed to access the system's management interface",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The server name and network port required to connect with the management interface of the on-premises storage system.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ServerCredentials
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The username and password for accessing your on-premises storage system's management interface.",
		//	  "properties": {
		//	    "Password": {
		//	      "description": "The password for your storage system's management interface",
		//	      "maxLength": 1024,
		//	      "type": "string"
		//	    },
		//	    "Username": {
		//	      "description": "The username for your storage system's management interface.",
		//	      "maxLength": 1024,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Username",
		//	    "Password"
		//	  ],
		//	  "type": "object"
		//	}
		"server_credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Password
				"password": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The password for your storage system's management interface",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Username
				"username": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The username for your storage system's management interface.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The username and password for accessing your on-premises storage system's management interface.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StorageSystemArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the on-premises storage system added to DataSync Discovery.",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:system/storage-system-[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
		//	  "type": "string"
		//	}
		"storage_system_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the on-premises storage system added to DataSync Discovery.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SystemType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of on-premises storage system that DataSync Discovery will analyze.",
		//	  "enum": [
		//	    "NetAppONTAP"
		//	  ],
		//	  "type": "string"
		//	}
		"system_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of on-premises storage system that DataSync Discovery will analyze.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key for an AWS resource tag.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s+=._:/-]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for an AWS resource tag.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s+=._:@/-]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key for an AWS resource tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for an AWS resource tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataSync::StorageSystem",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataSync::StorageSystem").WithTerraformTypeName("awscc_datasync_storage_system")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agent_arns":               "AgentArns",
		"cloudwatch_log_group_arn": "CloudWatchLogGroupArn",
		"connectivity_status":      "ConnectivityStatus",
		"key":                      "Key",
		"name":                     "Name",
		"password":                 "Password",
		"secrets_manager_arn":      "SecretsManagerArn",
		"server_configuration":     "ServerConfiguration",
		"server_credentials":       "ServerCredentials",
		"server_hostname":          "ServerHostname",
		"server_port":              "ServerPort",
		"storage_system_arn":       "StorageSystemArn",
		"system_type":              "SystemType",
		"tags":                     "Tags",
		"username":                 "Username",
		"value":                    "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
