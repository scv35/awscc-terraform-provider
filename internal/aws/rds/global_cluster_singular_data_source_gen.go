// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package rds

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_rds_global_cluster", globalClusterDataSource)
}

// globalClusterDataSource returns the Terraform awscc_rds_global_cluster data source.
// This Terraform data source corresponds to the CloudFormation AWS::RDS::GlobalCluster resource.
func globalClusterDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DeletionProtection
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.",
		//	  "type": "boolean"
		//	}
		"deletion_protection": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Engine
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).\nIf you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.",
		//	  "enum": [
		//	    "aurora",
		//	    "aurora-mysql",
		//	    "aurora-postgresql"
		//	  ],
		//	  "type": "string"
		//	}
		"engine": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).\nIf you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EngineLifecycleSupport
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The life cycle type of the global cluster. You can use this setting to enroll your global cluster into Amazon RDS Extended Support.",
		//	  "type": "string"
		//	}
		"engine_lifecycle_support": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The life cycle type of the global cluster. You can use this setting to enroll your global cluster into Amazon RDS Extended Support.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EngineVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version number of the database engine to use. If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.",
		//	  "type": "string"
		//	}
		"engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version number of the database engine to use. If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GlobalClusterIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The cluster identifier of the new global database cluster. This parameter is stored as a lowercase string.",
		//	  "pattern": "^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$",
		//	  "type": "string"
		//	}
		"global_cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The cluster identifier of the new global database cluster. This parameter is stored as a lowercase string.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceDBClusterIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. This parameter is stored as a lowercase string.",
		//	  "oneOf": [
		//	    {},
		//	    {}
		//	  ],
		//	  "type": "string"
		//	}
		"source_db_cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. This parameter is stored as a lowercase string.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StorageEncrypted
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": " The storage encryption setting for the new global database cluster.\nIf you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.",
		//	  "type": "boolean"
		//	}
		"storage_encrypted": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: " The storage encryption setting for the new global database cluster.\nIf you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::RDS::GlobalCluster",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::RDS::GlobalCluster").WithTerraformTypeName("awscc_rds_global_cluster")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"deletion_protection":          "DeletionProtection",
		"engine":                       "Engine",
		"engine_lifecycle_support":     "EngineLifecycleSupport",
		"engine_version":               "EngineVersion",
		"global_cluster_identifier":    "GlobalClusterIdentifier",
		"source_db_cluster_identifier": "SourceDBClusterIdentifier",
		"storage_encrypted":            "StorageEncrypted",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
