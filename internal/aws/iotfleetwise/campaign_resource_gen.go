// Code generated by generators/resource/main.go; DO NOT EDIT.

package iotfleetwise

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_iotfleetwise_campaign", campaignResource)
}

// campaignResource returns the Terraform awscc_iotfleetwise_campaign resource.
// This Terraform resource corresponds to the CloudFormation AWS::IoTFleetWise::Campaign resource.
func campaignResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"action": {
			// Property: Action
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "APPROVE",
			//     "SUSPEND",
			//     "RESUME",
			//     "UPDATE"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"APPROVE",
					"SUSPEND",
					"RESUME",
					"UPDATE",
				}),
			},
			// Action is a write-only property.
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"collection_scheme": {
			// Property: CollectionScheme
			// CloudFormation resource type schema:
			// {
			//   "properties": {
			//     "ConditionBasedCollectionScheme": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "ConditionLanguageVersion": {
			//           "minimum": 1,
			//           "type": "integer"
			//         },
			//         "Expression": {
			//           "maxLength": 2048,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "MinimumTriggerIntervalMs": {
			//           "maximum": 4294967295,
			//           "minimum": 0,
			//           "type": "number"
			//         },
			//         "TriggerMode": {
			//           "enum": [
			//             "ALWAYS",
			//             "RISING_EDGE"
			//           ],
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "Expression"
			//       ],
			//       "type": "object"
			//     },
			//     "TimeBasedCollectionScheme": {
			//       "additionalProperties": false,
			//       "properties": {
			//         "PeriodMs": {
			//           "maximum": 60000,
			//           "minimum": 10000,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "PeriodMs"
			//       ],
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"condition_based_collection_scheme": {
						// Property: ConditionBasedCollectionScheme
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"condition_language_version": {
									// Property: ConditionLanguageVersion
									Type:     types.Int64Type,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntAtLeast(1),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"expression": {
									// Property: Expression
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 2048),
									},
								},
								"minimum_trigger_interval_ms": {
									// Property: MinimumTriggerIntervalMs
									Type:     types.Float64Type,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.FloatBetween(0.000000, 4294967295.000000),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"trigger_mode": {
									// Property: TriggerMode
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"ALWAYS",
											"RISING_EDGE",
										}),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"time_based_collection_scheme": {
						// Property: TimeBasedCollectionScheme
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"period_ms": {
									// Property: PeriodMs
									Type:     types.Float64Type,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.FloatBetween(10000.000000, 60000.000000),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"compression": {
			// Property: Compression
			// CloudFormation resource type schema:
			// {
			//   "default": "OFF",
			//   "enum": [
			//     "OFF",
			//     "SNAPPY"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"OFF",
					"SNAPPY",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.String{Value: "OFF"}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"creation_time": {
			// Property: CreationTime
			// CloudFormation resource type schema:
			// {
			//   "format": "date-time",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"data_extra_dimensions": {
			// Property: DataExtraDimensions
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "maxLength": 150,
			//     "minLength": 1,
			//     "pattern": "^[a-zA-Z0-9_.]+$",
			//     "type": "string"
			//   },
			//   "maxItems": 5,
			//   "minItems": 0,
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(0, 5),
				validate.ArrayForEach(validate.StringLenBetween(1, 150)),
				validate.ArrayForEach(validate.StringMatch(regexp.MustCompile("^[a-zA-Z0-9_.]+$"), "")),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
				resource.UseStateForUnknown(),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 2048,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 2048),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"diagnostics_mode": {
			// Property: DiagnosticsMode
			// CloudFormation resource type schema:
			// {
			//   "default": "OFF",
			//   "enum": [
			//     "OFF",
			//     "SEND_ACTIVE_DTCS"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"OFF",
					"SEND_ACTIVE_DTCS",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.String{Value: "OFF"}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"expiry_time": {
			// Property: ExpiryTime
			// CloudFormation resource type schema:
			// {
			//   "default": "253402243200",
			//   "format": "date-time",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.IsRFC3339Time(),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.String{Value: "253402243200"}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"last_modification_time": {
			// Property: LastModificationTime
			// CloudFormation resource type schema:
			// {
			//   "format": "date-time",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 100,
			//   "minLength": 1,
			//   "pattern": "^[a-zA-Z\\d\\-_:]+$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 100),
				validate.StringMatch(regexp.MustCompile("^[a-zA-Z\\d\\-_:]+$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"post_trigger_collection_duration": {
			// Property: PostTriggerCollectionDuration
			// CloudFormation resource type schema:
			// {
			//   "default": 0,
			//   "maximum": 4294967295,
			//   "minimum": 0,
			//   "type": "number"
			// }
			Type:     types.Float64Type,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.FloatBetween(0.000000, 4294967295.000000),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.Float64{Value: 0.000000}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"priority": {
			// Property: Priority
			// CloudFormation resource type schema:
			// {
			//   "default": 0,
			//   "minimum": 0,
			//   "type": "integer"
			// }
			Type:     types.Int64Type,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.IntAtLeast(0),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.Int64{Value: 0}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"signal_catalog_arn": {
			// Property: SignalCatalogArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"signals_to_collect": {
			// Property: SignalsToCollect
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "MaxSampleCount": {
			//         "maximum": 4294967295,
			//         "minimum": 1,
			//         "type": "number"
			//       },
			//       "MinimumSamplingIntervalMs": {
			//         "maximum": 4294967295,
			//         "minimum": 0,
			//         "type": "number"
			//       },
			//       "Name": {
			//         "maxLength": 150,
			//         "minLength": 1,
			//         "pattern": "^[\\w|*|-]+(\\.[\\w|*|-]+)*$",
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Name"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 1000,
			//   "minItems": 0,
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"max_sample_count": {
						// Property: MaxSampleCount
						Type:     types.Float64Type,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.FloatBetween(1.000000, 4294967295.000000),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"minimum_sampling_interval_ms": {
						// Property: MinimumSamplingIntervalMs
						Type:     types.Float64Type,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.FloatBetween(0.000000, 4294967295.000000),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"name": {
						// Property: Name
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 150),
							validate.StringMatch(regexp.MustCompile("^[\\w|*|-]+(\\.[\\w|*|-]+)*$"), ""),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(0, 1000),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
				resource.UseStateForUnknown(),
			},
		},
		"spooling_mode": {
			// Property: SpoolingMode
			// CloudFormation resource type schema:
			// {
			//   "default": "OFF",
			//   "enum": [
			//     "OFF",
			//     "TO_DISK"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"OFF",
					"TO_DISK",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.String{Value: "OFF"}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"start_time": {
			// Property: StartTime
			// CloudFormation resource type schema:
			// {
			//   "default": "0",
			//   "format": "date-time",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.IsRFC3339Time(),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.String{Value: "0"}),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "CREATING",
			//     "WAITING_FOR_APPROVAL",
			//     "RUNNING",
			//     "SUSPENDED"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "minItems": 0,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(0, 50),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"target_arn": {
			// Property: TargetArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Definition of AWS::IoTFleetWise::Campaign Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTFleetWise::Campaign").WithTerraformTypeName("awscc_iotfleetwise_campaign")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"action":                            "Action",
		"arn":                               "Arn",
		"collection_scheme":                 "CollectionScheme",
		"compression":                       "Compression",
		"condition_based_collection_scheme": "ConditionBasedCollectionScheme",
		"condition_language_version":        "ConditionLanguageVersion",
		"creation_time":                     "CreationTime",
		"data_extra_dimensions":             "DataExtraDimensions",
		"description":                       "Description",
		"diagnostics_mode":                  "DiagnosticsMode",
		"expiry_time":                       "ExpiryTime",
		"expression":                        "Expression",
		"key":                               "Key",
		"last_modification_time":            "LastModificationTime",
		"max_sample_count":                  "MaxSampleCount",
		"minimum_sampling_interval_ms":      "MinimumSamplingIntervalMs",
		"minimum_trigger_interval_ms":       "MinimumTriggerIntervalMs",
		"name":                              "Name",
		"period_ms":                         "PeriodMs",
		"post_trigger_collection_duration":  "PostTriggerCollectionDuration",
		"priority":                          "Priority",
		"signal_catalog_arn":                "SignalCatalogArn",
		"signals_to_collect":                "SignalsToCollect",
		"spooling_mode":                     "SpoolingMode",
		"start_time":                        "StartTime",
		"status":                            "Status",
		"tags":                              "Tags",
		"target_arn":                        "TargetArn",
		"time_based_collection_scheme":      "TimeBasedCollectionScheme",
		"trigger_mode":                      "TriggerMode",
		"value":                             "Value",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Action",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
