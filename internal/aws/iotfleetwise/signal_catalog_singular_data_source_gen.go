// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iotfleetwise

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_iotfleetwise_signal_catalog", signalCatalogDataSource)
}

// signalCatalogDataSource returns the Terraform awscc_iotfleetwise_signal_catalog data source.
// This Terraform data source corresponds to the CloudFormation AWS::IoTFleetWise::SignalCatalog resource.
func signalCatalogDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"creation_time": {
			// Property: CreationTime
			// CloudFormation resource type schema:
			// {
			//   "format": "date-time",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 2048,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"last_modification_time": {
			// Property: LastModificationTime
			// CloudFormation resource type schema:
			// {
			//   "format": "date-time",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 100,
			//   "minLength": 1,
			//   "pattern": "^[a-zA-Z\\d\\-_:]+$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"node_counts": {
			// Property: NodeCounts
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "TotalActuators": {
			//       "type": "number"
			//     },
			//     "TotalAttributes": {
			//       "type": "number"
			//     },
			//     "TotalBranches": {
			//       "type": "number"
			//     },
			//     "TotalNodes": {
			//       "type": "number"
			//     },
			//     "TotalSensors": {
			//       "type": "number"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"total_actuators": {
						// Property: TotalActuators
						Type:     types.Float64Type,
						Computed: true,
					},
					"total_attributes": {
						// Property: TotalAttributes
						Type:     types.Float64Type,
						Computed: true,
					},
					"total_branches": {
						// Property: TotalBranches
						Type:     types.Float64Type,
						Computed: true,
					},
					"total_nodes": {
						// Property: TotalNodes
						Type:     types.Float64Type,
						Computed: true,
					},
					"total_sensors": {
						// Property: TotalSensors
						Type:     types.Float64Type,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"nodes": {
			// Property: Nodes
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "properties": {
			//       "Actuator": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "AllowedValues": {
			//             "insertionOrder": false,
			//             "items": {
			//               "type": "string"
			//             },
			//             "minItems": 1,
			//             "type": "array"
			//           },
			//           "AssignedValue": {
			//             "type": "string"
			//           },
			//           "DataType": {
			//             "enum": [
			//               "INT8",
			//               "UINT8",
			//               "INT16",
			//               "UINT16",
			//               "INT32",
			//               "UINT32",
			//               "INT64",
			//               "UINT64",
			//               "BOOLEAN",
			//               "FLOAT",
			//               "DOUBLE",
			//               "STRING",
			//               "UNIX_TIMESTAMP",
			//               "INT8_ARRAY",
			//               "UINT8_ARRAY",
			//               "INT16_ARRAY",
			//               "UINT16_ARRAY",
			//               "INT32_ARRAY",
			//               "UINT32_ARRAY",
			//               "INT64_ARRAY",
			//               "UINT64_ARRAY",
			//               "BOOLEAN_ARRAY",
			//               "FLOAT_ARRAY",
			//               "DOUBLE_ARRAY",
			//               "STRING_ARRAY",
			//               "UNIX_TIMESTAMP_ARRAY",
			//               "UNKNOWN"
			//             ],
			//             "type": "string"
			//           },
			//           "Description": {
			//             "maxLength": 2048,
			//             "minLength": 1,
			//             "pattern": "",
			//             "type": "string"
			//           },
			//           "FullyQualifiedName": {
			//             "type": "string"
			//           },
			//           "Max": {
			//             "type": "number"
			//           },
			//           "Min": {
			//             "type": "number"
			//           },
			//           "Unit": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "DataType",
			//           "FullyQualifiedName"
			//         ],
			//         "type": "object"
			//       },
			//       "Attribute": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "AllowedValues": {
			//             "insertionOrder": false,
			//             "items": {
			//               "type": "string"
			//             },
			//             "minItems": 1,
			//             "type": "array"
			//           },
			//           "AssignedValue": {
			//             "type": "string"
			//           },
			//           "DataType": {
			//             "enum": [
			//               "INT8",
			//               "UINT8",
			//               "INT16",
			//               "UINT16",
			//               "INT32",
			//               "UINT32",
			//               "INT64",
			//               "UINT64",
			//               "BOOLEAN",
			//               "FLOAT",
			//               "DOUBLE",
			//               "STRING",
			//               "UNIX_TIMESTAMP",
			//               "INT8_ARRAY",
			//               "UINT8_ARRAY",
			//               "INT16_ARRAY",
			//               "UINT16_ARRAY",
			//               "INT32_ARRAY",
			//               "UINT32_ARRAY",
			//               "INT64_ARRAY",
			//               "UINT64_ARRAY",
			//               "BOOLEAN_ARRAY",
			//               "FLOAT_ARRAY",
			//               "DOUBLE_ARRAY",
			//               "STRING_ARRAY",
			//               "UNIX_TIMESTAMP_ARRAY",
			//               "UNKNOWN"
			//             ],
			//             "type": "string"
			//           },
			//           "DefaultValue": {
			//             "type": "string"
			//           },
			//           "Description": {
			//             "maxLength": 2048,
			//             "minLength": 1,
			//             "pattern": "",
			//             "type": "string"
			//           },
			//           "FullyQualifiedName": {
			//             "type": "string"
			//           },
			//           "Max": {
			//             "type": "number"
			//           },
			//           "Min": {
			//             "type": "number"
			//           },
			//           "Unit": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "DataType",
			//           "FullyQualifiedName"
			//         ],
			//         "type": "object"
			//       },
			//       "Branch": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Description": {
			//             "maxLength": 2048,
			//             "minLength": 1,
			//             "pattern": "",
			//             "type": "string"
			//           },
			//           "FullyQualifiedName": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "FullyQualifiedName"
			//         ],
			//         "type": "object"
			//       },
			//       "Sensor": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "AllowedValues": {
			//             "insertionOrder": false,
			//             "items": {
			//               "type": "string"
			//             },
			//             "minItems": 1,
			//             "type": "array"
			//           },
			//           "DataType": {
			//             "enum": [
			//               "INT8",
			//               "UINT8",
			//               "INT16",
			//               "UINT16",
			//               "INT32",
			//               "UINT32",
			//               "INT64",
			//               "UINT64",
			//               "BOOLEAN",
			//               "FLOAT",
			//               "DOUBLE",
			//               "STRING",
			//               "UNIX_TIMESTAMP",
			//               "INT8_ARRAY",
			//               "UINT8_ARRAY",
			//               "INT16_ARRAY",
			//               "UINT16_ARRAY",
			//               "INT32_ARRAY",
			//               "UINT32_ARRAY",
			//               "INT64_ARRAY",
			//               "UINT64_ARRAY",
			//               "BOOLEAN_ARRAY",
			//               "FLOAT_ARRAY",
			//               "DOUBLE_ARRAY",
			//               "STRING_ARRAY",
			//               "UNIX_TIMESTAMP_ARRAY",
			//               "UNKNOWN"
			//             ],
			//             "type": "string"
			//           },
			//           "Description": {
			//             "maxLength": 2048,
			//             "minLength": 1,
			//             "pattern": "",
			//             "type": "string"
			//           },
			//           "FullyQualifiedName": {
			//             "type": "string"
			//           },
			//           "Max": {
			//             "type": "number"
			//           },
			//           "Min": {
			//             "type": "number"
			//           },
			//           "Unit": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "DataType",
			//           "FullyQualifiedName"
			//         ],
			//         "type": "object"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 500,
			//   "minItems": 1,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"actuator": {
						// Property: Actuator
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"allowed_values": {
									// Property: AllowedValues
									Type:     types.ListType{ElemType: types.StringType},
									Computed: true,
								},
								"assigned_value": {
									// Property: AssignedValue
									Type:     types.StringType,
									Computed: true,
								},
								"data_type": {
									// Property: DataType
									Type:     types.StringType,
									Computed: true,
								},
								"description": {
									// Property: Description
									Type:     types.StringType,
									Computed: true,
								},
								"fully_qualified_name": {
									// Property: FullyQualifiedName
									Type:     types.StringType,
									Computed: true,
								},
								"max": {
									// Property: Max
									Type:     types.Float64Type,
									Computed: true,
								},
								"min": {
									// Property: Min
									Type:     types.Float64Type,
									Computed: true,
								},
								"unit": {
									// Property: Unit
									Type:     types.StringType,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"attribute": {
						// Property: Attribute
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"allowed_values": {
									// Property: AllowedValues
									Type:     types.ListType{ElemType: types.StringType},
									Computed: true,
								},
								"assigned_value": {
									// Property: AssignedValue
									Type:     types.StringType,
									Computed: true,
								},
								"data_type": {
									// Property: DataType
									Type:     types.StringType,
									Computed: true,
								},
								"default_value": {
									// Property: DefaultValue
									Type:     types.StringType,
									Computed: true,
								},
								"description": {
									// Property: Description
									Type:     types.StringType,
									Computed: true,
								},
								"fully_qualified_name": {
									// Property: FullyQualifiedName
									Type:     types.StringType,
									Computed: true,
								},
								"max": {
									// Property: Max
									Type:     types.Float64Type,
									Computed: true,
								},
								"min": {
									// Property: Min
									Type:     types.Float64Type,
									Computed: true,
								},
								"unit": {
									// Property: Unit
									Type:     types.StringType,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"branch": {
						// Property: Branch
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"description": {
									// Property: Description
									Type:     types.StringType,
									Computed: true,
								},
								"fully_qualified_name": {
									// Property: FullyQualifiedName
									Type:     types.StringType,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"sensor": {
						// Property: Sensor
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"allowed_values": {
									// Property: AllowedValues
									Type:     types.ListType{ElemType: types.StringType},
									Computed: true,
								},
								"data_type": {
									// Property: DataType
									Type:     types.StringType,
									Computed: true,
								},
								"description": {
									// Property: Description
									Type:     types.StringType,
									Computed: true,
								},
								"fully_qualified_name": {
									// Property: FullyQualifiedName
									Type:     types.StringType,
									Computed: true,
								},
								"max": {
									// Property: Max
									Type:     types.Float64Type,
									Computed: true,
								},
								"min": {
									// Property: Min
									Type:     types.Float64Type,
									Computed: true,
								},
								"unit": {
									// Property: Unit
									Type:     types.StringType,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "minItems": 0,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::IoTFleetWise::SignalCatalog",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTFleetWise::SignalCatalog").WithTerraformTypeName("awscc_iotfleetwise_signal_catalog")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actuator":               "Actuator",
		"allowed_values":         "AllowedValues",
		"arn":                    "Arn",
		"assigned_value":         "AssignedValue",
		"attribute":              "Attribute",
		"branch":                 "Branch",
		"creation_time":          "CreationTime",
		"data_type":              "DataType",
		"default_value":          "DefaultValue",
		"description":            "Description",
		"fully_qualified_name":   "FullyQualifiedName",
		"key":                    "Key",
		"last_modification_time": "LastModificationTime",
		"max":                    "Max",
		"min":                    "Min",
		"name":                   "Name",
		"node_counts":            "NodeCounts",
		"nodes":                  "Nodes",
		"sensor":                 "Sensor",
		"tags":                   "Tags",
		"total_actuators":        "TotalActuators",
		"total_attributes":       "TotalAttributes",
		"total_branches":         "TotalBranches",
		"total_nodes":            "TotalNodes",
		"total_sensors":          "TotalSensors",
		"unit":                   "Unit",
		"value":                  "Value",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
