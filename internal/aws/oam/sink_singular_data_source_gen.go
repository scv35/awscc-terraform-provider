// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package oam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_oam_sink", sinkDataSource)
}

// sinkDataSource returns the Terraform awscc_oam_sink data source.
// This Terraform data source corresponds to the CloudFormation AWS::Oam::Sink resource.
func sinkDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Amazon resource name (ARN) of the ObservabilityAccessManager Sink",
			//	  "maxLength": 2048,
			//	  "type": "string"
			//	}
			Description: "The Amazon resource name (ARN) of the ObservabilityAccessManager Sink",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the ObservabilityAccessManager Sink.",
			//	  "maxLength": 255,
			//	  "minLength": 1,
			//	  "pattern": "^[a-zA-Z0-9_.-]+$",
			//	  "type": "string"
			//	}
			Description: "The name of the ObservabilityAccessManager Sink.",
			Type:        types.StringType,
			Computed:    true,
		},
		"policy": {
			// Property: Policy
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The policy of this ObservabilityAccessManager Sink.",
			//	  "type": "object"
			//	}
			Description: "The policy of this ObservabilityAccessManager Sink.",
			Type:        types.MapType{ElemType: types.StringType},
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Tags to apply to the sink",
			//	  "patternProperties": {
			//	    "": {
			//	      "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//	      "maxLength": 256,
			//	      "minLength": 0,
			//	      "pattern": "",
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "Tags to apply to the sink",
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Oam::Sink",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Oam::Sink").WithTerraformTypeName("awscc_oam_sink")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":    "Arn",
		"name":   "Name",
		"policy": "Policy",
		"tags":   "Tags",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
