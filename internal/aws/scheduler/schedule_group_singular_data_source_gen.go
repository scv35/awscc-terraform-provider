// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package scheduler

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_scheduler_schedule_group", scheduleGroupDataSource)
}

// scheduleGroupDataSource returns the Terraform awscc_scheduler_schedule_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::Scheduler::ScheduleGroup resource.
func scheduleGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Amazon Resource Name (ARN) of the schedule group.",
			//	  "maxLength": 1224,
			//	  "minLength": 1,
			//	  "pattern": "^arn:aws(-[a-z]+)?:scheduler:[a-z0-9\\-]+:\\d{12}:schedule-group\\/[0-9a-zA-Z-_.]+$",
			//	  "type": "string"
			//	}
			Description: "The Amazon Resource Name (ARN) of the schedule group.",
			Type:        types.StringType,
			Computed:    true,
		},
		"creation_date": {
			// Property: CreationDate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The time at which the schedule group was created.",
			//	  "format": "date-time",
			//	  "type": "string"
			//	}
			Description: "The time at which the schedule group was created.",
			Type:        types.StringType,
			Computed:    true,
		},
		"last_modification_date": {
			// Property: LastModificationDate
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The time at which the schedule group was last modified.",
			//	  "format": "date-time",
			//	  "type": "string"
			//	}
			Description: "The time at which the schedule group was last modified.",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 64,
			//	  "minLength": 1,
			//	  "pattern": "^[0-9a-zA-Z-_.]+$",
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"state": {
			// Property: State
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Specifies the state of the schedule group.",
			//	  "enum": [
			//	    "ACTIVE",
			//	    "DELETING"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "Specifies the state of the schedule group.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The list of tags to associate with the schedule group.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "description": "Tag to associate with the resource.",
			//	    "properties": {
			//	      "Key": {
			//	        "description": "Key for the tag",
			//	        "maxLength": 128,
			//	        "minLength": 1,
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "description": "Value for the tag",
			//	        "maxLength": 256,
			//	        "minLength": 1,
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "maxItems": 200,
			//	  "minItems": 0,
			//	  "type": "array"
			//	}
			Description: "The list of tags to associate with the schedule group.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "Key for the tag",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "Value for the tag",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Scheduler::ScheduleGroup",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Scheduler::ScheduleGroup").WithTerraformTypeName("awscc_scheduler_schedule_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                    "Arn",
		"creation_date":          "CreationDate",
		"key":                    "Key",
		"last_modification_date": "LastModificationDate",
		"name":                   "Name",
		"state":                  "State",
		"tags":                   "Tags",
		"value":                  "Value",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
