// Code generated by generators/resource/main.go; DO NOT EDIT.

package sso

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("awscc_sso_permission_set", permissionSetResourceType)
}

// permissionSetResourceType returns the Terraform awscc_sso_permission_set resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::SSO::PermissionSet resource type.
func permissionSetResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "The permission set description.",
			//   "maxLength": 700,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The permission set description.",
			Type:        types.StringType,
			Optional:    true,
		},
		"inline_policy": {
			// Property: InlinePolicy
			// CloudFormation resource type schema:
			// {
			//   "description": "The inline policy to put in permission set.",
			//   "type": "string"
			// }
			Description: "The inline policy to put in permission set.",
			Type:        types.StringType,
			Optional:    true,
		},
		"instance_arn": {
			// Property: InstanceArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The sso instance arn that the permission set is owned.",
			//   "maxLength": 1224,
			//   "minLength": 10,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The sso instance arn that the permission set is owned.",
			Type:        types.StringType,
			Required:    true,
			// InstanceArn is a force-new attribute.
		},
		"managed_policies": {
			// Property: ManagedPolicies
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "description": "The managed policy to attach.",
			//     "maxLength": 2048,
			//     "minLength": 20,
			//     "type": "string"
			//   },
			//   "maxItems": 20,
			//   "type": "array"
			// }
			// Multiset.
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "The name you want to assign to this permission set.",
			//   "maxLength": 32,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The name you want to assign to this permission set.",
			Type:        types.StringType,
			Required:    true,
			// Name is a force-new attribute.
		},
		"permission_set_arn": {
			// Property: PermissionSetArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The permission set that the policy will be attached to",
			//   "maxLength": 1224,
			//   "minLength": 10,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The permission set that the policy will be attached to",
			Type:        types.StringType,
			Computed:    true,
		},
		"relay_state_type": {
			// Property: RelayStateType
			// CloudFormation resource type schema:
			// {
			//   "description": "The relay state URL that redirect links to any service in the AWS Management Console.",
			//   "maxLength": 240,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The relay state URL that redirect links to any service in the AWS Management Console.",
			Type:        types.StringType,
			Optional:    true,
		},
		"session_duration": {
			// Property: SessionDuration
			// CloudFormation resource type schema:
			// {
			//   "description": "The length of time that a user can be signed in to an AWS account.",
			//   "maxLength": 100,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The length of time that a user can be signed in to an AWS account.",
			Type:        types.StringType,
			Optional:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "The metadata that you apply to the permission set to help you categorize and organize them.",
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "pattern": "",
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "pattern": "",
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "type": "array"
			// }
			// Multiset.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MaxItems: 50,
				},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for SSO PermissionSet",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSO::PermissionSet").WithTerraformTypeName("awscc_sso_permission_set").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_sso_permission_set", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
