// Code generated by generators/resource/main.go; DO NOT EDIT.

package rolesanywhere

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_rolesanywhere_trust_anchor", trustAnchorResourceType)
}

// trustAnchorResourceType returns the Terraform awscc_rolesanywhere_trust_anchor resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::RolesAnywhere::TrustAnchor resource type.
func trustAnchorResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"enabled": {
			// Property: Enabled
			// CloudFormation resource type schema:
			// {
			//   "type": "boolean"
			// }
			Type:     types.BoolType,
			Optional: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
		},
		"source": {
			// Property: Source
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "SourceData": {
			//       "properties": {
			//         "AcmPcaArn": {
			//           "type": "string"
			//         },
			//         "X509CertificateData": {
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "SourceType": {
			//       "enum": [
			//         "AWS_ACM_PCA",
			//         "CERTIFICATE_BUNDLE",
			//         "SELF_SIGNED_REPOSITORY"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"source_data": {
						// Property: SourceData
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"acm_pca_arn": {
									// Property: AcmPcaArn
									Type:     types.StringType,
									Optional: true,
								},
								"x509_certificate_data": {
									// Property: X509CertificateData
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"source_type": {
						// Property: SourceType
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"AWS_ACM_PCA",
								"CERTIFICATE_BUNDLE",
								"SELF_SIGNED_REPOSITORY",
							}),
						},
					},
				},
			),
			Optional: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 200,
			//   "minItems": 0,
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
				},
			),
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(0, 200),
			},
		},
		"trust_anchor_arn": {
			// Property: TrustAnchorArn
			// CloudFormation resource type schema:
			// {
			//   "pattern": "[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"trust_anchor_id": {
			// Property: TrustAnchorId
			// CloudFormation resource type schema:
			// {
			//   "pattern": "[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Definition of AWS::RolesAnywhere::TrustAnchor Resource Type.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::RolesAnywhere::TrustAnchor").WithTerraformTypeName("awscc_rolesanywhere_trust_anchor")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"acm_pca_arn":           "AcmPcaArn",
		"enabled":               "Enabled",
		"key":                   "Key",
		"name":                  "Name",
		"source":                "Source",
		"source_data":           "SourceData",
		"source_type":           "SourceType",
		"tags":                  "Tags",
		"trust_anchor_arn":      "TrustAnchorArn",
		"trust_anchor_id":       "TrustAnchorId",
		"value":                 "Value",
		"x509_certificate_data": "X509CertificateData",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
