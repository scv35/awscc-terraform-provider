// Code generated by generators/resource/main.go; DO NOT EDIT.

package elasticbeanstalk

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_elasticbeanstalk_application_version", applicationVersionResource)
}

// applicationVersionResource returns the Terraform awscc_elasticbeanstalk_application_version resource.
// This Terraform resource corresponds to the CloudFormation AWS::ElasticBeanstalk::ApplicationVersion resource.
func applicationVersionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"application_name": {
			// Property: ApplicationName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the Elastic Beanstalk application that is associated with this application version. ",
			//	  "type": "string"
			//	}
			Description: "The name of the Elastic Beanstalk application that is associated with this application version. ",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A description of this application version.",
			//	  "type": "string"
			//	}
			Description: "A description of this application version.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"source_bundle": {
			// Property: SourceBundle
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "The Amazon S3 bucket and key that identify the location of the source bundle for this version. ",
			//	  "properties": {
			//	    "S3Bucket": {
			//	      "description": "The Amazon S3 bucket where the data is located.",
			//	      "type": "string"
			//	    },
			//	    "S3Key": {
			//	      "description": "The Amazon S3 key where the data is located.",
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "S3Bucket",
			//	    "S3Key"
			//	  ],
			//	  "type": "object"
			//	}
			Description: "The Amazon S3 bucket and key that identify the location of the source bundle for this version. ",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"s3_bucket": {
						// Property: S3Bucket
						Description: "The Amazon S3 bucket where the data is located.",
						Type:        types.StringType,
						Required:    true,
					},
					"s3_key": {
						// Property: S3Key
						Description: "The Amazon S3 key where the data is located.",
						Type:        types.StringType,
						Required:    true,
					},
				},
			),
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::ElasticBeanstalk::ApplicationVersion",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ElasticBeanstalk::ApplicationVersion").WithTerraformTypeName("awscc_elasticbeanstalk_application_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_name": "ApplicationName",
		"description":      "Description",
		"id":               "Id",
		"s3_bucket":        "S3Bucket",
		"s3_key":           "S3Key",
		"source_bundle":    "SourceBundle",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
