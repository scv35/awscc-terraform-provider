// Code generated by generators/resource/main.go; DO NOT EDIT.

package chatbot

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_chatbot_slack_channel_configuration", slackChannelConfiguration)
}

// slackChannelConfiguration returns the Terraform aws_chatbot_slack_channel_configuration resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Chatbot::SlackChannelConfiguration resource type.
func slackChannelConfiguration(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Amazon Resource Name (ARN) of the configuration",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Amazon Resource Name (ARN) of the configuration",
			Type:        types.StringType,
			Computed:    true,
		},
		"configuration_name": {
			// Property: ConfigurationName
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The name of the configuration",
			     "maxLength": 128,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The name of the configuration",
			Type:        types.StringType,
			Required:    true,
			// ConfigurationName is a force-new attribute.
		},
		"iam_role_arn": {
			// Property: IamRoleArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The ARN of the IAM role that defines the permissions for AWS Chatbot",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The ARN of the IAM role that defines the permissions for AWS Chatbot",
			Type:        types.StringType,
			Required:    true,
		},
		"logging_level": {
			// Property: LoggingLevel
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs",
			Type:        types.StringType,
			Optional:    true,
		},
		"slack_channel_id": {
			// Property: SlackChannelId
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The id of the Slack channel",
			     "maxLength": 256,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The id of the Slack channel",
			Type:        types.StringType,
			Required:    true,
		},
		"slack_workspace_id": {
			// Property: SlackWorkspaceId
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The id of the Slack workspace",
			     "maxLength": 256,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "The id of the Slack workspace",
			Type:        types.StringType,
			Required:    true,
			// SlackWorkspaceId is a force-new attribute.
		},
		"sns_topic_arns": {
			// Property: SnsTopicArns
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.",
			     "items": {
			       "pattern": "",
			       "type": "string"
			     },
			     "type": "array"
			   }
			*/
			Description: "ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.",
			Type:        types.ListType{ElemType: types.StringType},
			Optional:    true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::Chatbot::SlackChannelConfiguration.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Chatbot::SlackChannelConfiguration").WithTerraformTypeName("aws_chatbot_slack_channel_configuration").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_chatbot_slack_channel_configuration", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
