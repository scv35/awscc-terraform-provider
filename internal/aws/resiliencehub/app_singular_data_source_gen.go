// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package resiliencehub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_resiliencehub_app", appDataSource)
}

// appDataSource returns the Terraform awscc_resiliencehub_app data source.
// This Terraform data source corresponds to the CloudFormation AWS::ResilienceHub::App resource.
func appDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AppArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Resource Name (ARN) of the App.",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"app_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Resource Name (ARN) of the App.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AppAssessmentSchedule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Assessment execution schedule.",
		//	  "enum": [
		//	    "Disabled",
		//	    "Daily"
		//	  ],
		//	  "type": "string"
		//	}
		"app_assessment_schedule": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Assessment execution schedule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AppTemplateBody
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A string containing full ResilienceHub app template body.",
		//	  "maxLength": 5000,
		//	  "minLength": 0,
		//	  "pattern": "^[\\w\\s:,-\\.'\\/{}\\[\\]:\"]+$",
		//	  "type": "string"
		//	}
		"app_template_body": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A string containing full ResilienceHub app template body.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "App description.",
		//	  "maxLength": 500,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "App description.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the app.",
		//	  "pattern": "^[A-Za-z0-9][A-Za-z0-9_\\-]{1,59}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the app.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResiliencyPolicyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Resource Name (ARN) of the Resiliency Policy.",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"resiliency_policy_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Resource Name (ARN) of the Resiliency Policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceMappings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of ResourceMapping objects.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Resource mapping is used to map logical resources from template to physical resource",
		//	    "properties": {
		//	      "EksSourceName": {
		//	        "type": "string"
		//	      },
		//	      "LogicalStackName": {
		//	        "type": "string"
		//	      },
		//	      "MappingType": {
		//	        "pattern": "CfnStack|Resource|Terraform|EKS",
		//	        "type": "string"
		//	      },
		//	      "PhysicalResourceId": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AwsAccountId": {
		//	            "pattern": "^[0-9]{12}$",
		//	            "type": "string"
		//	          },
		//	          "AwsRegion": {
		//	            "pattern": "^[a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]$",
		//	            "type": "string"
		//	          },
		//	          "Identifier": {
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "pattern": "Arn|Native",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Identifier",
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "ResourceName": {
		//	        "pattern": "^[A-Za-z0-9][A-Za-z0-9_\\-]{1,59}$",
		//	        "type": "string"
		//	      },
		//	      "TerraformSourceName": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "MappingType",
		//	      "PhysicalResourceId"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"resource_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: EksSourceName
					"eks_source_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LogicalStackName
					"logical_stack_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: MappingType
					"mapping_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PhysicalResourceId
					"physical_resource_id": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AwsAccountId
							"aws_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: AwsRegion
							"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Identifier
							"identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ResourceName
					"resource_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: TerraformSourceName
					"terraform_source_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of ResourceMapping objects.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "maxLength": 256,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ResilienceHub::App",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ResilienceHub::App").WithTerraformTypeName("awscc_resiliencehub_app")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"app_arn":                 "AppArn",
		"app_assessment_schedule": "AppAssessmentSchedule",
		"app_template_body":       "AppTemplateBody",
		"aws_account_id":          "AwsAccountId",
		"aws_region":              "AwsRegion",
		"description":             "Description",
		"eks_source_name":         "EksSourceName",
		"identifier":              "Identifier",
		"logical_stack_name":      "LogicalStackName",
		"mapping_type":            "MappingType",
		"name":                    "Name",
		"physical_resource_id":    "PhysicalResourceId",
		"resiliency_policy_arn":   "ResiliencyPolicyArn",
		"resource_mappings":       "ResourceMappings",
		"resource_name":           "ResourceName",
		"tags":                    "Tags",
		"terraform_source_name":   "TerraformSourceName",
		"type":                    "Type",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
