// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_ecs_capacity_provider", capacityProviderResourceType)
}

// capacityProviderResourceType returns the Terraform aws_ecs_capacity_provider resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::ECS::CapacityProvider resource type.
func capacityProviderResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"auto_scaling_group_provider": {
			// Property: AutoScalingGroupProvider
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "AutoScalingGroupArn": {
			//       "type": "string"
			//     },
			//     "ManagedScaling": {
			//       "additionalProperties": false,
			//       "description": "The managed scaling settings for the Auto Scaling group capacity provider.",
			//       "properties": {
			//         "InstanceWarmupPeriod": {
			//           "type": "integer"
			//         },
			//         "MaximumScalingStepSize": {
			//           "type": "integer"
			//         },
			//         "MinimumScalingStepSize": {
			//           "type": "integer"
			//         },
			//         "Status": {
			//           "enum": [
			//             "DISABLED",
			//             "ENABLED"
			//           ],
			//           "type": "string"
			//         },
			//         "TargetCapacity": {
			//           "type": "integer"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "ManagedTerminationProtection": {
			//       "enum": [
			//         "DISABLED",
			//         "ENABLED"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "AutoScalingGroupArn"
			//   ],
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"auto_scaling_group_arn": {
						// Property: AutoScalingGroupArn
						Type:     types.StringType,
						Required: true,
						// AutoScalingGroupArn is a force-new attribute.
					},
					"managed_scaling": {
						// Property: ManagedScaling
						Description: "The managed scaling settings for the Auto Scaling group capacity provider.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"instance_warmup_period": {
									// Property: InstanceWarmupPeriod
									Type:     types.NumberType,
									Optional: true,
								},
								"maximum_scaling_step_size": {
									// Property: MaximumScalingStepSize
									Type:     types.NumberType,
									Optional: true,
								},
								"minimum_scaling_step_size": {
									// Property: MinimumScalingStepSize
									Type:     types.NumberType,
									Optional: true,
								},
								"status": {
									// Property: Status
									Type:     types.StringType,
									Optional: true,
								},
								"target_capacity": {
									// Property: TargetCapacity
									Type:     types.NumberType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"managed_termination_protection": {
						// Property: ManagedTerminationProtection
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Required: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// Name is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Optional: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::ECS::CapacityProvider.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECS::CapacityProvider").WithTerraformTypeName("aws_ecs_capacity_provider").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_ecs_capacity_provider", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
