// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	providertypes "github.com/hashicorp/terraform-provider-awscc/internal/types"
)

func init() {
	registry.AddResourceTypeFactory("awscc_ecs_task_definition", taskDefinitionResourceType)
}

// taskDefinitionResourceType returns the Terraform awscc_ecs_task_definition resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::ECS::TaskDefinition resource type.
func taskDefinitionResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"container_definitions": {
			// Property: ContainerDefinitions
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "List of container definitions that are passed to the Docker daemon on a container instance",
			//     "properties": {
			//       "Command": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array"
			//       },
			//       "Cpu": {
			//         "type": "integer"
			//       },
			//       "DependsOn": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Condition": {
			//               "type": "string"
			//             },
			//             "ContainerName": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "DisableNetworking": {
			//         "type": "boolean"
			//       },
			//       "DnsSearchDomains": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array"
			//       },
			//       "DnsServers": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array"
			//       },
			//       "DockerLabels": {
			//         "additionalProperties": false,
			//         "patternProperties": {
			//           "": {
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "DockerSecurityOptions": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array"
			//       },
			//       "EntryPoint": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array"
			//       },
			//       "Environment": {
			//         "description": "The environment variables to pass to a container",
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Name": {
			//               "type": "string"
			//             },
			//             "Value": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "EnvironmentFiles": {
			//         "description": "The list of one or more files that contain the environment variables to pass to a container",
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Type": {
			//               "type": "string"
			//             },
			//             "Value": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "Essential": {
			//         "type": "boolean"
			//       },
			//       "ExtraHosts": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Hostname": {
			//               "type": "string"
			//             },
			//             "IpAddress": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "FirelensConfiguration": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Options": {
			//             "additionalProperties": false,
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Type": {
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "HealthCheck": {
			//         "additionalProperties": false,
			//         "description": "The health check command and associated configuration parameters for the container.",
			//         "properties": {
			//           "Command": {
			//             "description": "A string array representing the command that the container runs to determine if it is healthy.",
			//             "items": {
			//               "type": "string"
			//             },
			//             "type": "array"
			//           },
			//           "Interval": {
			//             "description": "The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.",
			//             "type": "integer"
			//           },
			//           "Retries": {
			//             "description": "The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.",
			//             "type": "integer"
			//           },
			//           "StartPeriod": {
			//             "description": "The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.",
			//             "type": "integer"
			//           },
			//           "Timeout": {
			//             "description": "The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.",
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "Hostname": {
			//         "type": "string"
			//       },
			//       "Image": {
			//         "description": "The image used to start a container. This string is passed directly to the Docker daemon.",
			//         "type": "string"
			//       },
			//       "Interactive": {
			//         "type": "boolean"
			//       },
			//       "Links": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "LinuxParameters": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Capabilities": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Add": {
			//                 "items": {
			//                   "type": "string"
			//                 },
			//                 "type": "array"
			//               },
			//               "Drop": {
			//                 "items": {
			//                   "type": "string"
			//                 },
			//                 "type": "array"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Devices": {
			//             "items": {
			//               "additionalProperties": false,
			//               "properties": {
			//                 "ContainerPath": {
			//                   "type": "string"
			//                 },
			//                 "HostPath": {
			//                   "type": "string"
			//                 },
			//                 "Permissions": {
			//                   "items": {
			//                     "type": "string"
			//                   },
			//                   "type": "array",
			//                   "uniqueItems": true
			//                 }
			//               },
			//               "type": "object"
			//             },
			//             "type": "array"
			//           },
			//           "InitProcessEnabled": {
			//             "type": "boolean"
			//           },
			//           "MaxSwap": {
			//             "type": "integer"
			//           },
			//           "SharedMemorySize": {
			//             "type": "integer"
			//           },
			//           "Swappiness": {
			//             "type": "integer"
			//           },
			//           "Tmpfs": {
			//             "items": {
			//               "additionalProperties": false,
			//               "properties": {
			//                 "ContainerPath": {
			//                   "type": "string"
			//                 },
			//                 "MountOptions": {
			//                   "items": {
			//                     "type": "string"
			//                   },
			//                   "type": "array"
			//                 },
			//                 "Size": {
			//                   "type": "integer"
			//                 }
			//               },
			//               "required": [
			//                 "Size"
			//               ],
			//               "type": "object"
			//             },
			//             "type": "array"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "LogConfiguration": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "LogDriver": {
			//             "type": "string"
			//           },
			//           "Options": {
			//             "additionalProperties": false,
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "SecretOptions": {
			//             "items": {
			//               "additionalProperties": false,
			//               "properties": {
			//                 "Name": {
			//                   "type": "string"
			//                 },
			//                 "ValueFrom": {
			//                   "type": "string"
			//                 }
			//               },
			//               "required": [
			//                 "Name",
			//                 "ValueFrom"
			//               ],
			//               "type": "object"
			//             },
			//             "type": "array"
			//           }
			//         },
			//         "required": [
			//           "LogDriver"
			//         ],
			//         "type": "object"
			//       },
			//       "Memory": {
			//         "description": "The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.",
			//         "type": "integer"
			//       },
			//       "MemoryReservation": {
			//         "type": "integer"
			//       },
			//       "MountPoints": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "ContainerPath": {
			//               "type": "string"
			//             },
			//             "ReadOnly": {
			//               "type": "boolean"
			//             },
			//             "SourceVolume": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "Name": {
			//         "description": "The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed",
			//         "type": "string"
			//       },
			//       "PortMappings": {
			//         "description": "Port mappings allow containers to access ports on the host container instance to send or receive traffic.",
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "ContainerPort": {
			//               "type": "integer"
			//             },
			//             "HostPort": {
			//               "type": "integer"
			//             },
			//             "Protocol": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "Privileged": {
			//         "type": "boolean"
			//       },
			//       "PseudoTerminal": {
			//         "type": "boolean"
			//       },
			//       "ReadonlyRootFilesystem": {
			//         "type": "boolean"
			//       },
			//       "RepositoryCredentials": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "CredentialsParameter": {
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "ResourceRequirements": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Type": {
			//               "type": "string"
			//             },
			//             "Value": {
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Type",
			//             "Value"
			//           ],
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "Secrets": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Name": {
			//               "type": "string"
			//             },
			//             "ValueFrom": {
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Name",
			//             "ValueFrom"
			//           ],
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "StartTimeout": {
			//         "type": "integer"
			//       },
			//       "StopTimeout": {
			//         "type": "integer"
			//       },
			//       "SystemControls": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Namespace": {
			//               "type": "string"
			//             },
			//             "Value": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "Ulimits": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "HardLimit": {
			//               "type": "integer"
			//             },
			//             "Name": {
			//               "type": "string"
			//             },
			//             "SoftLimit": {
			//               "type": "integer"
			//             }
			//           },
			//           "required": [
			//             "HardLimit",
			//             "Name",
			//             "SoftLimit"
			//           ],
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "User": {
			//         "type": "string"
			//       },
			//       "VolumesFrom": {
			//         "items": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "ReadOnly": {
			//               "type": "boolean"
			//             },
			//             "SourceContainer": {
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         },
			//         "type": "array",
			//         "uniqueItems": true
			//       },
			//       "WorkingDirectory": {
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"command": {
						// Property: Command
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"cpu": {
						// Property: Cpu
						Type:     types.NumberType,
						Optional: true,
					},
					"depends_on": {
						// Property: DependsOn
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"condition": {
									// Property: Condition
									Type:     types.StringType,
									Optional: true,
								},
								"container_name": {
									// Property: ContainerName
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"disable_networking": {
						// Property: DisableNetworking
						Type:     types.BoolType,
						Optional: true,
					},
					"dns_search_domains": {
						// Property: DnsSearchDomains
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"dns_servers": {
						// Property: DnsServers
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"docker_labels": {
						// Property: DockerLabels
						// Pattern: ""
						Type:     types.MapType{ElemType: types.StringType},
						Optional: true,
					},
					"docker_security_options": {
						// Property: DockerSecurityOptions
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"entry_point": {
						// Property: EntryPoint
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"environment": {
						// Property: Environment
						Description: "The environment variables to pass to a container",
						// Ordered set.
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"name": {
									// Property: Name
									Type:     types.StringType,
									Optional: true,
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"environment_files": {
						// Property: EnvironmentFiles
						Description: "The list of one or more files that contain the environment variables to pass to a container",
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"type": {
									// Property: Type
									Type:     types.StringType,
									Optional: true,
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"essential": {
						// Property: Essential
						Type:     types.BoolType,
						Optional: true,
					},
					"extra_hosts": {
						// Property: ExtraHosts
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"hostname": {
									// Property: Hostname
									Type:     types.StringType,
									Optional: true,
								},
								"ip_address": {
									// Property: IpAddress
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"firelens_configuration": {
						// Property: FirelensConfiguration
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"options": {
									// Property: Options
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Optional: true,
								},
								"type": {
									// Property: Type
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"health_check": {
						// Property: HealthCheck
						Description: "The health check command and associated configuration parameters for the container.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"command": {
									// Property: Command
									Description: "A string array representing the command that the container runs to determine if it is healthy.",
									Type:        types.ListType{ElemType: types.StringType},
									Optional:    true,
								},
								"interval": {
									// Property: Interval
									Description: "The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"retries": {
									// Property: Retries
									Description: "The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"start_period": {
									// Property: StartPeriod
									Description: "The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"timeout": {
									// Property: Timeout
									Description: "The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.",
									Type:        types.NumberType,
									Optional:    true,
								},
							},
						),
						Optional: true,
					},
					"hostname": {
						// Property: Hostname
						Type:     types.StringType,
						Optional: true,
					},
					"image": {
						// Property: Image
						Description: "The image used to start a container. This string is passed directly to the Docker daemon.",
						Type:        types.StringType,
						Optional:    true,
					},
					"interactive": {
						// Property: Interactive
						Type:     types.BoolType,
						Optional: true,
					},
					"links": {
						// Property: Links
						// Ordered set.
						Type:     providertypes.OrderedSetType{types.ListType{ElemType: types.StringType}},
						Optional: true,
					},
					"linux_parameters": {
						// Property: LinuxParameters
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"capabilities": {
									// Property: Capabilities
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"add": {
												// Property: Add
												Type:     types.ListType{ElemType: types.StringType},
												Optional: true,
											},
											"drop": {
												// Property: Drop
												Type:     types.ListType{ElemType: types.StringType},
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"devices": {
									// Property: Devices
									Attributes: schema.ListNestedAttributes(
										map[string]schema.Attribute{
											"container_path": {
												// Property: ContainerPath
												Type:     types.StringType,
												Optional: true,
											},
											"host_path": {
												// Property: HostPath
												Type:     types.StringType,
												Optional: true,
											},
											"permissions": {
												// Property: Permissions
												// Ordered set.
												Type:     providertypes.OrderedSetType{types.ListType{ElemType: types.StringType}},
												Optional: true,
											},
										},
										schema.ListNestedAttributesOptions{},
									),
									Optional: true,
								},
								"init_process_enabled": {
									// Property: InitProcessEnabled
									Type:     types.BoolType,
									Optional: true,
								},
								"max_swap": {
									// Property: MaxSwap
									Type:     types.NumberType,
									Optional: true,
								},
								"shared_memory_size": {
									// Property: SharedMemorySize
									Type:     types.NumberType,
									Optional: true,
								},
								"swappiness": {
									// Property: Swappiness
									Type:     types.NumberType,
									Optional: true,
								},
								"tmpfs": {
									// Property: Tmpfs
									Attributes: schema.ListNestedAttributes(
										map[string]schema.Attribute{
											"container_path": {
												// Property: ContainerPath
												Type:     types.StringType,
												Optional: true,
											},
											"mount_options": {
												// Property: MountOptions
												Type:     types.ListType{ElemType: types.StringType},
												Optional: true,
											},
											"size": {
												// Property: Size
												Type:     types.NumberType,
												Required: true,
											},
										},
										schema.ListNestedAttributesOptions{},
									),
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"log_configuration": {
						// Property: LogConfiguration
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"log_driver": {
									// Property: LogDriver
									Type:     types.StringType,
									Required: true,
								},
								"options": {
									// Property: Options
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Optional: true,
								},
								"secret_options": {
									// Property: SecretOptions
									Attributes: schema.ListNestedAttributes(
										map[string]schema.Attribute{
											"name": {
												// Property: Name
												Type:     types.StringType,
												Required: true,
											},
											"value_from": {
												// Property: ValueFrom
												Type:     types.StringType,
												Required: true,
											},
										},
										schema.ListNestedAttributesOptions{},
									),
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"memory": {
						// Property: Memory
						Description: "The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"memory_reservation": {
						// Property: MemoryReservation
						Type:     types.NumberType,
						Optional: true,
					},
					"mount_points": {
						// Property: MountPoints
						// Ordered set.
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"container_path": {
									// Property: ContainerPath
									Type:     types.StringType,
									Optional: true,
								},
								"read_only": {
									// Property: ReadOnly
									Type:     types.BoolType,
									Optional: true,
								},
								"source_volume": {
									// Property: SourceVolume
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"name": {
						// Property: Name
						Description: "The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed",
						Type:        types.StringType,
						Optional:    true,
					},
					"port_mappings": {
						// Property: PortMappings
						Description: "Port mappings allow containers to access ports on the host container instance to send or receive traffic.",
						// Ordered set.
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"container_port": {
									// Property: ContainerPort
									Type:     types.NumberType,
									Optional: true,
								},
								"host_port": {
									// Property: HostPort
									Type:     types.NumberType,
									Optional: true,
								},
								"protocol": {
									// Property: Protocol
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"privileged": {
						// Property: Privileged
						Type:     types.BoolType,
						Optional: true,
					},
					"pseudo_terminal": {
						// Property: PseudoTerminal
						Type:     types.BoolType,
						Optional: true,
					},
					"readonly_root_filesystem": {
						// Property: ReadonlyRootFilesystem
						Type:     types.BoolType,
						Optional: true,
					},
					"repository_credentials": {
						// Property: RepositoryCredentials
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"credentials_parameter": {
									// Property: CredentialsParameter
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"resource_requirements": {
						// Property: ResourceRequirements
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"type": {
									// Property: Type
									Type:     types.StringType,
									Required: true,
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"secrets": {
						// Property: Secrets
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"name": {
									// Property: Name
									Type:     types.StringType,
									Required: true,
								},
								"value_from": {
									// Property: ValueFrom
									Type:     types.StringType,
									Required: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"start_timeout": {
						// Property: StartTimeout
						Type:     types.NumberType,
						Optional: true,
					},
					"stop_timeout": {
						// Property: StopTimeout
						Type:     types.NumberType,
						Optional: true,
					},
					"system_controls": {
						// Property: SystemControls
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"namespace": {
									// Property: Namespace
									Type:     types.StringType,
									Optional: true,
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"ulimits": {
						// Property: Ulimits
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"hard_limit": {
									// Property: HardLimit
									Type:     types.NumberType,
									Required: true,
								},
								"name": {
									// Property: Name
									Type:     types.StringType,
									Required: true,
								},
								"soft_limit": {
									// Property: SoftLimit
									Type:     types.NumberType,
									Required: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"user": {
						// Property: User
						Type:     types.StringType,
						Optional: true,
					},
					"volumes_from": {
						// Property: VolumesFrom
						// Ordered set.
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"read_only": {
									// Property: ReadOnly
									Type:     types.BoolType,
									Optional: true,
								},
								"source_container": {
									// Property: SourceContainer
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"working_directory": {
						// Property: WorkingDirectory
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// ContainerDefinitions is a force-new attribute.
		},
		"cpu": {
			// Property: Cpu
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// Cpu is a force-new attribute.
		},
		"ephemeral_storage": {
			// Property: EphemeralStorage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "SizeInGiB": {
			//       "type": "integer"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"size_in_gi_b": {
						// Property: SizeInGiB
						Type:     types.NumberType,
						Optional: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// EphemeralStorage is a force-new attribute.
		},
		"execution_role_arn": {
			// Property: ExecutionRoleArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// ExecutionRoleArn is a force-new attribute.
		},
		"family": {
			// Property: Family
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// Family is a force-new attribute.
		},
		"inference_accelerators": {
			// Property: InferenceAccelerators
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "DeviceName": {
			//         "type": "string"
			//       },
			//       "DeviceType": {
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"device_name": {
						// Property: DeviceName
						Type:     types.StringType,
						Optional: true,
					},
					"device_type": {
						// Property: DeviceType
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// InferenceAccelerators is a force-new attribute.
		},
		"ipc_mode": {
			// Property: IpcMode
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// IpcMode is a force-new attribute.
		},
		"memory": {
			// Property: Memory
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// Memory is a force-new attribute.
		},
		"network_mode": {
			// Property: NetworkMode
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// NetworkMode is a force-new attribute.
		},
		"pid_mode": {
			// Property: PidMode
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// PidMode is a force-new attribute.
		},
		"placement_constraints": {
			// Property: PlacementConstraints
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Expression": {
			//         "type": "string"
			//       },
			//       "Type": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Type"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"expression": {
						// Property: Expression
						Type:     types.StringType,
						Optional: true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// PlacementConstraints is a force-new attribute.
		},
		"proxy_configuration": {
			// Property: ProxyConfiguration
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "ContainerName": {
			//       "type": "string"
			//     },
			//     "ProxyConfigurationProperties": {
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Name": {
			//             "type": "string"
			//           },
			//           "Value": {
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "type": "array",
			//       "uniqueItems": true
			//     },
			//     "Type": {
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "ContainerName"
			//   ],
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"container_name": {
						// Property: ContainerName
						Type:     types.StringType,
						Required: true,
					},
					"proxy_configuration_properties": {
						// Property: ProxyConfigurationProperties
						// Ordered set.
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"name": {
									// Property: Name
									Type:     types.StringType,
									Optional: true,
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// ProxyConfiguration is a force-new attribute.
		},
		"requires_compatibilities": {
			// Property: RequiresCompatibilities
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Type:     providertypes.OrderedSetType{types.ListType{ElemType: types.StringType}},
			Optional: true,
			Computed: true,
			// RequiresCompatibilities is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Optional: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"task_definition_arn": {
			// Property: TaskDefinitionArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) of the Amazon ECS task definition",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) of the Amazon ECS task definition",
			Type:        types.StringType,
			Computed:    true,
		},
		"task_role_arn": {
			// Property: TaskRoleArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// TaskRoleArn is a force-new attribute.
		},
		"volumes": {
			// Property: Volumes
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "DockerVolumeConfiguration": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Autoprovision": {
			//             "type": "boolean"
			//           },
			//           "Driver": {
			//             "type": "string"
			//           },
			//           "DriverOpts": {
			//             "additionalProperties": false,
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Labels": {
			//             "additionalProperties": false,
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Scope": {
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "EFSVolumeConfiguration": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "AuthorizationConfig": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "AccessPointId": {
			//                 "type": "string"
			//               },
			//               "IAM": {
			//                 "enum": [
			//                   "ENABLED",
			//                   "DISABLED"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "FilesystemId": {
			//             "type": "string"
			//           },
			//           "RootDirectory": {
			//             "type": "string"
			//           },
			//           "TransitEncryption": {
			//             "enum": [
			//               "ENABLED",
			//               "DISABLED"
			//             ],
			//             "type": "string"
			//           },
			//           "TransitEncryptionPort": {
			//             "type": "integer"
			//           }
			//         },
			//         "required": [
			//           "FilesystemId"
			//         ],
			//         "type": "object"
			//       },
			//       "Host": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "SourcePath": {
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "Name": {
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"docker_volume_configuration": {
						// Property: DockerVolumeConfiguration
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"autoprovision": {
									// Property: Autoprovision
									Type:     types.BoolType,
									Optional: true,
								},
								"driver": {
									// Property: Driver
									Type:     types.StringType,
									Optional: true,
								},
								"driver_opts": {
									// Property: DriverOpts
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Optional: true,
								},
								"labels": {
									// Property: Labels
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Optional: true,
								},
								"scope": {
									// Property: Scope
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"efs_volume_configuration": {
						// Property: EFSVolumeConfiguration
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"authorization_config": {
									// Property: AuthorizationConfig
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"access_point_id": {
												// Property: AccessPointId
												Type:     types.StringType,
												Optional: true,
											},
											"iam": {
												// Property: IAM
												Type:     types.StringType,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"filesystem_id": {
									// Property: FilesystemId
									Type:     types.StringType,
									Required: true,
								},
								"root_directory": {
									// Property: RootDirectory
									Type:     types.StringType,
									Optional: true,
								},
								"transit_encryption": {
									// Property: TransitEncryption
									Type:     types.StringType,
									Optional: true,
								},
								"transit_encryption_port": {
									// Property: TransitEncryptionPort
									Type:     types.NumberType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"host": {
						// Property: Host
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"source_path": {
									// Property: SourcePath
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"name": {
						// Property: Name
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// Volumes is a force-new attribute.
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Schema describing various properties for ECS TaskDefinition",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECS::TaskDefinition").WithTerraformTypeName("awscc_ecs_task_definition").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_ecs_task_definition", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
