// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_ecs_service", service)
}

// service returns the Terraform aws_ecs_service resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::ECS::Service resource type.
func service(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"capacity_provider_strategy": {
			// Property: CapacityProviderStrategy
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Base": {
			           "type": "integer"
			         },
			         "CapacityProvider": {
			           "type": "string"
			         },
			         "Weight": {
			           "type": "integer"
			         }
			       },
			       "$ref": "#/definitions/CapacityProviderStrategyItem",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"base": {
						// Property: Base
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
					"capacity_provider": {
						// Property: CapacityProvider
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"weight": {
						// Property: Weight
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"cluster": {
			// Property: Cluster
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// Cluster is a force-new attribute.
		},
		"deployment_configuration": {
			// Property: DeploymentConfiguration
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "DeploymentCircuitBreaker": {
			         "additionalProperties": false,
			         "properties": {
			           "Enable": {
			             "type": "boolean"
			           },
			           "Rollback": {
			             "type": "boolean"
			           }
			         },
			         "$ref": "#/definitions/DeploymentCircuitBreaker",
			         "required": [
			           "Enable",
			           "Rollback"
			         ],
			         "type": "object"
			       },
			       "MaximumPercent": {
			         "type": "integer"
			       },
			       "MinimumHealthyPercent": {
			         "type": "integer"
			       }
			     },
			     "$ref": "#/definitions/DeploymentConfiguration",
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"deployment_circuit_breaker": {
						// Property: DeploymentCircuitBreaker
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "Enable": {
						         "type": "boolean"
						       },
						       "Rollback": {
						         "type": "boolean"
						       }
						     },
						     "$ref": "#/definitions/DeploymentCircuitBreaker",
						     "required": [
						       "Enable",
						       "Rollback"
						     ],
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"enable": {
									// Property: Enable
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Required: true,
								},
								"rollback": {
									// Property: Rollback
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"maximum_percent": {
						// Property: MaximumPercent
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
					"minimum_healthy_percent": {
						// Property: MinimumHealthyPercent
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"deployment_controller": {
			// Property: DeploymentController
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "Type": {
			         "enum": [
			           "CODE_DEPLOY",
			           "ECS",
			           "EXTERNAL"
			         ],
			         "type": "string"
			       }
			     },
			     "$ref": "#/definitions/DeploymentController",
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"type": {
						// Property: Type
						// CloudFormation resource type schema:
						/*
						   {
						     "enum": [
						       "CODE_DEPLOY",
						       "ECS",
						       "EXTERNAL"
						     ],
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// DeploymentController is a force-new attribute.
		},
		"desired_count": {
			// Property: DesiredCount
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "integer"
			   }
			*/
			Type:     types.NumberType,
			Optional: true,
		},
		"enable_ecs_managed_tags": {
			// Property: EnableECSManagedTags
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "boolean"
			   }
			*/
			Type:     types.BoolType,
			Optional: true,
			Computed: true,
			// EnableECSManagedTags is a force-new attribute.
		},
		"enable_execute_command": {
			// Property: EnableExecuteCommand
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "boolean"
			   }
			*/
			Type:     types.BoolType,
			Optional: true,
		},
		"health_check_grace_period_seconds": {
			// Property: HealthCheckGracePeriodSeconds
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "integer"
			   }
			*/
			Type:     types.NumberType,
			Optional: true,
		},
		"launch_type": {
			// Property: LaunchType
			// CloudFormation resource type schema:
			/*
			   {
			     "enum": [
			       "EC2",
			       "FARGATE",
			       "EXTERNAL"
			     ],
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// LaunchType is a force-new attribute.
		},
		"load_balancers": {
			// Property: LoadBalancers
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "ContainerName": {
			           "type": "string"
			         },
			         "ContainerPort": {
			           "type": "integer"
			         },
			         "LoadBalancerName": {
			           "type": "string"
			         },
			         "TargetGroupArn": {
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/LoadBalancer",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"container_name": {
						// Property: ContainerName
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"container_port": {
						// Property: ContainerPort
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
					"load_balancer_name": {
						// Property: LoadBalancerName
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"target_group_arn": {
						// Property: TargetGroupArn
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// LoadBalancers is a force-new attribute.
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"network_configuration": {
			// Property: NetworkConfiguration
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "AwsvpcConfiguration": {
			         "additionalProperties": false,
			         "properties": {
			           "AssignPublicIp": {
			             "enum": [
			               "DISABLED",
			               "ENABLED"
			             ],
			             "type": "string"
			           },
			           "SecurityGroups": {
			             "items": {
			               "type": "string"
			             },
			             "type": "array"
			           },
			           "Subnets": {
			             "items": {
			               "type": "string"
			             },
			             "type": "array"
			           }
			         },
			         "$ref": "#/definitions/AwsVpcConfiguration",
			         "type": "object"
			       }
			     },
			     "$ref": "#/definitions/NetworkConfiguration",
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"awsvpc_configuration": {
						// Property: AwsvpcConfiguration
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "AssignPublicIp": {
						         "enum": [
						           "DISABLED",
						           "ENABLED"
						         ],
						         "type": "string"
						       },
						       "SecurityGroups": {
						         "items": {
						           "type": "string"
						         },
						         "type": "array"
						       },
						       "Subnets": {
						         "items": {
						           "type": "string"
						         },
						         "type": "array"
						       }
						     },
						     "$ref": "#/definitions/AwsVpcConfiguration",
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"assign_public_ip": {
									// Property: AssignPublicIp
									// CloudFormation resource type schema:
									/*
									   {
									     "enum": [
									       "DISABLED",
									       "ENABLED"
									     ],
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"security_groups": {
									// Property: SecurityGroups
									// CloudFormation resource type schema:
									/*
									   {
									     "items": {
									       "type": "string"
									     },
									     "type": "array"
									   }
									*/
									Type:     types.ListType{ElemType: types.StringType},
									Optional: true,
								},
								"subnets": {
									// Property: Subnets
									// CloudFormation resource type schema:
									/*
									   {
									     "items": {
									       "type": "string"
									     },
									     "type": "array"
									   }
									*/
									Type:     types.ListType{ElemType: types.StringType},
									Optional: true,
								},
							},
						),
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"placement_constraints": {
			// Property: PlacementConstraints
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Expression": {
			           "type": "string"
			         },
			         "Type": {
			           "enum": [
			             "distinctInstance",
			             "memberOf"
			           ],
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/PlacementConstraint",
			       "required": [
			         "Type"
			       ],
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"expression": {
						// Property: Expression
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"type": {
						// Property: Type
						// CloudFormation resource type schema:
						/*
						   {
						     "enum": [
						       "distinctInstance",
						       "memberOf"
						     ],
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// PlacementConstraints is a force-new attribute.
		},
		"placement_strategies": {
			// Property: PlacementStrategies
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Field": {
			           "type": "string"
			         },
			         "Type": {
			           "enum": [
			             "binpack",
			             "random",
			             "spread"
			           ],
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/PlacementStrategy",
			       "required": [
			         "Type"
			       ],
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"field": {
						// Property: Field
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"type": {
						// Property: Type
						// CloudFormation resource type schema:
						/*
						   {
						     "enum": [
						       "binpack",
						       "random",
						       "spread"
						     ],
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// PlacementStrategies is a force-new attribute.
		},
		"platform_version": {
			// Property: PlatformVersion
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"propagate_tags": {
			// Property: PropagateTags
			// CloudFormation resource type schema:
			/*
			   {
			     "enum": [
			       "SERVICE",
			       "TASK_DEFINITION"
			     ],
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// PropagateTags is a force-new attribute.
		},
		"role": {
			// Property: Role
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// Role is a force-new attribute.
		},
		"scheduling_strategy": {
			// Property: SchedulingStrategy
			// CloudFormation resource type schema:
			/*
			   {
			     "enum": [
			       "DAEMON",
			       "REPLICA"
			     ],
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// SchedulingStrategy is a force-new attribute.
		},
		"service_arn": {
			// Property: ServiceArn
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"service_name": {
			// Property: ServiceName
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// ServiceName is a force-new attribute.
		},
		"service_registries": {
			// Property: ServiceRegistries
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "ContainerName": {
			           "type": "string"
			         },
			         "ContainerPort": {
			           "type": "integer"
			         },
			         "Port": {
			           "type": "integer"
			         },
			         "RegistryArn": {
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/ServiceRegistry",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"container_name": {
						// Property: ContainerName
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"container_port": {
						// Property: ContainerPort
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
					"port": {
						// Property: Port
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
					"registry_arn": {
						// Property: RegistryArn
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
			Computed: true,
			// ServiceRegistries is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Key": {
			           "type": "string"
			         },
			         "Value": {
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"task_definition": {
			// Property: TaskDefinition
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::ECS::Service",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECS::Service").WithTerraformTypeName("aws_ecs_service").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(180).WithDeleteTimeoutInMinutes(30)

	opts = opts.WithUpdateTimeoutInMinutes(180)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_ecs_service", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
