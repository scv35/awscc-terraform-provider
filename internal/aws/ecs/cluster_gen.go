// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_ecs_cluster", cluster)
}

// cluster returns the Terraform aws_ecs_cluster resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::ECS::Cluster resource type.
func cluster(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster.",
			     "type": "string"
			   }
			*/
			Description: "The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster.",
			Type:        types.StringType,
			Computed:    true,
		},
		"capacity_providers": {
			// Property: CapacityProviders
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "type": "string"
			     },
			     "type": "array"
			   }
			*/
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
		},
		"cluster_name": {
			// Property: ClusterName
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.",
			     "type": "string"
			   }
			*/
			Description: "A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			// ClusterName is a force-new attribute.
		},
		"cluster_settings": {
			// Property: ClusterSettings
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "description": "The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.",
			       "properties": {
			         "Name": {
			           "type": "string"
			         },
			         "Value": {
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/ClusterSettings",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"configuration": {
			// Property: Configuration
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The configurations to be set at cluster level.",
			     "properties": {
			       "ExecuteCommandConfiguration": {
			         "description": "The configuration for ExecuteCommand.",
			         "properties": {
			           "KmsKeyId": {
			             "type": "string"
			           },
			           "LogConfiguration": {
			             "description": "The session logging configuration for ExecuteCommand.",
			             "properties": {
			               "CloudWatchEncryptionEnabled": {
			                 "type": "boolean"
			               },
			               "CloudWatchLogGroupName": {
			                 "type": "string"
			               },
			               "S3BucketName": {
			                 "type": "string"
			               },
			               "S3EncryptionEnabled": {
			                 "type": "boolean"
			               },
			               "S3KeyPrefix": {
			                 "type": "string"
			               }
			             },
			             "$ref": "#/definitions/ExecuteCommandLogConfiguration",
			             "type": "object"
			           },
			           "Logging": {
			             "type": "string"
			           }
			         },
			         "$ref": "#/definitions/ExecuteCommandConfiguration",
			         "type": "object"
			       }
			     },
			     "$ref": "#/definitions/ClusterConfiguration",
			     "type": "object"
			   }
			*/
			Description: "The configurations to be set at cluster level.",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"execute_command_configuration": {
						// Property: ExecuteCommandConfiguration
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The configuration for ExecuteCommand.",
						     "properties": {
						       "KmsKeyId": {
						         "type": "string"
						       },
						       "LogConfiguration": {
						         "description": "The session logging configuration for ExecuteCommand.",
						         "properties": {
						           "CloudWatchEncryptionEnabled": {
						             "type": "boolean"
						           },
						           "CloudWatchLogGroupName": {
						             "type": "string"
						           },
						           "S3BucketName": {
						             "type": "string"
						           },
						           "S3EncryptionEnabled": {
						             "type": "boolean"
						           },
						           "S3KeyPrefix": {
						             "type": "string"
						           }
						         },
						         "$ref": "#/definitions/ExecuteCommandLogConfiguration",
						         "type": "object"
						       },
						       "Logging": {
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/ExecuteCommandConfiguration",
						     "type": "object"
						   }
						*/
						Description: "The configuration for ExecuteCommand.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"kms_key_id": {
									// Property: KmsKeyId
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"log_configuration": {
									// Property: LogConfiguration
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The session logging configuration for ExecuteCommand.",
									     "properties": {
									       "CloudWatchEncryptionEnabled": {
									         "type": "boolean"
									       },
									       "CloudWatchLogGroupName": {
									         "type": "string"
									       },
									       "S3BucketName": {
									         "type": "string"
									       },
									       "S3EncryptionEnabled": {
									         "type": "boolean"
									       },
									       "S3KeyPrefix": {
									         "type": "string"
									       }
									     },
									     "$ref": "#/definitions/ExecuteCommandLogConfiguration",
									     "type": "object"
									   }
									*/
									Description: "The session logging configuration for ExecuteCommand.",
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"cloud_watch_encryption_enabled": {
												// Property: CloudWatchEncryptionEnabled
												// CloudFormation resource type schema:
												/*
												   {
												     "type": "boolean"
												   }
												*/
												Type:     types.BoolType,
												Optional: true,
											},
											"cloud_watch_log_group_name": {
												// Property: CloudWatchLogGroupName
												// CloudFormation resource type schema:
												/*
												   {
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Optional: true,
											},
											"s3_bucket_name": {
												// Property: S3BucketName
												// CloudFormation resource type schema:
												/*
												   {
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Optional: true,
											},
											"s3_encryption_enabled": {
												// Property: S3EncryptionEnabled
												// CloudFormation resource type schema:
												/*
												   {
												     "type": "boolean"
												   }
												*/
												Type:     types.BoolType,
												Optional: true,
											},
											"s3_key_prefix": {
												// Property: S3KeyPrefix
												// CloudFormation resource type schema:
												/*
												   {
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"logging": {
									// Property: Logging
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"default_capacity_provider_strategy": {
			// Property: DefaultCapacityProviderStrategy
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "description": "A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.",
			       "properties": {
			         "Base": {
			           "type": "integer"
			         },
			         "CapacityProvider": {
			           "type": "string"
			         },
			         "Weight": {
			           "type": "integer"
			         }
			       },
			       "$ref": "#/definitions/CapacityProviderStrategyItem",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"base": {
						// Property: Base
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
					"capacity_provider": {
						// Property: CapacityProvider
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"weight": {
						// Property: Weight
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "description": "The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.",
			       "properties": {
			         "Key": {
			           "type": "string"
			         },
			         "Value": {
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "type": "object"
			     },
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Create an Elastic Container Service (ECS) cluster.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECS::Cluster").WithTerraformTypeName("aws_ecs_cluster").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_ecs_cluster", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
