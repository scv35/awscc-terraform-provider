// Code generated by generators/resource/main.go; DO NOT EDIT.

package amplify

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_amplify_branch", branchResourceType)
}

// branchResourceType returns the Terraform aws_amplify_branch resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Amplify::Branch resource type.
func branchResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"app_id": {
			// Property: AppId
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 20,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Required: true,
			// AppId is a force-new attribute.
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 1000,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"basic_auth_config": {
			// Property: BasicAuthConfig
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "EnableBasicAuth": {
			         "type": "boolean"
			       },
			       "Password": {
			         "maxLength": 255,
			         "minLength": 1,
			         "type": "string"
			       },
			       "Username": {
			         "maxLength": 255,
			         "minLength": 1,
			         "type": "string"
			       }
			     },
			     "$ref": "#/definitions/BasicAuthConfig",
			     "required": [
			       "Username",
			       "Password"
			     ],
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"enable_basic_auth": {
						// Property: EnableBasicAuth
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "boolean"
						   }
						*/
						Type:     types.BoolType,
						Optional: true,
					},
					"password": {
						// Property: Password
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 255,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
					"username": {
						// Property: Username
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 255,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			// BasicAuthConfig is a write-only attribute.
		},
		"branch_name": {
			// Property: BranchName
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 255,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Required: true,
			// BranchName is a force-new attribute.
		},
		"build_spec": {
			// Property: BuildSpec
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 25000,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 1000,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"enable_auto_build": {
			// Property: EnableAutoBuild
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "boolean"
			   }
			*/
			Type:     types.BoolType,
			Optional: true,
		},
		"enable_performance_mode": {
			// Property: EnablePerformanceMode
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "boolean"
			   }
			*/
			Type:     types.BoolType,
			Optional: true,
		},
		"enable_pull_request_preview": {
			// Property: EnablePullRequestPreview
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "boolean"
			   }
			*/
			Type:     types.BoolType,
			Optional: true,
		},
		"environment_variables": {
			// Property: EnvironmentVariables
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Name": {
			           "maxLength": 255,
			           "pattern": "",
			           "type": "string"
			         },
			         "Value": {
			           "maxLength": 5500,
			           "pattern": "",
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/EnvironmentVariable",
			       "required": [
			         "Name",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "type": "array",
			     "uniqueItems": false
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 255,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 5500,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"pull_request_environment_name": {
			// Property: PullRequestEnvironmentName
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 20,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"stage": {
			// Property: Stage
			// CloudFormation resource type schema:
			/*
			   {
			     "enum": [
			       "EXPERIMENTAL",
			       "BETA",
			       "PULL_REQUEST",
			       "PRODUCTION",
			       "DEVELOPMENT"
			     ],
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "insertionOrder": false,
			       "properties": {
			         "Key": {
			           "maxLength": 128,
			           "minLength": 1,
			           "pattern": "",
			           "type": "string"
			         },
			         "Value": {
			           "maxLength": 256,
			           "minLength": 0,
			           "pattern": "",
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "type": "array",
			     "uniqueItems": false
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 128,
						     "minLength": 1,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 256,
						     "minLength": 0,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "The AWS::Amplify::Branch resource creates a new branch within an app.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Amplify::Branch").WithTerraformTypeName("aws_amplify_branch").WithTerraformSchema(schema)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/BasicAuthConfig",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_amplify_branch", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
