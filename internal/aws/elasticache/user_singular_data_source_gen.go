// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package elasticache

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_elasticache_user", userDataSource)
}

// userDataSource returns the Terraform awscc_elasticache_user data source.
// This Terraform data source corresponds to the CloudFormation AWS::ElastiCache::User resource.
func userDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessString
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Access permissions string used for this user account.",
		//	  "type": "string"
		//	}
		"access_string": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Access permissions string used for this user account.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the user account.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the user account.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AuthenticationMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Passwords": {
		//	      "$comment": "List of passwords.",
		//	      "description": "Passwords used for this user account. You can create up to two passwords for each user.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Type": {
		//	      "description": "Authentication Type",
		//	      "enum": [
		//	        "password",
		//	        "no-password-required",
		//	        "iam"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"authentication_mode": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Passwords
				"passwords": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "Passwords used for this user account. You can create up to two passwords for each user.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Authentication Type",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Engine
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Must be redis.",
		//	  "enum": [
		//	    "redis"
		//	  ],
		//	  "type": "string"
		//	}
		"engine": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Must be redis.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NoPasswordRequired
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates a password is not required for this user account.",
		//	  "type": "boolean"
		//	}
		"no_password_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates a password is not required for this user account.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Passwords
		// CloudFormation resource type schema:
		//
		//	{
		//	  "$comment": "List of passwords.",
		//	  "description": "Passwords used for this user account. You can create up to two passwords for each user.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"passwords": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Passwords used for this user account. You can create up to two passwords for each user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates the user status. Can be \"active\", \"modifying\" or \"deleting\".",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates the user status. Can be \"active\", \"modifying\" or \"deleting\".",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the user.",
		//	  "pattern": "[a-z][a-z0-9\\\\-]*",
		//	  "type": "string"
		//	}
		"user_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The username of the user.",
		//	  "type": "string"
		//	}
		"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The username of the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ElastiCache::User",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ElastiCache::User").WithTerraformTypeName("awscc_elasticache_user")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_string":        "AccessString",
		"arn":                  "Arn",
		"authentication_mode":  "AuthenticationMode",
		"engine":               "Engine",
		"no_password_required": "NoPasswordRequired",
		"passwords":            "Passwords",
		"status":               "Status",
		"type":                 "Type",
		"user_id":              "UserId",
		"user_name":            "UserName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
