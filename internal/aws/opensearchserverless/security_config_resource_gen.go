// Code generated by generators/resource/main.go; DO NOT EDIT.

package opensearchserverless

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_opensearchserverless_security_config", securityConfigResource)
}

// securityConfigResource returns the Terraform awscc_opensearchserverless_security_config resource.
// This Terraform resource corresponds to the CloudFormation AWS::OpenSearchServerless::SecurityConfig resource.
func securityConfigResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Security config description",
			//	  "maxLength": 1000,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "Security config description",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 1000),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The identifier of the security config",
			//	  "maxLength": 100,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "The identifier of the security config",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The friendly name of the security config",
			//	  "maxLength": 32,
			//	  "minLength": 3,
			//	  "pattern": "^[a-z][a-z0-9-]{2,31}$",
			//	  "type": "string"
			//	}
			Description: "The friendly name of the security config",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(3, 32),
				validate.StringMatch(regexp.MustCompile("^[a-z][a-z0-9-]{2,31}$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
			// Name is a write-only property.
		},
		"saml_options": {
			// Property: SamlOptions
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Describes saml options in form of key value map",
			//	  "properties": {
			//	    "GroupAttribute": {
			//	      "description": "Group attribute for this saml integration",
			//	      "maxLength": 2048,
			//	      "minLength": 1,
			//	      "pattern": "[\\w+=,.@-]+",
			//	      "type": "string"
			//	    },
			//	    "Metadata": {
			//	      "description": "The XML saml provider metadata document that you want to use",
			//	      "maxLength": 20480,
			//	      "minLength": 1,
			//	      "pattern": "",
			//	      "type": "string"
			//	    },
			//	    "SessionTimeout": {
			//	      "description": "Defines the session timeout in minutes",
			//	      "type": "integer"
			//	    },
			//	    "UserAttribute": {
			//	      "description": "Custom attribute for this saml integration",
			//	      "maxLength": 2048,
			//	      "minLength": 1,
			//	      "pattern": "[\\w+=,.@-]+",
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "Metadata"
			//	  ],
			//	  "type": "object"
			//	}
			Description: "Describes saml options in form of key value map",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"group_attribute": {
						// Property: GroupAttribute
						Description: "Group attribute for this saml integration",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 2048),
							validate.StringMatch(regexp.MustCompile("[\\w+=,.@-]+"), ""),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"metadata": {
						// Property: Metadata
						Description: "The XML saml provider metadata document that you want to use",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 20480),
						},
					},
					"session_timeout": {
						// Property: SessionTimeout
						Description: "Defines the session timeout in minutes",
						Type:        types.Int64Type,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"user_attribute": {
						// Property: UserAttribute
						Description: "Custom attribute for this saml integration",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 2048),
							validate.StringMatch(regexp.MustCompile("[\\w+=,.@-]+"), ""),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"type": {
			// Property: Type
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Config type for security config",
			//	  "enum": [
			//	    "saml"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "Config type for security config",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"saml",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
	}

	schema := tfsdk.Schema{
		Description: "Amazon OpenSearchServerless security config resource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::OpenSearchServerless::SecurityConfig").WithTerraformTypeName("awscc_opensearchserverless_security_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"description":     "Description",
		"group_attribute": "GroupAttribute",
		"id":              "Id",
		"metadata":        "Metadata",
		"name":            "Name",
		"saml_options":    "SamlOptions",
		"session_timeout": "SessionTimeout",
		"type":            "Type",
		"user_attribute":  "UserAttribute",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Name",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
