// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apprunner

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apprunner_vpc_ingress_connection", vpcIngressConnectionDataSource)
}

// vpcIngressConnectionDataSource returns the Terraform awscc_apprunner_vpc_ingress_connection data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppRunner::VpcIngressConnection resource.
func vpcIngressConnectionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"domain_name": {
			// Property: DomainName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Domain name associated with the VPC Ingress Connection.",
			//	  "maxLength": 255,
			//	  "minLength": 1,
			//	  "pattern": "[A-Za-z0-9*.-]{1,255}",
			//	  "type": "string"
			//	}
			Description: "The Domain name associated with the VPC Ingress Connection.",
			Type:        types.StringType,
			Computed:    true,
		},
		"ingress_vpc_configuration": {
			// Property: IngressVpcConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "The configuration of customer?s VPC and related VPC endpoint",
			//	  "properties": {
			//	    "VpcEndpointId": {
			//	      "description": "The ID of the VPC endpoint that your App Runner service connects to.",
			//	      "type": "string"
			//	    },
			//	    "VpcId": {
			//	      "description": "The ID of the VPC that the VPC endpoint is used in.",
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "VpcId",
			//	    "VpcEndpointId"
			//	  ],
			//	  "type": "object"
			//	}
			Description: "The configuration of customer?s VPC and related VPC endpoint",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"vpc_endpoint_id": {
						// Property: VpcEndpointId
						Description: "The ID of the VPC endpoint that your App Runner service connects to.",
						Type:        types.StringType,
						Computed:    true,
					},
					"vpc_id": {
						// Property: VpcId
						Description: "The ID of the VPC that the VPC endpoint is used in.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"service_arn": {
			// Property: ServiceArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Amazon Resource Name (ARN) of the service.",
			//	  "maxLength": 1011,
			//	  "minLength": 1,
			//	  "pattern": "",
			//	  "type": "string"
			//	}
			Description: "The Amazon Resource Name (ARN) of the service.",
			Type:        types.StringType,
			Computed:    true,
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The current status of the VpcIngressConnection.",
			//	  "enum": [
			//	    "AVAILABLE",
			//	    "PENDING_CREATION",
			//	    "PENDING_UPDATE",
			//	    "PENDING_DELETION",
			//	    "FAILED_CREATION",
			//	    "FAILED_UPDATE",
			//	    "FAILED_DELETION",
			//	    "DELETED"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "The current status of the VpcIngressConnection.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "type": "object"
			//	  },
			//	  "type": "array"
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"vpc_ingress_connection_arn": {
			// Property: VpcIngressConnectionArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Amazon Resource Name (ARN) of the VpcIngressConnection.",
			//	  "maxLength": 1011,
			//	  "minLength": 1,
			//	  "pattern": "",
			//	  "type": "string"
			//	}
			Description: "The Amazon Resource Name (ARN) of the VpcIngressConnection.",
			Type:        types.StringType,
			Computed:    true,
		},
		"vpc_ingress_connection_name": {
			// Property: VpcIngressConnectionName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The customer-provided Vpc Ingress Connection name.",
			//	  "maxLength": 40,
			//	  "minLength": 4,
			//	  "pattern": "[A-Za-z0-9][A-Za-z0-9\\-_]{3,39}",
			//	  "type": "string"
			//	}
			Description: "The customer-provided Vpc Ingress Connection name.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::AppRunner::VpcIngressConnection",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppRunner::VpcIngressConnection").WithTerraformTypeName("awscc_apprunner_vpc_ingress_connection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"domain_name":                 "DomainName",
		"ingress_vpc_configuration":   "IngressVpcConfiguration",
		"key":                         "Key",
		"service_arn":                 "ServiceArn",
		"status":                      "Status",
		"tags":                        "Tags",
		"value":                       "Value",
		"vpc_endpoint_id":             "VpcEndpointId",
		"vpc_id":                      "VpcId",
		"vpc_ingress_connection_arn":  "VpcIngressConnectionArn",
		"vpc_ingress_connection_name": "VpcIngressConnectionName",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
