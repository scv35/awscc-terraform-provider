// Code generated by generators/resource/main.go; DO NOT EDIT.

package greengrassv2

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_greengrassv2_deployment", deploymentResource)
}

// deploymentResource returns the Terraform awscc_greengrassv2_deployment resource.
// This Terraform resource corresponds to the CloudFormation AWS::GreengrassV2::Deployment resource.
func deploymentResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"components": {
			// Property: Components
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "patternProperties": {
			//	    "": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "ComponentVersion": {
			//	          "maxLength": 64,
			//	          "minLength": 1,
			//	          "type": "string"
			//	        },
			//	        "ConfigurationUpdate": {
			//	          "additionalProperties": false,
			//	          "properties": {
			//	            "Merge": {
			//	              "maxLength": 10485760,
			//	              "minLength": 1,
			//	              "type": "string"
			//	            },
			//	            "Reset": {
			//	              "insertionOrder": false,
			//	              "items": {
			//	                "maxLength": 256,
			//	                "minLength": 0,
			//	                "type": "string"
			//	              },
			//	              "type": "array"
			//	            }
			//	          },
			//	          "type": "object"
			//	        },
			//	        "RunWith": {
			//	          "additionalProperties": false,
			//	          "properties": {
			//	            "PosixUser": {
			//	              "minLength": 1,
			//	              "type": "string"
			//	            },
			//	            "SystemResourceLimits": {
			//	              "additionalProperties": false,
			//	              "properties": {
			//	                "Cpus": {
			//	                  "minimum": 0,
			//	                  "type": "number"
			//	                },
			//	                "Memory": {
			//	                  "format": "int64",
			//	                  "maximum": 9223372036854771712,
			//	                  "minimum": 0,
			//	                  "type": "integer"
			//	                }
			//	              },
			//	              "type": "object"
			//	            },
			//	            "WindowsUser": {
			//	              "minLength": 1,
			//	              "type": "string"
			//	            }
			//	          },
			//	          "type": "object"
			//	        }
			//	      },
			//	      "type": "object"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			//
			// Pattern: ""
			Attributes: tfsdk.MapNestedAttributes(
				map[string]tfsdk.Attribute{
					"component_version": {
						// Property: ComponentVersion
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 64),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"configuration_update": {
						// Property: ConfigurationUpdate
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"merge": {
									// Property: Merge
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 10485760),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"reset": {
									// Property: Reset
									Type:     types.ListType{ElemType: types.StringType},
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.ArrayForEach(validate.StringLenBetween(0, 256)),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										Multiset(),
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"run_with": {
						// Property: RunWith
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"posix_user": {
									// Property: PosixUser
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenAtLeast(1),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"system_resource_limits": {
									// Property: SystemResourceLimits
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"cpus": {
												// Property: Cpus
												Type:     types.Float64Type,
												Optional: true,
												Computed: true,
												Validators: []tfsdk.AttributeValidator{
													validate.FloatAtLeast(0.000000),
												},
												PlanModifiers: []tfsdk.AttributePlanModifier{
													resource.UseStateForUnknown(),
												},
											},
											"memory": {
												// Property: Memory
												Type:     types.Int64Type,
												Optional: true,
												Computed: true,
												Validators: []tfsdk.AttributeValidator{
													validate.IntBetween(0, 9223372036854771712),
												},
												PlanModifiers: []tfsdk.AttributePlanModifier{
													resource.UseStateForUnknown(),
												},
											},
										},
									),
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"windows_user": {
									// Property: WindowsUser
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenAtLeast(1),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"deployment_id": {
			// Property: DeploymentId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "pattern": ".+",
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"deployment_name": {
			// Property: DeploymentName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "maxLength": 256,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 256),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"deployment_policies": {
			// Property: DeploymentPolicies
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "ComponentUpdatePolicy": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "Action": {
			//	          "enum": [
			//	            "NOTIFY_COMPONENTS",
			//	            "SKIP_NOTIFY_COMPONENTS"
			//	          ],
			//	          "type": "string"
			//	        },
			//	        "TimeoutInSeconds": {
			//	          "maximum": 2147483647,
			//	          "minimum": 1,
			//	          "type": "integer"
			//	        }
			//	      },
			//	      "type": "object"
			//	    },
			//	    "ConfigurationValidationPolicy": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "TimeoutInSeconds": {
			//	          "maximum": 2147483647,
			//	          "minimum": 1,
			//	          "type": "integer"
			//	        }
			//	      },
			//	      "type": "object"
			//	    },
			//	    "FailureHandlingPolicy": {
			//	      "enum": [
			//	        "ROLLBACK",
			//	        "DO_NOTHING"
			//	      ],
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"component_update_policy": {
						// Property: ComponentUpdatePolicy
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"action": {
									// Property: Action
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NOTIFY_COMPONENTS",
											"SKIP_NOTIFY_COMPONENTS",
										}),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"timeout_in_seconds": {
									// Property: TimeoutInSeconds
									Type:     types.Int64Type,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(1, 2147483647),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"configuration_validation_policy": {
						// Property: ConfigurationValidationPolicy
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"timeout_in_seconds": {
									// Property: TimeoutInSeconds
									Type:     types.Int64Type,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(1, 2147483647),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"failure_handling_policy": {
						// Property: FailureHandlingPolicy
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"ROLLBACK",
								"DO_NOTHING",
							}),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"iot_job_configuration": {
			// Property: IotJobConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "AbortConfig": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "CriteriaList": {
			//	          "insertionOrder": false,
			//	          "items": {
			//	            "additionalProperties": false,
			//	            "properties": {
			//	              "Action": {
			//	                "enum": [
			//	                  "CANCEL"
			//	                ],
			//	                "type": "string"
			//	              },
			//	              "FailureType": {
			//	                "enum": [
			//	                  "FAILED",
			//	                  "REJECTED",
			//	                  "TIMED_OUT",
			//	                  "ALL"
			//	                ],
			//	                "type": "string"
			//	              },
			//	              "MinNumberOfExecutedThings": {
			//	                "maximum": 2147483647,
			//	                "minimum": 1,
			//	                "type": "integer"
			//	              },
			//	              "ThresholdPercentage": {
			//	                "maximum": 100,
			//	                "minimum": 0,
			//	                "type": "number"
			//	              }
			//	            },
			//	            "required": [
			//	              "FailureType",
			//	              "Action",
			//	              "ThresholdPercentage",
			//	              "MinNumberOfExecutedThings"
			//	            ],
			//	            "type": "object"
			//	          },
			//	          "minItems": 1,
			//	          "type": "array"
			//	        }
			//	      },
			//	      "required": [
			//	        "CriteriaList"
			//	      ],
			//	      "type": "object"
			//	    },
			//	    "JobExecutionsRolloutConfig": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "ExponentialRate": {
			//	          "additionalProperties": false,
			//	          "properties": {
			//	            "BaseRatePerMinute": {
			//	              "maximum": 1000,
			//	              "minimum": 1,
			//	              "type": "integer"
			//	            },
			//	            "IncrementFactor": {
			//	              "maximum": 5,
			//	              "minimum": 1,
			//	              "type": "number"
			//	            },
			//	            "RateIncreaseCriteria": {
			//	              "properties": {
			//	                "NumberOfNotifiedThings": {
			//	                  "maximum": 2147483647,
			//	                  "minimum": 1,
			//	                  "type": "integer"
			//	                },
			//	                "NumberOfSucceededThings": {
			//	                  "maximum": 2147483647,
			//	                  "minimum": 1,
			//	                  "type": "integer"
			//	                }
			//	              },
			//	              "type": "object"
			//	            }
			//	          },
			//	          "required": [
			//	            "BaseRatePerMinute",
			//	            "IncrementFactor",
			//	            "RateIncreaseCriteria"
			//	          ],
			//	          "type": "object"
			//	        },
			//	        "MaximumPerMinute": {
			//	          "maximum": 1000,
			//	          "minimum": 1,
			//	          "type": "integer"
			//	        }
			//	      },
			//	      "type": "object"
			//	    },
			//	    "TimeoutConfig": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "InProgressTimeoutInMinutes": {
			//	          "maximum": 2147483647,
			//	          "minimum": 0,
			//	          "type": "integer"
			//	        }
			//	      },
			//	      "type": "object"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"abort_config": {
						// Property: AbortConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"criteria_list": {
									// Property: CriteriaList
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"action": {
												// Property: Action
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"CANCEL",
													}),
												},
											},
											"failure_type": {
												// Property: FailureType
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"FAILED",
														"REJECTED",
														"TIMED_OUT",
														"ALL",
													}),
												},
											},
											"min_number_of_executed_things": {
												// Property: MinNumberOfExecutedThings
												Type:     types.Int64Type,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.IntBetween(1, 2147483647),
												},
											},
											"threshold_percentage": {
												// Property: ThresholdPercentage
												Type:     types.Float64Type,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.FloatBetween(0.000000, 100.000000),
												},
											},
										},
									),
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.ArrayLenAtLeast(1),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										Multiset(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"job_executions_rollout_config": {
						// Property: JobExecutionsRolloutConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"exponential_rate": {
									// Property: ExponentialRate
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"base_rate_per_minute": {
												// Property: BaseRatePerMinute
												Type:     types.Int64Type,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.IntBetween(1, 1000),
												},
											},
											"increment_factor": {
												// Property: IncrementFactor
												Type:     types.Float64Type,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.FloatBetween(1.000000, 5.000000),
												},
											},
											"rate_increase_criteria": {
												// Property: RateIncreaseCriteria
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"number_of_notified_things": {
															// Property: NumberOfNotifiedThings
															Type:     types.Int64Type,
															Optional: true,
															Computed: true,
															Validators: []tfsdk.AttributeValidator{
																validate.IntBetween(1, 2147483647),
															},
															PlanModifiers: []tfsdk.AttributePlanModifier{
																resource.UseStateForUnknown(),
															},
														},
														"number_of_succeeded_things": {
															// Property: NumberOfSucceededThings
															Type:     types.Int64Type,
															Optional: true,
															Computed: true,
															Validators: []tfsdk.AttributeValidator{
																validate.IntBetween(1, 2147483647),
															},
															PlanModifiers: []tfsdk.AttributePlanModifier{
																resource.UseStateForUnknown(),
															},
														},
													},
												),
												Required: true,
											},
										},
									),
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"maximum_per_minute": {
									// Property: MaximumPerMinute
									Type:     types.Int64Type,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(1, 1000),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"timeout_config": {
						// Property: TimeoutConfig
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"in_progress_timeout_in_minutes": {
									// Property: InProgressTimeoutInMinutes
									Type:     types.Int64Type,
									Optional: true,
									Computed: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(0, 2147483647),
									},
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "patternProperties": {
			//	    "": {
			//	      "maxLength": 256,
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			//
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"target_arn": {
			// Property: TargetArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "pattern": "arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+",
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringMatch(regexp.MustCompile("arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource for Greengrass V2 deployment.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::GreengrassV2::Deployment").WithTerraformTypeName("awscc_greengrassv2_deployment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"abort_config":                    "AbortConfig",
		"action":                          "Action",
		"base_rate_per_minute":            "BaseRatePerMinute",
		"component_update_policy":         "ComponentUpdatePolicy",
		"component_version":               "ComponentVersion",
		"components":                      "Components",
		"configuration_update":            "ConfigurationUpdate",
		"configuration_validation_policy": "ConfigurationValidationPolicy",
		"cpus":                            "Cpus",
		"criteria_list":                   "CriteriaList",
		"deployment_id":                   "DeploymentId",
		"deployment_name":                 "DeploymentName",
		"deployment_policies":             "DeploymentPolicies",
		"exponential_rate":                "ExponentialRate",
		"failure_handling_policy":         "FailureHandlingPolicy",
		"failure_type":                    "FailureType",
		"in_progress_timeout_in_minutes":  "InProgressTimeoutInMinutes",
		"increment_factor":                "IncrementFactor",
		"iot_job_configuration":           "IotJobConfiguration",
		"job_executions_rollout_config":   "JobExecutionsRolloutConfig",
		"maximum_per_minute":              "MaximumPerMinute",
		"memory":                          "Memory",
		"merge":                           "Merge",
		"min_number_of_executed_things":   "MinNumberOfExecutedThings",
		"number_of_notified_things":       "NumberOfNotifiedThings",
		"number_of_succeeded_things":      "NumberOfSucceededThings",
		"posix_user":                      "PosixUser",
		"rate_increase_criteria":          "RateIncreaseCriteria",
		"reset":                           "Reset",
		"run_with":                        "RunWith",
		"system_resource_limits":          "SystemResourceLimits",
		"tags":                            "Tags",
		"target_arn":                      "TargetArn",
		"threshold_percentage":            "ThresholdPercentage",
		"timeout_config":                  "TimeoutConfig",
		"timeout_in_seconds":              "TimeoutInSeconds",
		"windows_user":                    "WindowsUser",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
