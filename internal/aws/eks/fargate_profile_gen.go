// Code generated by generators/resource/main.go; DO NOT EDIT.

package eks

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_eks_fargate_profile", fargateProfileResourceType)
}

// fargateProfileResourceType returns the Terraform aws_eks_fargate_profile resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::EKS::FargateProfile resource type.
func fargateProfileResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"cluster_name": {
			// Property: ClusterName
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Name of the Cluster",
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Name of the Cluster",
			Type:        types.StringType,
			Required:    true,
			// ClusterName is a force-new attribute.
		},
		"fargate_profile_name": {
			// Property: FargateProfileName
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Name of FargateProfile",
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Name of FargateProfile",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			// FargateProfileName is a force-new attribute.
		},
		"pod_execution_role_arn": {
			// Property: PodExecutionRoleArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The IAM policy arn for pods",
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "The IAM policy arn for pods",
			Type:        types.StringType,
			Required:    true,
			// PodExecutionRoleArn is a force-new attribute.
		},
		"selectors": {
			// Property: Selectors
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Labels": {
			           "items": {
			             "additionalProperties": false,
			             "description": "A key-value pair to associate with a pod.",
			             "properties": {
			               "Key": {
			                 "description": "The key name of the label.",
			                 "maxLength": 127,
			                 "minLength": 1,
			                 "type": "string"
			               },
			               "Value": {
			                 "description": "The value for the label. ",
			                 "maxLength": 255,
			                 "minLength": 1,
			                 "type": "string"
			               }
			             },
			             "$ref": "#/definitions/Label",
			             "required": [
			               "Key",
			               "Value"
			             ],
			             "type": "object"
			           },
			           "type": "array"
			         },
			         "Namespace": {
			           "minLength": 1,
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Selector",
			       "required": [
			         "Namespace"
			       ],
			       "type": "object"
			     },
			     "minItems": 1,
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"labels": {
						// Property: Labels
						// CloudFormation resource type schema:
						/*
						   {
						     "items": {
						       "additionalProperties": false,
						       "description": "A key-value pair to associate with a pod.",
						       "properties": {
						         "Key": {
						           "description": "The key name of the label.",
						           "maxLength": 127,
						           "minLength": 1,
						           "type": "string"
						         },
						         "Value": {
						           "description": "The value for the label. ",
						           "maxLength": 255,
						           "minLength": 1,
						           "type": "string"
						         }
						       },
						       "$ref": "#/definitions/Label",
						       "required": [
						         "Key",
						         "Value"
						       ],
						       "type": "object"
						     },
						     "type": "array"
						   }
						*/
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"key": {
									// Property: Key
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The key name of the label.",
									     "maxLength": 127,
									     "minLength": 1,
									     "type": "string"
									   }
									*/
									Description: "The key name of the label.",
									Type:        types.StringType,
									Required:    true,
								},
								"value": {
									// Property: Value
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The value for the label. ",
									     "maxLength": 255,
									     "minLength": 1,
									     "type": "string"
									   }
									*/
									Description: "The value for the label. ",
									Type:        types.StringType,
									Required:    true,
								},
							},
							schema.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"namespace": {
						// Property: Namespace
						// CloudFormation resource type schema:
						/*
						   {
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MinItems: 1,
				},
			),
			Required: true,
			// Selectors is a force-new attribute.
		},
		"subnets": {
			// Property: Subnets
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "type": "string"
			     },
			     "type": "array"
			   }
			*/
			Type:     types.ListType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			// Subnets is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "An array of key-value pairs to apply to this resource.",
			     "items": {
			       "additionalProperties": false,
			       "description": "A key-value pair to associate with a resource.",
			       "properties": {
			         "Key": {
			           "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			           "maxLength": 127,
			           "minLength": 1,
			           "type": "string"
			         },
			         "Value": {
			           "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			           "maxLength": 255,
			           "minLength": 1,
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "type": "array",
			     "uniqueItems": true
			   }
			*/
			Description: "An array of key-value pairs to apply to this resource.",
			// Ordered set.
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						     "maxLength": 127,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Required:    true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						     "maxLength": 255,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Required:    true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Schema for AWS::EKS::FargateProfile",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::EKS::FargateProfile").WithTerraformTypeName("aws_eks_fargate_profile").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_eks_fargate_profile", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
