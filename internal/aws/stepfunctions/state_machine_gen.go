// Code generated by generators/resource/main.go; DO NOT EDIT.

package stepfunctions

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_stepfunctions_state_machine", stateMachineResourceType)
}

// stateMachineResourceType returns the Terraform aws_stepfunctions_state_machine resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::StepFunctions::StateMachine resource type.
func stateMachineResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 2048,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"definition": {
			// Property: Definition
			// CloudFormation resource type schema:
			// {
			//   "type": "object"
			// }
			Type:     types.MapType{ElemType: types.StringType},
			Optional: true,
		},
		"definition_s3_location": {
			// Property: DefinitionS3Location
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "Bucket": {
			//       "type": "string"
			//     },
			//     "Key": {
			//       "type": "string"
			//     },
			//     "Version": {
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "Bucket",
			//     "Key"
			//   ],
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"bucket": {
						// Property: Bucket
						Type:     types.StringType,
						Required: true,
					},
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"version": {
						// Property: Version
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"definition_string": {
			// Property: DefinitionString
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 1048576,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
		},
		"definition_substitutions": {
			// Property: DefinitionSubstitutions
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "patternProperties": {
			//     "": {
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Optional: true,
		},
		"logging_configuration": {
			// Property: LoggingConfiguration
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "Destinations": {
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "CloudWatchLogsLogGroup": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "LogGroupArn": {
			//                 "maxLength": 256,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "IncludeExecutionData": {
			//       "type": "boolean"
			//     },
			//     "Level": {
			//       "enum": [
			//         "ALL",
			//         "ERROR",
			//         "FATAL",
			//         "OFF"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"destinations": {
						// Property: Destinations
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"cloud_watch_logs_log_group": {
									// Property: CloudWatchLogsLogGroup
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"log_group_arn": {
												// Property: LogGroupArn
												Type:     types.StringType,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{
								MinItems: 1,
							},
						),
						Optional: true,
					},
					"include_execution_data": {
						// Property: IncludeExecutionData
						Type:     types.BoolType,
						Optional: true,
					},
					"level": {
						// Property: Level
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 80,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"role_arn": {
			// Property: RoleArn
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 256,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
		},
		"state_machine_name": {
			// Property: StateMachineName
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 80,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// StateMachineName is a force-new attribute.
		},
		"state_machine_type": {
			// Property: StateMachineType
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "STANDARD",
			//     "EXPRESS"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": false
			// }
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"tracing_configuration": {
			// Property: TracingConfiguration
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "Enabled": {
			//       "type": "boolean"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"enabled": {
						// Property: Enabled
						Type:     types.BoolType,
						Optional: true,
					},
				},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource schema for StateMachine",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::StepFunctions::StateMachine").WithTerraformTypeName("aws_stepfunctions_state_machine").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_stepfunctions_state_machine", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
