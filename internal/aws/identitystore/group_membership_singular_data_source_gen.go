// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package identitystore

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_identitystore_group_membership", groupMembershipDataSource)
}

// groupMembershipDataSource returns the Terraform awscc_identitystore_group_membership data source.
// This Terraform data source corresponds to the CloudFormation AWS::IdentityStore::GroupMembership resource.
func groupMembershipDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"group_id": {
			// Property: GroupId
			// CloudFormation resource type schema:
			// {
			//   "description": "The unique identifier for a group in the identity store.",
			//   "maxLength": 47,
			//   "minLength": 1,
			//   "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
			//   "type": "string"
			// }
			Description: "The unique identifier for a group in the identity store.",
			Type:        types.StringType,
			Computed:    true,
		},
		"identity_store_id": {
			// Property: IdentityStoreId
			// CloudFormation resource type schema:
			// {
			//   "description": "The globally unique identifier for the identity store.",
			//   "maxLength": 36,
			//   "minLength": 1,
			//   "pattern": "^d-[0-9a-f]{10}$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
			//   "type": "string"
			// }
			Description: "The globally unique identifier for the identity store.",
			Type:        types.StringType,
			Computed:    true,
		},
		"member_id": {
			// Property: MemberId
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "An object containing the identifier of a group member.",
			//   "properties": {
			//     "UserId": {
			//       "description": "The identifier for a user in the identity store.",
			//       "maxLength": 47,
			//       "minLength": 1,
			//       "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "UserId"
			//   ],
			//   "type": "object"
			// }
			Description: "An object containing the identifier of a group member.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"user_id": {
						// Property: UserId
						Description: "The identifier for a user in the identity store.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"membership_id": {
			// Property: MembershipId
			// CloudFormation resource type schema:
			// {
			//   "description": "The identifier for a GroupMembership in the identity store.",
			//   "maxLength": 47,
			//   "minLength": 1,
			//   "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
			//   "type": "string"
			// }
			Description: "The identifier for a GroupMembership in the identity store.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::IdentityStore::GroupMembership",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IdentityStore::GroupMembership").WithTerraformTypeName("awscc_identitystore_group_membership")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"group_id":          "GroupId",
		"identity_store_id": "IdentityStoreId",
		"member_id":         "MemberId",
		"membership_id":     "MembershipId",
		"user_id":           "UserId",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
