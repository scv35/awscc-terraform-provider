// Code generated by generators/resource/main.go; DO NOT EDIT.

package identitystore

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_identitystore_group_membership", groupMembershipResource)
}

// groupMembershipResource returns the Terraform awscc_identitystore_group_membership resource.
// This Terraform resource corresponds to the CloudFormation AWS::IdentityStore::GroupMembership resource.
func groupMembershipResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"group_id": {
			// Property: GroupId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The unique identifier for a group in the identity store.",
			//	  "maxLength": 47,
			//	  "minLength": 1,
			//	  "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
			//	  "type": "string"
			//	}
			Description: "The unique identifier for a group in the identity store.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 47),
				validate.StringMatch(regexp.MustCompile("^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$"), ""),
			},
		},
		"identity_store_id": {
			// Property: IdentityStoreId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The globally unique identifier for the identity store.",
			//	  "maxLength": 36,
			//	  "minLength": 1,
			//	  "pattern": "^d-[0-9a-f]{10}$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
			//	  "type": "string"
			//	}
			Description: "The globally unique identifier for the identity store.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 36),
				validate.StringMatch(regexp.MustCompile("^d-[0-9a-f]{10}$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"member_id": {
			// Property: MemberId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "An object containing the identifier of a group member.",
			//	  "properties": {
			//	    "UserId": {
			//	      "description": "The identifier for a user in the identity store.",
			//	      "maxLength": 47,
			//	      "minLength": 1,
			//	      "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "UserId"
			//	  ],
			//	  "type": "object"
			//	}
			Description: "An object containing the identifier of a group member.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"user_id": {
						// Property: UserId
						Description: "The identifier for a user in the identity store.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 47),
							validate.StringMatch(regexp.MustCompile("^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$"), ""),
						},
					},
				},
			),
			Required: true,
		},
		"membership_id": {
			// Property: MembershipId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The identifier for a GroupMembership in the identity store.",
			//	  "maxLength": 47,
			//	  "minLength": 1,
			//	  "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
			//	  "type": "string"
			//	}
			Description: "The identifier for a GroupMembership in the identity store.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type Definition for AWS:IdentityStore::GroupMembership",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IdentityStore::GroupMembership").WithTerraformTypeName("awscc_identitystore_group_membership")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"group_id":          "GroupId",
		"identity_store_id": "IdentityStoreId",
		"member_id":         "MemberId",
		"membership_id":     "MembershipId",
		"user_id":           "UserId",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
