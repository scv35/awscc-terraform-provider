// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigatewayv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigatewayv2_api", apiDataSource)
}

// apiDataSource returns the Terraform awscc_apigatewayv2_api data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGatewayV2::Api resource.
func apiDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"api_endpoint": {
			// Property: ApiEndpoint
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"api_id": {
			// Property: ApiId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"api_key_selection_expression": {
			// Property: ApiKeySelectionExpression
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"base_path": {
			// Property: BasePath
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"body": {
			// Property: Body
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "object"
			//	}
			Type:     types.MapType{ElemType: types.StringType},
			Computed: true,
		},
		"body_s3_location": {
			// Property: BodyS3Location
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "Bucket": {
			//	      "type": "string"
			//	    },
			//	    "Etag": {
			//	      "type": "string"
			//	    },
			//	    "Key": {
			//	      "type": "string"
			//	    },
			//	    "Version": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"bucket": {
						// Property: Bucket
						Type:     types.StringType,
						Computed: true,
					},
					"etag": {
						// Property: Etag
						Type:     types.StringType,
						Computed: true,
					},
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"version": {
						// Property: Version
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"cors_configuration": {
			// Property: CorsConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "AllowCredentials": {
			//	      "type": "boolean"
			//	    },
			//	    "AllowHeaders": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": false
			//	    },
			//	    "AllowMethods": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": false
			//	    },
			//	    "AllowOrigins": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": false
			//	    },
			//	    "ExposeHeaders": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": false
			//	    },
			//	    "MaxAge": {
			//	      "type": "integer"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"allow_credentials": {
						// Property: AllowCredentials
						Type:     types.BoolType,
						Computed: true,
					},
					"allow_headers": {
						// Property: AllowHeaders
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"allow_methods": {
						// Property: AllowMethods
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"allow_origins": {
						// Property: AllowOrigins
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"expose_headers": {
						// Property: ExposeHeaders
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"max_age": {
						// Property: MaxAge
						Type:     types.Int64Type,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"credentials_arn": {
			// Property: CredentialsArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"disable_execute_api_endpoint": {
			// Property: DisableExecuteApiEndpoint
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "boolean"
			//	}
			Type:     types.BoolType,
			Computed: true,
		},
		"disable_schema_validation": {
			// Property: DisableSchemaValidation
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "boolean"
			//	}
			Type:     types.BoolType,
			Computed: true,
		},
		"fail_on_warnings": {
			// Property: FailOnWarnings
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "boolean"
			//	}
			Type:     types.BoolType,
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"protocol_type": {
			// Property: ProtocolType
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"route_key": {
			// Property: RouteKey
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"route_selection_expression": {
			// Property: RouteSelectionExpression
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "This resource type use map for Tags, suggest to use List of Tag",
			//	  "patternProperties": {
			//	    "": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "This resource type use map for Tags, suggest to use List of Tag",
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Computed: true,
		},
		"target": {
			// Property: Target
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"version": {
			// Property: Version
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::ApiGatewayV2::Api",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGatewayV2::Api").WithTerraformTypeName("awscc_apigatewayv2_api")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allow_credentials":            "AllowCredentials",
		"allow_headers":                "AllowHeaders",
		"allow_methods":                "AllowMethods",
		"allow_origins":                "AllowOrigins",
		"api_endpoint":                 "ApiEndpoint",
		"api_id":                       "ApiId",
		"api_key_selection_expression": "ApiKeySelectionExpression",
		"base_path":                    "BasePath",
		"body":                         "Body",
		"body_s3_location":             "BodyS3Location",
		"bucket":                       "Bucket",
		"cors_configuration":           "CorsConfiguration",
		"credentials_arn":              "CredentialsArn",
		"description":                  "Description",
		"disable_execute_api_endpoint": "DisableExecuteApiEndpoint",
		"disable_schema_validation":    "DisableSchemaValidation",
		"etag":                         "Etag",
		"expose_headers":               "ExposeHeaders",
		"fail_on_warnings":             "FailOnWarnings",
		"key":                          "Key",
		"max_age":                      "MaxAge",
		"name":                         "Name",
		"protocol_type":                "ProtocolType",
		"route_key":                    "RouteKey",
		"route_selection_expression":   "RouteSelectionExpression",
		"tags":                         "Tags",
		"target":                       "Target",
		"version":                      "Version",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
