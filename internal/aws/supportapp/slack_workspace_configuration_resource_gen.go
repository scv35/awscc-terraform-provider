// Code generated by generators/resource/main.go; DO NOT EDIT.

package supportapp

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_supportapp_slack_workspace_configuration", slackWorkspaceConfigurationResource)
}

// slackWorkspaceConfigurationResource returns the Terraform awscc_supportapp_slack_workspace_configuration resource.
// This Terraform resource corresponds to the CloudFormation AWS::SupportApp::SlackWorkspaceConfiguration resource.
func slackWorkspaceConfigurationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"team_id": {
			// Property: TeamId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The team ID in Slack, which uniquely identifies a workspace.",
			//	  "maxLength": 256,
			//	  "minLength": 1,
			//	  "pattern": "^\\S+$",
			//	  "type": "string"
			//	}
			Description: "The team ID in Slack, which uniquely identifies a workspace.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 256),
				validate.StringMatch(regexp.MustCompile("^\\S+$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"version_id": {
			// Property: VersionId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "An identifier used to update an existing Slack workspace configuration in AWS CloudFormation.",
			//	  "maxLength": 256,
			//	  "minLength": 1,
			//	  "pattern": "^[0-9]+$",
			//	  "type": "string"
			//	}
			Description: "An identifier used to update an existing Slack workspace configuration in AWS CloudFormation.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 256),
				validate.StringMatch(regexp.MustCompile("^[0-9]+$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
			// VersionId is a write-only property.
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "An AWS Support App resource that creates, updates, lists, and deletes Slack workspace configurations.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SupportApp::SlackWorkspaceConfiguration").WithTerraformTypeName("awscc_supportapp_slack_workspace_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"team_id":    "TeamId",
		"version_id": "VersionId",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/VersionId",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
