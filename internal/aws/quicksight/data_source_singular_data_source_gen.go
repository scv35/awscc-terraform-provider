// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package quicksight

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_quicksight_data_source", dataSourceDataSource)
}

// dataSourceDataSource returns the Terraform awscc_quicksight_data_source data source.
// This Terraform data source corresponds to the CloudFormation AWS::QuickSight::DataSource resource.
func dataSourceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AlternateDataSourceParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eA set of alternate data source parameters that you want to share for the credentials\n            stored with this data source. The credentials are applied in tandem with the data source\n            parameters when you copy a data source by using a create or update request. The API\n            operation compares the \u003ccode\u003eDataSourceParameters\u003c/code\u003e structure that's in the request\n            with the structures in the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e allow list. If the\n            structures are an exact match, the request is allowed to use the credentials from this\n            existing data source. If the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e list is null,\n            the \u003ccode\u003eCredentials\u003c/code\u003e originally used with this \u003ccode\u003eDataSourceParameters\u003c/code\u003e\n            are automatically allowed.\u003c/p\u003e",
		//	  "items": {
		//	    "description": "\u003cp\u003eThe parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.\u003c/p\u003e",
		//	    "properties": {
		//	      "AmazonElasticsearchParameters": {
		//	        "description": "\u003cp\u003eAmazon Elasticsearch Service parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Domain": {
		//	            "description": "\u003cp\u003eThe Amazon Elasticsearch Service domain.\u003c/p\u003e",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Domain"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "AmazonOpenSearchParameters": {
		//	        "description": "\u003cp\u003eAmazon OpenSearch Service parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Domain": {
		//	            "description": "\u003cp\u003eThe Amazon OpenSearch Service domain.\u003c/p\u003e",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Domain"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "AthenaParameters": {
		//	        "description": "\u003cp\u003eAmazon Athena parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "WorkGroup": {
		//	            "description": "\u003cp\u003eThe workgroup that Amazon Athena uses.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "AuroraParameters": {
		//	        "description": "\u003cp\u003eAmazon Aurora parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "AuroraPostgreSqlParameters": {
		//	        "description": "\u003cp\u003eAmazon Aurora with PostgreSQL compatibility parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "MariaDbParameters": {
		//	        "description": "\u003cp\u003eMariaDB parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "MySqlParameters": {
		//	        "description": "\u003cp\u003eMySQL parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "OracleParameters": {
		//	        "properties": {
		//	          "Database": {
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "PostgreSqlParameters": {
		//	        "description": "\u003cp\u003ePostgreSQL parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "PrestoParameters": {
		//	        "description": "\u003cp\u003ePresto parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Catalog": {
		//	            "description": "\u003cp\u003eCatalog.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 0,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Catalog",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "RdsParameters": {
		//	        "description": "\u003cp\u003eAmazon RDS parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "InstanceId": {
		//	            "description": "\u003cp\u003eInstance ID.\u003c/p\u003e",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "InstanceId"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "RedshiftParameters": {
		//	        "description": "\u003cp\u003eAmazon Redshift parameters. The \u003ccode\u003eClusterId\u003c/code\u003e field can be blank if\n            \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are both set. The \u003ccode\u003eHost\u003c/code\u003e and\n            \u003ccode\u003ePort\u003c/code\u003e fields can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e field is set.\u003c/p\u003e",
		//	        "properties": {
		//	          "ClusterId": {
		//	            "description": "\u003cp\u003eCluster ID. This field can be blank if the \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are\n            provided.\u003c/p\u003e",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost. This field can be blank if \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort. This field can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 0,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "S3Parameters": {
		//	        "description": "\u003cp\u003eS3 parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "ManifestFileLocation": {
		//	            "description": "\u003cp\u003eAmazon S3 manifest file location.\u003c/p\u003e",
		//	            "properties": {
		//	              "Bucket": {
		//	                "description": "\u003cp\u003eAmazon S3 bucket.\u003c/p\u003e",
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "Key": {
		//	                "description": "\u003cp\u003eAmazon S3 key that identifies an object.\u003c/p\u003e",
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Bucket",
		//	              "Key"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "ManifestFileLocation"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SnowflakeParameters": {
		//	        "description": "\u003cp\u003eSnowflake parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Warehouse": {
		//	            "description": "\u003cp\u003eWarehouse.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 0,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Warehouse"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SparkParameters": {
		//	        "description": "\u003cp\u003eSpark parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SqlServerParameters": {
		//	        "description": "\u003cp\u003eSQL Server parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "TeradataParameters": {
		//	        "description": "\u003cp\u003eTeradata parameters.\u003c/p\u003e",
		//	        "properties": {
		//	          "Database": {
		//	            "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Host": {
		//	            "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Port": {
		//	            "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "Database",
		//	          "Host",
		//	          "Port"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"alternate_data_source_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AmazonElasticsearchParameters
					"amazon_elasticsearch_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Domain
							"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>The Amazon Elasticsearch Service domain.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon Elasticsearch Service parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AmazonOpenSearchParameters
					"amazon_open_search_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Domain
							"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>The Amazon OpenSearch Service domain.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon OpenSearch Service parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AthenaParameters
					"athena_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: WorkGroup
							"work_group": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>The workgroup that Amazon Athena uses.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon Athena parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AuroraParameters
					"aurora_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon Aurora parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AuroraPostgreSqlParameters
					"aurora_postgre_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon Aurora with PostgreSQL compatibility parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MariaDbParameters
					"maria_db_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>MariaDB parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MySqlParameters
					"my_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>MySQL parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: OracleParameters
					"oracle_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PostgreSqlParameters
					"postgre_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>PostgreSQL parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PrestoParameters
					"presto_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Catalog
							"catalog": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Catalog.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Presto parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RdsParameters
					"rds_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: InstanceId
							"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Instance ID.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon RDS parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RedshiftParameters
					"redshift_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ClusterId
							"cluster_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are\n            provided.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if\n            <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and\n            <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: S3Parameters
					"s3_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ManifestFileLocation
							"manifest_file_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Bucket
									"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "<p>Amazon S3 bucket.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "<p>Amazon S3 key that identifies an object.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "<p>Amazon S3 manifest file location.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>S3 parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SnowflakeParameters
					"snowflake_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Warehouse
							"warehouse": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Warehouse.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Snowflake parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SparkParameters
					"spark_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Spark parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SqlServerParameters
					"sql_server_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>SQL Server parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: TeradataParameters
					"teradata_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Database
							"database": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Database.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>Host.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "<p>Port.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "<p>Teradata parameters.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>A set of alternate data source parameters that you want to share for the credentials\n            stored with this data source. The credentials are applied in tandem with the data source\n            parameters when you copy a data source by using a create or update request. The API\n            operation compares the <code>DataSourceParameters</code> structure that's in the request\n            with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the\n            structures are an exact match, the request is allowed to use the credentials from this\n            existing data source. If the <code>AlternateDataSourceParameters</code> list is null,\n            the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>\n            are automatically allowed.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the data source.\u003c/p\u003e",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The Amazon Resource Name (ARN) of the data source.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AwsAccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 12,
		//	  "minLength": 12,
		//	  "pattern": "^[0-9]{12}$",
		//	  "type": "string"
		//	}
		"aws_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe time that this data source was created.\u003c/p\u003e",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The time that this data source was created.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Credentials
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eData source credentials. This is a variant type structure. For this structure to be\n            valid, only one of the attributes can be non-null.\u003c/p\u003e",
		//	  "properties": {
		//	    "CopySourceArn": {
		//	      "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of a data source that has the credential pair that you\n            want to use. When \u003ccode\u003eCopySourceArn\u003c/code\u003e is not null, the credential pair from the\n            data source in the ARN is used as the credentials for the\n            \u003ccode\u003eDataSourceCredentials\u003c/code\u003e structure.\u003c/p\u003e",
		//	      "pattern": "^arn:[-a-z0-9]*:quicksight:[-a-z0-9]*:[0-9]{12}:datasource/.+",
		//	      "type": "string"
		//	    },
		//	    "CredentialPair": {
		//	      "description": "\u003cp\u003eThe combination of user name and password that are used as credentials.\u003c/p\u003e",
		//	      "properties": {
		//	        "AlternateDataSourceParameters": {
		//	          "description": "\u003cp\u003eA set of alternate data source parameters that you want to share for these\n            credentials. The credentials are applied in tandem with the data source parameters when\n            you copy a data source by using a create or update request. The API operation compares\n            the \u003ccode\u003eDataSourceParameters\u003c/code\u003e structure that's in the request with the\n            structures in the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e allow list. If the\n            structures are an exact match, the request is allowed to use the new data source with\n            the existing credentials. If the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e list is\n            null, the \u003ccode\u003eDataSourceParameters\u003c/code\u003e originally used with these\n                \u003ccode\u003eCredentials\u003c/code\u003e is automatically allowed.\u003c/p\u003e",
		//	          "items": {
		//	            "description": "\u003cp\u003eThe parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.\u003c/p\u003e",
		//	            "properties": {
		//	              "AmazonElasticsearchParameters": {
		//	                "description": "\u003cp\u003eAmazon Elasticsearch Service parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Domain": {
		//	                    "description": "\u003cp\u003eThe Amazon Elasticsearch Service domain.\u003c/p\u003e",
		//	                    "maxLength": 64,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Domain"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "AmazonOpenSearchParameters": {
		//	                "description": "\u003cp\u003eAmazon OpenSearch Service parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Domain": {
		//	                    "description": "\u003cp\u003eThe Amazon OpenSearch Service domain.\u003c/p\u003e",
		//	                    "maxLength": 64,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Domain"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "AthenaParameters": {
		//	                "description": "\u003cp\u003eAmazon Athena parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "WorkGroup": {
		//	                    "description": "\u003cp\u003eThe workgroup that Amazon Athena uses.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "AuroraParameters": {
		//	                "description": "\u003cp\u003eAmazon Aurora parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "AuroraPostgreSqlParameters": {
		//	                "description": "\u003cp\u003eAmazon Aurora with PostgreSQL compatibility parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "MariaDbParameters": {
		//	                "description": "\u003cp\u003eMariaDB parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "MySqlParameters": {
		//	                "description": "\u003cp\u003eMySQL parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "OracleParameters": {
		//	                "properties": {
		//	                  "Database": {
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "PostgreSqlParameters": {
		//	                "description": "\u003cp\u003ePostgreSQL parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "PrestoParameters": {
		//	                "description": "\u003cp\u003ePresto parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Catalog": {
		//	                    "description": "\u003cp\u003eCatalog.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Catalog",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "RdsParameters": {
		//	                "description": "\u003cp\u003eAmazon RDS parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "InstanceId": {
		//	                    "description": "\u003cp\u003eInstance ID.\u003c/p\u003e",
		//	                    "maxLength": 64,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "InstanceId"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "RedshiftParameters": {
		//	                "description": "\u003cp\u003eAmazon Redshift parameters. The \u003ccode\u003eClusterId\u003c/code\u003e field can be blank if\n            \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are both set. The \u003ccode\u003eHost\u003c/code\u003e and\n            \u003ccode\u003ePort\u003c/code\u003e fields can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e field is set.\u003c/p\u003e",
		//	                "properties": {
		//	                  "ClusterId": {
		//	                    "description": "\u003cp\u003eCluster ID. This field can be blank if the \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are\n            provided.\u003c/p\u003e",
		//	                    "maxLength": 64,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost. This field can be blank if \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort. This field can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 0,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "S3Parameters": {
		//	                "description": "\u003cp\u003eS3 parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "ManifestFileLocation": {
		//	                    "description": "\u003cp\u003eAmazon S3 manifest file location.\u003c/p\u003e",
		//	                    "properties": {
		//	                      "Bucket": {
		//	                        "description": "\u003cp\u003eAmazon S3 bucket.\u003c/p\u003e",
		//	                        "maxLength": 1024,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "Key": {
		//	                        "description": "\u003cp\u003eAmazon S3 key that identifies an object.\u003c/p\u003e",
		//	                        "maxLength": 1024,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Bucket",
		//	                      "Key"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ManifestFileLocation"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "SnowflakeParameters": {
		//	                "description": "\u003cp\u003eSnowflake parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Warehouse": {
		//	                    "description": "\u003cp\u003eWarehouse.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Warehouse"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "SparkParameters": {
		//	                "description": "\u003cp\u003eSpark parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "SqlServerParameters": {
		//	                "description": "\u003cp\u003eSQL Server parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "TeradataParameters": {
		//	                "description": "\u003cp\u003eTeradata parameters.\u003c/p\u003e",
		//	                "properties": {
		//	                  "Database": {
		//	                    "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	                    "maxLength": 128,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Host": {
		//	                    "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	                    "maxLength": 256,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "Port": {
		//	                    "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	                    "maximum": 65535,
		//	                    "minimum": 1,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Database",
		//	                  "Host",
		//	                  "Port"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "maxItems": 50,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "Password": {
		//	          "description": "\u003cp\u003ePassword.\u003c/p\u003e",
		//	          "maxLength": 1024,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Username": {
		//	          "description": "\u003cp\u003eUser name.\u003c/p\u003e",
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Password",
		//	        "Username"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SecretArn": {
		//	      "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.\u003c/p\u003e",
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "pattern": "^arn:[-a-z0-9]*:secretsmanager:[-a-z0-9]*:[0-9]{12}:secret:.+",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CopySourceArn
				"copy_source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "<p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you\n            want to use. When <code>CopySourceArn</code> is not null, the credential pair from the\n            data source in the ARN is used as the credentials for the\n            <code>DataSourceCredentials</code> structure.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: CredentialPair
				"credential_pair": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AlternateDataSourceParameters
						"alternate_data_source_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AmazonElasticsearchParameters
									"amazon_elasticsearch_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Domain
											"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>The Amazon Elasticsearch Service domain.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon Elasticsearch Service parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: AmazonOpenSearchParameters
									"amazon_open_search_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Domain
											"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>The Amazon OpenSearch Service domain.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon OpenSearch Service parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: AthenaParameters
									"athena_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: WorkGroup
											"work_group": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>The workgroup that Amazon Athena uses.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon Athena parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: AuroraParameters
									"aurora_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon Aurora parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: AuroraPostgreSqlParameters
									"aurora_postgre_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon Aurora with PostgreSQL compatibility parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MariaDbParameters
									"maria_db_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>MariaDB parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MySqlParameters
									"my_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>MySQL parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: OracleParameters
									"oracle_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: PostgreSqlParameters
									"postgre_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>PostgreSQL parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: PrestoParameters
									"presto_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Catalog
											"catalog": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Catalog.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Presto parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: RdsParameters
									"rds_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: InstanceId
											"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Instance ID.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon RDS parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: RedshiftParameters
									"redshift_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ClusterId
											"cluster_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are\n            provided.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if\n            <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and\n            <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: S3Parameters
									"s3_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ManifestFileLocation
											"manifest_file_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Bucket
													"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "<p>Amazon S3 bucket.</p>",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: Key
													"key": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "<p>Amazon S3 key that identifies an object.</p>",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "<p>Amazon S3 manifest file location.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>S3 parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: SnowflakeParameters
									"snowflake_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Warehouse
											"warehouse": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Warehouse.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Snowflake parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: SparkParameters
									"spark_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Spark parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: SqlServerParameters
									"sql_server_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>SQL Server parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: TeradataParameters
									"teradata_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Database
											"database": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Database.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Host
											"host": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "<p>Host.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Port
											"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "<p>Port.</p>",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "<p>Teradata parameters.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "<p>A set of alternate data source parameters that you want to share for these\n            credentials. The credentials are applied in tandem with the data source parameters when\n            you copy a data source by using a create or update request. The API operation compares\n            the <code>DataSourceParameters</code> structure that's in the request with the\n            structures in the <code>AlternateDataSourceParameters</code> allow list. If the\n            structures are an exact match, the request is allowed to use the new data source with\n            the existing credentials. If the <code>AlternateDataSourceParameters</code> list is\n            null, the <code>DataSourceParameters</code> originally used with these\n                <code>Credentials</code> is automatically allowed.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Password
						"password": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Password.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Username
						"username": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>User name.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>The combination of user name and password that are used as credentials.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SecretArn
				"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "<p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>Data source credentials. This is a variant type structure. For this structure to be\n            valid, only one of the attributes can be non-null.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataSourceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"data_source_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DataSourceParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.\u003c/p\u003e",
		//	  "properties": {
		//	    "AmazonElasticsearchParameters": {
		//	      "description": "\u003cp\u003eAmazon Elasticsearch Service parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Domain": {
		//	          "description": "\u003cp\u003eThe Amazon Elasticsearch Service domain.\u003c/p\u003e",
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Domain"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "AmazonOpenSearchParameters": {
		//	      "description": "\u003cp\u003eAmazon OpenSearch Service parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Domain": {
		//	          "description": "\u003cp\u003eThe Amazon OpenSearch Service domain.\u003c/p\u003e",
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Domain"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "AthenaParameters": {
		//	      "description": "\u003cp\u003eAmazon Athena parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "WorkGroup": {
		//	          "description": "\u003cp\u003eThe workgroup that Amazon Athena uses.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "AuroraParameters": {
		//	      "description": "\u003cp\u003eAmazon Aurora parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "AuroraPostgreSqlParameters": {
		//	      "description": "\u003cp\u003eAmazon Aurora with PostgreSQL compatibility parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "MariaDbParameters": {
		//	      "description": "\u003cp\u003eMariaDB parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "MySqlParameters": {
		//	      "description": "\u003cp\u003eMySQL parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OracleParameters": {
		//	      "properties": {
		//	        "Database": {
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "PostgreSqlParameters": {
		//	      "description": "\u003cp\u003ePostgreSQL parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "PrestoParameters": {
		//	      "description": "\u003cp\u003ePresto parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Catalog": {
		//	          "description": "\u003cp\u003eCatalog.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Catalog",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RdsParameters": {
		//	      "description": "\u003cp\u003eAmazon RDS parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "InstanceId": {
		//	          "description": "\u003cp\u003eInstance ID.\u003c/p\u003e",
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "InstanceId"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RedshiftParameters": {
		//	      "description": "\u003cp\u003eAmazon Redshift parameters. The \u003ccode\u003eClusterId\u003c/code\u003e field can be blank if\n            \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are both set. The \u003ccode\u003eHost\u003c/code\u003e and\n            \u003ccode\u003ePort\u003c/code\u003e fields can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e field is set.\u003c/p\u003e",
		//	      "properties": {
		//	        "ClusterId": {
		//	          "description": "\u003cp\u003eCluster ID. This field can be blank if the \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are\n            provided.\u003c/p\u003e",
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost. This field can be blank if \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort. This field can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 0,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "S3Parameters": {
		//	      "description": "\u003cp\u003eS3 parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "ManifestFileLocation": {
		//	          "description": "\u003cp\u003eAmazon S3 manifest file location.\u003c/p\u003e",
		//	          "properties": {
		//	            "Bucket": {
		//	              "description": "\u003cp\u003eAmazon S3 bucket.\u003c/p\u003e",
		//	              "maxLength": 1024,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "Key": {
		//	              "description": "\u003cp\u003eAmazon S3 key that identifies an object.\u003c/p\u003e",
		//	              "maxLength": 1024,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Bucket",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "ManifestFileLocation"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SnowflakeParameters": {
		//	      "description": "\u003cp\u003eSnowflake parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Warehouse": {
		//	          "description": "\u003cp\u003eWarehouse.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Warehouse"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SparkParameters": {
		//	      "description": "\u003cp\u003eSpark parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SqlServerParameters": {
		//	      "description": "\u003cp\u003eSQL Server parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TeradataParameters": {
		//	      "description": "\u003cp\u003eTeradata parameters.\u003c/p\u003e",
		//	      "properties": {
		//	        "Database": {
		//	          "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "description": "\u003cp\u003eHost.\u003c/p\u003e",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "description": "\u003cp\u003ePort.\u003c/p\u003e",
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Host",
		//	        "Port"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"data_source_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AmazonElasticsearchParameters
				"amazon_elasticsearch_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Domain
						"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>The Amazon Elasticsearch Service domain.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon Elasticsearch Service parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AmazonOpenSearchParameters
				"amazon_open_search_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Domain
						"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>The Amazon OpenSearch Service domain.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon OpenSearch Service parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AthenaParameters
				"athena_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: WorkGroup
						"work_group": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>The workgroup that Amazon Athena uses.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon Athena parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AuroraParameters
				"aurora_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon Aurora parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AuroraPostgreSqlParameters
				"aurora_postgre_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon Aurora with PostgreSQL compatibility parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MariaDbParameters
				"maria_db_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>MariaDB parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MySqlParameters
				"my_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>MySQL parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: OracleParameters
				"oracle_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PostgreSqlParameters
				"postgre_sql_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>PostgreSQL parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PrestoParameters
				"presto_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Catalog
						"catalog": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Catalog.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Presto parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RdsParameters
				"rds_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: InstanceId
						"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Instance ID.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon RDS parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RedshiftParameters
				"redshift_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ClusterId
						"cluster_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are\n            provided.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if\n            <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and\n            <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: S3Parameters
				"s3_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ManifestFileLocation
						"manifest_file_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Bucket
								"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "<p>Amazon S3 bucket.</p>",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "<p>Amazon S3 key that identifies an object.</p>",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "<p>Amazon S3 manifest file location.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>S3 parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SnowflakeParameters
				"snowflake_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Warehouse
						"warehouse": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Warehouse.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Snowflake parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SparkParameters
				"spark_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Spark parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SqlServerParameters
				"sql_server_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>SQL Server parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TeradataParameters
				"teradata_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Database.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>Host.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "<p>Port.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Teradata parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>The parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ErrorInfo
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eError information for the data source creation or update.\u003c/p\u003e",
		//	  "properties": {
		//	    "Message": {
		//	      "description": "\u003cp\u003eError message.\u003c/p\u003e",
		//	      "type": "string"
		//	    },
		//	    "Type": {
		//	      "enum": [
		//	        "ACCESS_DENIED",
		//	        "COPY_SOURCE_NOT_FOUND",
		//	        "TIMEOUT",
		//	        "ENGINE_VERSION_NOT_SUPPORTED",
		//	        "UNKNOWN_HOST",
		//	        "GENERIC_SQL_FAILURE",
		//	        "CONFLICT",
		//	        "UNKNOWN"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"error_info": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Message
				"message": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "<p>Error message.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>Error information for the data source creation or update.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe last time that this data source was updated.\u003c/p\u003e",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The last time that this data source was updated.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eA display name for the data source.\u003c/p\u003e",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>A display name for the data source.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Permissions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eA list of resource permissions on the data source.\u003c/p\u003e",
		//	  "items": {
		//	    "description": "\u003cp\u003ePermission for the resource.\u003c/p\u003e",
		//	    "properties": {
		//	      "Actions": {
		//	        "description": "\u003cp\u003eThe IAM action to grant or revoke permissions on.\u003c/p\u003e",
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "maxItems": 16,
		//	        "minItems": 1,
		//	        "type": "array"
		//	      },
		//	      "Principal": {
		//	        "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:\u003c/p\u003e\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) \u003c/p\u003e\n            \u003c/li\u003e\n         \u003c/ul\u003e",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Actions",
		//	      "Principal"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 64,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"permissions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Actions
					"actions": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "<p>The IAM action to grant or revoke permissions on.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Principal
					"principal": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:</p>\n        <ul>\n            <li>\n                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) </p>\n            </li>\n         </ul>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>A list of resource permissions on the data source.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SslProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eSecure Socket Layer (SSL) properties that apply when QuickSight connects to your\n            underlying data source.\u003c/p\u003e",
		//	  "properties": {
		//	    "DisableSsl": {
		//	      "description": "\u003cp\u003eA Boolean option to control whether SSL should be disabled.\u003c/p\u003e",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"ssl_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DisableSsl
				"disable_ssl": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "<p>A Boolean option to control whether SSL should be disabled.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your\n            underlying data source.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "CREATION_IN_PROGRESS",
		//	    "CREATION_SUCCESSFUL",
		//	    "CREATION_FAILED",
		//	    "UPDATE_IN_PROGRESS",
		//	    "UPDATE_SUCCESSFUL",
		//	    "UPDATE_FAILED",
		//	    "DELETED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eContains a map of the key-value pairs for the resource tag or tags assigned to the data source.\u003c/p\u003e",
		//	  "items": {
		//	    "description": "\u003cp\u003eThe key or keys of the key-value pairs for the resource tag or tags assigned to the\n            resource.\u003c/p\u003e",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "\u003cp\u003eTag key.\u003c/p\u003e",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "\u003cp\u003eTag value.\u003c/p\u003e",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>Tag key.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>Tag value.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "ADOBE_ANALYTICS",
		//	    "AMAZON_ELASTICSEARCH",
		//	    "AMAZON_OPENSEARCH",
		//	    "ATHENA",
		//	    "AURORA",
		//	    "AURORA_POSTGRESQL",
		//	    "AWS_IOT_ANALYTICS",
		//	    "GITHUB",
		//	    "JIRA",
		//	    "MARIADB",
		//	    "MYSQL",
		//	    "ORACLE",
		//	    "POSTGRESQL",
		//	    "PRESTO",
		//	    "REDSHIFT",
		//	    "S3",
		//	    "SALESFORCE",
		//	    "SERVICENOW",
		//	    "SNOWFLAKE",
		//	    "SPARK",
		//	    "SQLSERVER",
		//	    "TERADATA",
		//	    "TWITTER",
		//	    "TIMESTREAM"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VpcConnectionProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eVPC connection properties.\u003c/p\u003e",
		//	  "properties": {
		//	    "VpcConnectionArn": {
		//	      "description": "\u003cp\u003eThe Amazon Resource Name (ARN) for the VPC connection.\u003c/p\u003e",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "VpcConnectionArn"
		//	  ],
		//	  "type": "object"
		//	}
		"vpc_connection_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: VpcConnectionArn
				"vpc_connection_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "<p>The Amazon Resource Name (ARN) for the VPC connection.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>VPC connection properties.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::QuickSight::DataSource",
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::QuickSight::DataSource").WithTerraformTypeName("awscc_quicksight_data_source")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":                          "Actions",
		"alternate_data_source_parameters": "AlternateDataSourceParameters",
		"amazon_elasticsearch_parameters":  "AmazonElasticsearchParameters",
		"amazon_open_search_parameters":    "AmazonOpenSearchParameters",
		"arn":                              "Arn",
		"athena_parameters":                "AthenaParameters",
		"aurora_parameters":                "AuroraParameters",
		"aurora_postgre_sql_parameters":    "AuroraPostgreSqlParameters",
		"aws_account_id":                   "AwsAccountId",
		"bucket":                           "Bucket",
		"catalog":                          "Catalog",
		"cluster_id":                       "ClusterId",
		"copy_source_arn":                  "CopySourceArn",
		"created_time":                     "CreatedTime",
		"credential_pair":                  "CredentialPair",
		"credentials":                      "Credentials",
		"data_source_id":                   "DataSourceId",
		"data_source_parameters":           "DataSourceParameters",
		"database":                         "Database",
		"disable_ssl":                      "DisableSsl",
		"domain":                           "Domain",
		"error_info":                       "ErrorInfo",
		"host":                             "Host",
		"instance_id":                      "InstanceId",
		"key":                              "Key",
		"last_updated_time":                "LastUpdatedTime",
		"manifest_file_location":           "ManifestFileLocation",
		"maria_db_parameters":              "MariaDbParameters",
		"message":                          "Message",
		"my_sql_parameters":                "MySqlParameters",
		"name":                             "Name",
		"oracle_parameters":                "OracleParameters",
		"password":                         "Password",
		"permissions":                      "Permissions",
		"port":                             "Port",
		"postgre_sql_parameters":           "PostgreSqlParameters",
		"presto_parameters":                "PrestoParameters",
		"principal":                        "Principal",
		"rds_parameters":                   "RdsParameters",
		"redshift_parameters":              "RedshiftParameters",
		"s3_parameters":                    "S3Parameters",
		"secret_arn":                       "SecretArn",
		"snowflake_parameters":             "SnowflakeParameters",
		"spark_parameters":                 "SparkParameters",
		"sql_server_parameters":            "SqlServerParameters",
		"ssl_properties":                   "SslProperties",
		"status":                           "Status",
		"tags":                             "Tags",
		"teradata_parameters":              "TeradataParameters",
		"type":                             "Type",
		"username":                         "Username",
		"value":                            "Value",
		"vpc_connection_arn":               "VpcConnectionArn",
		"vpc_connection_properties":        "VpcConnectionProperties",
		"warehouse":                        "Warehouse",
		"work_group":                       "WorkGroup",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
