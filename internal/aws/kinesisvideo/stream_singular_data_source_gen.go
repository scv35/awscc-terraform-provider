// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package kinesisvideo

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_kinesisvideo_stream", streamDataSourceType)
}

// streamDataSourceType returns the Terraform awscc_kinesisvideo_stream data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::KinesisVideo::Stream resource type.
func streamDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) of the Kinesis Video stream.",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) of the Kinesis Video stream.",
			Type:        types.StringType,
			Computed:    true,
		},
		"data_retention_in_hours": {
			// Property: DataRetentionInHours
			// CloudFormation resource type schema:
			// {
			//   "description": "The number of hours till which Kinesis Video will retain the data in the stream",
			//   "maximum": 87600,
			//   "minimum": 0,
			//   "type": "integer"
			// }
			Description: "The number of hours till which Kinesis Video will retain the data in the stream",
			Type:        types.Int64Type,
			Computed:    true,
		},
		"device_name": {
			// Property: DeviceName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the device that is writing to the stream.",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "pattern": "[a-zA-Z0-9_.-]+",
			//   "type": "string"
			// }
			Description: "The name of the device that is writing to the stream.",
			Type:        types.StringType,
			Computed:    true,
		},
		"kms_key_id": {
			// Property: KmsKeyId
			// CloudFormation resource type schema:
			// {
			//   "description": "AWS KMS key ID that Kinesis Video Streams uses to encrypt stream data.",
			//   "maxLength": 2048,
			//   "minLength": 1,
			//   "pattern": ".+",
			//   "type": "string"
			// }
			Description: "AWS KMS key ID that Kinesis Video Streams uses to encrypt stream data.",
			Type:        types.StringType,
			Computed:    true,
		},
		"media_type": {
			// Property: MediaType
			// CloudFormation resource type schema:
			// {
			//   "description": "The media type of the stream. Consumers of the stream can use this information when processing the stream.",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "pattern": "[\\w\\-\\.\\+]+/[\\w\\-\\.\\+]+(,[\\w\\-\\.\\+]+/[\\w\\-\\.\\+]+)*",
			//   "type": "string"
			// }
			Description: "The media type of the stream. Consumers of the stream can use this information when processing the stream.",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the Kinesis Video stream.",
			//   "maxLength": 256,
			//   "minLength": 1,
			//   "pattern": "[a-zA-Z0-9_.-]+",
			//   "type": "string"
			// }
			Description: "The name of the Kinesis Video stream.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "An array of key-value pairs associated with the Kinesis Video Stream.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A key-value pair to associated with the Kinesis Video Stream.",
			//     "properties": {
			//       "Key": {
			//         "description": "The key name of the tag. Specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "The value for the tag. Specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "minItems": 1,
			//   "type": "array",
			//   "uniqueItems": false
			// }
			Description: "An array of key-value pairs associated with the Kinesis Video Stream.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The key name of the tag. Specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "The value for the tag. Specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::KinesisVideo::Stream",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::KinesisVideo::Stream").WithTerraformTypeName("awscc_kinesisvideo_stream")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                     "Arn",
		"data_retention_in_hours": "DataRetentionInHours",
		"device_name":             "DeviceName",
		"key":                     "Key",
		"kms_key_id":              "KmsKeyId",
		"media_type":              "MediaType",
		"name":                    "Name",
		"tags":                    "Tags",
		"value":                   "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return singularDataSourceType, nil
}
