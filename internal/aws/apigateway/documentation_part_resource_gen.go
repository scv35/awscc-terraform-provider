// Code generated by generators/resource/main.go; DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_apigateway_documentation_part", documentationPartResource)
}

// documentationPartResource returns the Terraform awscc_apigateway_documentation_part resource.
// This Terraform resource corresponds to the CloudFormation AWS::ApiGateway::DocumentationPart resource.
func documentationPartResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"documentation_part_id": {
			// Property: DocumentationPartId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The identifier of the documentation Part.",
			//	  "type": "string"
			//	}
			Description: "The identifier of the documentation Part.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"location": {
			// Property: Location
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "The location of the API entity that the documentation applies to.",
			//	  "properties": {
			//	    "Method": {
			//	      "description": "The HTTP verb of a method.",
			//	      "type": "string"
			//	    },
			//	    "Name": {
			//	      "description": "The name of the targeted API entity.",
			//	      "type": "string"
			//	    },
			//	    "Path": {
			//	      "description": "The URL path of the target.",
			//	      "type": "string"
			//	    },
			//	    "StatusCode": {
			//	      "description": "The HTTP status code of a response.",
			//	      "type": "string"
			//	    },
			//	    "Type": {
			//	      "description": "The type of API entity that the documentation content applies to.",
			//	      "enum": [
			//	        "API",
			//	        "AUTHORIZER",
			//	        "MODEL",
			//	        "RESOURCE",
			//	        "METHOD",
			//	        "PATH_PARAMETER",
			//	        "QUERY_PARAMETER",
			//	        "REQUEST_HEADER",
			//	        "REQUEST_BODY",
			//	        "RESPONSE",
			//	        "RESPONSE_HEADER",
			//	        "RESPONSE_BODY"
			//	      ],
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "The location of the API entity that the documentation applies to.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"method": {
						// Property: Method
						Description: "The HTTP verb of a method.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"name": {
						// Property: Name
						Description: "The name of the targeted API entity.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"path": {
						// Property: Path
						Description: "The URL path of the target.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"status_code": {
						// Property: StatusCode
						Description: "The HTTP status code of a response.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"type": {
						// Property: Type
						Description: "The type of API entity that the documentation content applies to.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"API",
								"AUTHORIZER",
								"MODEL",
								"RESOURCE",
								"METHOD",
								"PATH_PARAMETER",
								"QUERY_PARAMETER",
								"REQUEST_HEADER",
								"REQUEST_BODY",
								"RESPONSE",
								"RESPONSE_HEADER",
								"RESPONSE_BODY",
							}),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"properties": {
			// Property: Properties
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The documentation content map of the targeted API entity.",
			//	  "type": "string"
			//	}
			Description: "The documentation content map of the targeted API entity.",
			Type:        types.StringType,
			Required:    true,
		},
		"rest_api_id": {
			// Property: RestApiId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Identifier of the targeted API entity",
			//	  "type": "string"
			//	}
			Description: "Identifier of the targeted API entity",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::ApiGateway::DocumentationPart",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGateway::DocumentationPart").WithTerraformTypeName("awscc_apigateway_documentation_part")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"documentation_part_id": "DocumentationPartId",
		"location":              "Location",
		"method":                "Method",
		"name":                  "Name",
		"path":                  "Path",
		"properties":            "Properties",
		"rest_api_id":           "RestApiId",
		"status_code":           "StatusCode",
		"type":                  "Type",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
