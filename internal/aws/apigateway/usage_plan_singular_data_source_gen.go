// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigateway_usage_plan", usagePlanDataSource)
}

// usagePlanDataSource returns the Terraform awscc_apigateway_usage_plan data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGateway::UsagePlan resource.
func usagePlanDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiStages
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The associated API stages of a usage plan.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "API stage name of the associated API stage in a usage plan.",
		//	    "properties": {
		//	      "ApiId": {
		//	        "description": "API Id of the associated API stage in a usage plan.",
		//	        "type": "string"
		//	      },
		//	      "Stage": {
		//	        "description": "API stage name of the associated API stage in a usage plan.",
		//	        "type": "string"
		//	      },
		//	      "Throttle": {
		//	        "additionalProperties": false,
		//	        "description": "Map containing method level throttling information for API stage in a usage plan.",
		//	        "patternProperties": {
		//	          "": {
		//	            "additionalProperties": false,
		//	            "description": "``ThrottleSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies the overall request rate (average requests per second) and burst capacity when users call your REST APIs.",
		//	            "properties": {
		//	              "BurstLimit": {
		//	                "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              },
		//	              "RateLimit": {
		//	                "description": "The API target request rate limit.",
		//	                "minimum": 0,
		//	                "type": "number"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"api_stages": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ApiId
					"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "API Id of the associated API stage in a usage plan.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Stage
					"stage": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "API stage name of the associated API stage in a usage plan.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Throttle
					"throttle":                // Pattern: ""
					schema.MapNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BurstLimit
								"burst_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RateLimit
								"rate_limit": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "The API target request rate limit.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "Map containing method level throttling information for API stage in a usage plan.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The associated API stages of a usage plan.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of a usage plan.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of a usage plan.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"usage_plan_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Quota
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The target maximum number of permitted requests per a given unit time interval.",
		//	  "properties": {
		//	    "Limit": {
		//	      "description": "The target maximum number of requests that can be made in a given time period.",
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "Offset": {
		//	      "description": "The number of requests subtracted from the given limit in the initial time period.",
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "Period": {
		//	      "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"quota": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Limit
				"limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The target maximum number of requests that can be made in a given time period.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Offset
				"offset": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of requests subtracted from the given limit in the initial time period.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Period
				"period": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The target maximum number of permitted requests per a given unit time interval.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The collection of tags. Each tag element is associated with a given resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The collection of tags. Each tag element is associated with a given resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Throttle
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map containing method level throttling information for API stage in a usage plan.",
		//	  "properties": {
		//	    "BurstLimit": {
		//	      "description": "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "RateLimit": {
		//	      "description": "The API target request rate limit.",
		//	      "minimum": 0,
		//	      "type": "number"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"throttle": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BurstLimit
				"burst_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RateLimit
				"rate_limit": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "The API target request rate limit.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A map containing method level throttling information for API stage in a usage plan.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UsagePlanName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of a usage plan.",
		//	  "type": "string"
		//	}
		"usage_plan_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of a usage plan.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ApiGateway::UsagePlan",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGateway::UsagePlan").WithTerraformTypeName("awscc_apigateway_usage_plan")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_id":          "ApiId",
		"api_stages":      "ApiStages",
		"burst_limit":     "BurstLimit",
		"description":     "Description",
		"key":             "Key",
		"limit":           "Limit",
		"offset":          "Offset",
		"period":          "Period",
		"quota":           "Quota",
		"rate_limit":      "RateLimit",
		"stage":           "Stage",
		"tags":            "Tags",
		"throttle":        "Throttle",
		"usage_plan_id":   "Id",
		"usage_plan_name": "UsagePlanName",
		"value":           "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
