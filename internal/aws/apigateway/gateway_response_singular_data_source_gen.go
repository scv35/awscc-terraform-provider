// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigateway_gateway_response", gatewayResponseDataSource)
}

// gatewayResponseDataSource returns the Terraform awscc_apigateway_gateway_response data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGateway::GatewayResponse resource.
func gatewayResponseDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"gateway_response_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"response_parameters": // Pattern: ""
		schema.MapAttribute{   /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseTemplates
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Response templates of the GatewayResponse as a string-to-string map of key-value pairs.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"response_templates": // Pattern: ""
		schema.MapAttribute{  /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Response templates of the GatewayResponse as a string-to-string map of key-value pairs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The response type of the associated GatewayResponse.",
		//	  "type": "string"
		//	}
		"response_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The response type of the associated GatewayResponse.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RestApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The string identifier of the associated RestApi.",
		//	  "type": "string"
		//	}
		"rest_api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The string identifier of the associated RestApi.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StatusCode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The HTTP status code for this GatewayResponse.",
		//	  "type": "string"
		//	}
		"status_code": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The HTTP status code for this GatewayResponse.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ApiGateway::GatewayResponse",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGateway::GatewayResponse").WithTerraformTypeName("awscc_apigateway_gateway_response")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"gateway_response_id": "Id",
		"response_parameters": "ResponseParameters",
		"response_templates":  "ResponseTemplates",
		"response_type":       "ResponseType",
		"rest_api_id":         "RestApiId",
		"status_code":         "StatusCode",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
