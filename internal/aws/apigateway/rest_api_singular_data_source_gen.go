// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigateway_rest_api", restApiDataSource)
}

// restApiDataSource returns the Terraform awscc_apigateway_rest_api data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGateway::RestApi resource.
func restApiDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"api_key_source_type": {
			// Property: ApiKeySourceType
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"binary_media_types": {
			// Property: BinaryMediaTypes
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "type": "string"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": true
			//	}
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"body": {
			// Property: Body
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"body_s3_location": {
			// Property: BodyS3Location
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "Bucket": {
			//	      "type": "string"
			//	    },
			//	    "ETag": {
			//	      "type": "string"
			//	    },
			//	    "Key": {
			//	      "type": "string"
			//	    },
			//	    "Version": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"bucket": {
						// Property: Bucket
						Type:     types.StringType,
						Computed: true,
					},
					"e_tag": {
						// Property: ETag
						Type:     types.StringType,
						Computed: true,
					},
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"version": {
						// Property: Version
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"clone_from": {
			// Property: CloneFrom
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"disable_execute_api_endpoint": {
			// Property: DisableExecuteApiEndpoint
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "boolean"
			//	}
			Type:     types.BoolType,
			Computed: true,
		},
		"endpoint_configuration": {
			// Property: EndpointConfiguration
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "Types": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": true
			//	    },
			//	    "VpcEndpointIds": {
			//	      "items": {
			//	        "type": "string"
			//	      },
			//	      "type": "array",
			//	      "uniqueItems": true
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"types": {
						// Property: Types
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"vpc_endpoint_ids": {
						// Property: VpcEndpointIds
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"fail_on_warnings": {
			// Property: FailOnWarnings
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "boolean"
			//	}
			Type:     types.BoolType,
			Computed: true,
		},
		"minimum_compression_size": {
			// Property: MinimumCompressionSize
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "integer"
			//	}
			Type:     types.Int64Type,
			Computed: true,
		},
		"mode": {
			// Property: Mode
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"parameters": {
			// Property: Parameters
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "patternProperties": {
			//	    "": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"policy": {
			// Property: Policy
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"rest_api_id": {
			// Property: RestApiId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"root_resource_id": {
			// Property: RootResourceId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Key",
			//	      "Value"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::ApiGateway::RestApi",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGateway::RestApi").WithTerraformTypeName("awscc_apigateway_rest_api")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_key_source_type":          "ApiKeySourceType",
		"binary_media_types":           "BinaryMediaTypes",
		"body":                         "Body",
		"body_s3_location":             "BodyS3Location",
		"bucket":                       "Bucket",
		"clone_from":                   "CloneFrom",
		"description":                  "Description",
		"disable_execute_api_endpoint": "DisableExecuteApiEndpoint",
		"e_tag":                        "ETag",
		"endpoint_configuration":       "EndpointConfiguration",
		"fail_on_warnings":             "FailOnWarnings",
		"key":                          "Key",
		"minimum_compression_size":     "MinimumCompressionSize",
		"mode":                         "Mode",
		"name":                         "Name",
		"parameters":                   "Parameters",
		"policy":                       "Policy",
		"rest_api_id":                  "RestApiId",
		"root_resource_id":             "RootResourceId",
		"tags":                         "Tags",
		"types":                        "Types",
		"value":                        "Value",
		"version":                      "Version",
		"vpc_endpoint_ids":             "VpcEndpointIds",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
