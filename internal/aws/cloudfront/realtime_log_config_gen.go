// Code generated by generators/resource/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_cloudfront_realtime_log_config", realtimeLogConfigResourceType)
}

// realtimeLogConfigResourceType returns the Terraform aws_cloudfront_realtime_log_config resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::CloudFront::RealtimeLogConfig resource type.
func realtimeLogConfigResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"end_points": {
			// Property: EndPoints
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "KinesisStreamConfig": {
			           "additionalProperties": false,
			           "properties": {
			             "RoleArn": {
			               "type": "string"
			             },
			             "StreamArn": {
			               "type": "string"
			             }
			           },
			           "$ref": "#/definitions/KinesisStreamConfig",
			           "required": [
			             "RoleArn",
			             "StreamArn"
			           ],
			           "type": "object"
			         },
			         "StreamType": {
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/EndPoint",
			       "required": [
			         "KinesisStreamConfig",
			         "StreamType"
			       ],
			       "type": "object"
			     },
			     "minItems": 1,
			     "type": "array",
			     "uniqueItems": false
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"kinesis_stream_config": {
						// Property: KinesisStreamConfig
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "RoleArn": {
						         "type": "string"
						       },
						       "StreamArn": {
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/KinesisStreamConfig",
						     "required": [
						       "RoleArn",
						       "StreamArn"
						     ],
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"role_arn": {
									// Property: RoleArn
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Required: true,
								},
								"stream_arn": {
									// Property: StreamArn
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Required: true,
					},
					"stream_type": {
						// Property: StreamType
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MinItems: 1,
				},
			),
			Required: true,
		},
		"fields": {
			// Property: Fields
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "type": "string"
			     },
			     "minItems": 1,
			     "type": "array",
			     "uniqueItems": false
			   }
			*/
			Type:     types.ListType{ElemType: types.StringType},
			Required: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Required: true,
			// Name is a force-new attribute.
		},
		"sampling_rate": {
			// Property: SamplingRate
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "number"
			   }
			*/
			Type:     types.NumberType,
			Required: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::CloudFront::RealtimeLogConfig",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::RealtimeLogConfig").WithTerraformTypeName("aws_cloudfront_realtime_log_config").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_cloudfront_realtime_log_config", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
