// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudfront_distribution", distributionDataSource)
}

// distributionDataSource returns the Terraform awscc_cloudfront_distribution data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudFront::Distribution resource.
func distributionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DistributionConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Aliases": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "CNAMEs": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "CacheBehaviors": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AllowedMethods": {
		//	            "default": [
		//	              "GET",
		//	              "HEAD"
		//	            ],
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "CachePolicyId": {
		//	            "type": "string"
		//	          },
		//	          "CachedMethods": {
		//	            "default": [
		//	              "GET",
		//	              "HEAD"
		//	            ],
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "Compress": {
		//	            "default": false,
		//	            "type": "boolean"
		//	          },
		//	          "DefaultTTL": {
		//	            "default": 86400,
		//	            "type": "number"
		//	          },
		//	          "FieldLevelEncryptionId": {
		//	            "default": "",
		//	            "type": "string"
		//	          },
		//	          "ForwardedValues": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Cookies": {
		//	                "additionalProperties": false,
		//	                "default": {
		//	                  "Forward": "none"
		//	                },
		//	                "properties": {
		//	                  "Forward": {
		//	                    "type": "string"
		//	                  },
		//	                  "WhitelistedNames": {
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": false
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Forward"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Headers": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "QueryString": {
		//	                "type": "boolean"
		//	              },
		//	              "QueryStringCacheKeys": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "required": [
		//	              "QueryString"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "FunctionAssociations": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "EventType": {
		//	                  "type": "string"
		//	                },
		//	                "FunctionARN": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "LambdaFunctionAssociations": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "EventType": {
		//	                  "type": "string"
		//	                },
		//	                "IncludeBody": {
		//	                  "type": "boolean"
		//	                },
		//	                "LambdaFunctionARN": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "MaxTTL": {
		//	            "default": 31536000,
		//	            "type": "number"
		//	          },
		//	          "MinTTL": {
		//	            "default": 0,
		//	            "type": "number"
		//	          },
		//	          "OriginRequestPolicyId": {
		//	            "type": "string"
		//	          },
		//	          "PathPattern": {
		//	            "type": "string"
		//	          },
		//	          "RealtimeLogConfigArn": {
		//	            "type": "string"
		//	          },
		//	          "ResponseHeadersPolicyId": {
		//	            "type": "string"
		//	          },
		//	          "SmoothStreaming": {
		//	            "default": false,
		//	            "type": "boolean"
		//	          },
		//	          "TargetOriginId": {
		//	            "type": "string"
		//	          },
		//	          "TrustedKeyGroups": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "TrustedSigners": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "ViewerProtocolPolicy": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "PathPattern",
		//	          "TargetOriginId",
		//	          "ViewerProtocolPolicy"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Comment": {
		//	      "default": "",
		//	      "type": "string"
		//	    },
		//	    "ContinuousDeploymentPolicyId": {
		//	      "type": "string"
		//	    },
		//	    "CustomErrorResponses": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ErrorCachingMinTTL": {
		//	            "default": 300,
		//	            "type": "number"
		//	          },
		//	          "ErrorCode": {
		//	            "type": "integer"
		//	          },
		//	          "ResponseCode": {
		//	            "type": "integer"
		//	          },
		//	          "ResponsePagePath": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "ErrorCode"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "CustomOrigin": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DNSName": {
		//	          "type": "string"
		//	        },
		//	        "HTTPPort": {
		//	          "default": 80,
		//	          "type": "integer"
		//	        },
		//	        "HTTPSPort": {
		//	          "default": 443,
		//	          "type": "integer"
		//	        },
		//	        "OriginProtocolPolicy": {
		//	          "type": "string"
		//	        },
		//	        "OriginSSLProtocols": {
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        }
		//	      },
		//	      "required": [
		//	        "DNSName",
		//	        "OriginProtocolPolicy",
		//	        "OriginSSLProtocols"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DefaultCacheBehavior": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AllowedMethods": {
		//	          "default": [
		//	            "GET",
		//	            "HEAD"
		//	          ],
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "CachePolicyId": {
		//	          "default": "",
		//	          "type": "string"
		//	        },
		//	        "CachedMethods": {
		//	          "default": [
		//	            "GET",
		//	            "HEAD"
		//	          ],
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "Compress": {
		//	          "default": false,
		//	          "type": "boolean"
		//	        },
		//	        "DefaultTTL": {
		//	          "default": 86400,
		//	          "type": "number"
		//	        },
		//	        "FieldLevelEncryptionId": {
		//	          "default": "",
		//	          "type": "string"
		//	        },
		//	        "ForwardedValues": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Cookies": {
		//	              "additionalProperties": false,
		//	              "default": {
		//	                "Forward": "none"
		//	              },
		//	              "properties": {
		//	                "Forward": {
		//	                  "type": "string"
		//	                },
		//	                "WhitelistedNames": {
		//	                  "items": {
		//	                    "type": "string"
		//	                  },
		//	                  "type": "array",
		//	                  "uniqueItems": false
		//	                }
		//	              },
		//	              "required": [
		//	                "Forward"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Headers": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": false
		//	            },
		//	            "QueryString": {
		//	              "type": "boolean"
		//	            },
		//	            "QueryStringCacheKeys": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": false
		//	            }
		//	          },
		//	          "required": [
		//	            "QueryString"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "FunctionAssociations": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "EventType": {
		//	                "type": "string"
		//	              },
		//	              "FunctionARN": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "LambdaFunctionAssociations": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "EventType": {
		//	                "type": "string"
		//	              },
		//	              "IncludeBody": {
		//	                "type": "boolean"
		//	              },
		//	              "LambdaFunctionARN": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "MaxTTL": {
		//	          "default": 31536000,
		//	          "type": "number"
		//	        },
		//	        "MinTTL": {
		//	          "default": 0,
		//	          "type": "number"
		//	        },
		//	        "OriginRequestPolicyId": {
		//	          "default": "",
		//	          "type": "string"
		//	        },
		//	        "RealtimeLogConfigArn": {
		//	          "default": "",
		//	          "type": "string"
		//	        },
		//	        "ResponseHeadersPolicyId": {
		//	          "default": "",
		//	          "type": "string"
		//	        },
		//	        "SmoothStreaming": {
		//	          "default": false,
		//	          "type": "boolean"
		//	        },
		//	        "TargetOriginId": {
		//	          "type": "string"
		//	        },
		//	        "TrustedKeyGroups": {
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "TrustedSigners": {
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "ViewerProtocolPolicy": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "TargetOriginId",
		//	        "ViewerProtocolPolicy"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DefaultRootObject": {
		//	      "default": "",
		//	      "type": "string"
		//	    },
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    },
		//	    "HttpVersion": {
		//	      "default": "http1.1",
		//	      "type": "string"
		//	    },
		//	    "IPV6Enabled": {
		//	      "type": "boolean"
		//	    },
		//	    "Logging": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Bucket": {
		//	          "type": "string"
		//	        },
		//	        "IncludeCookies": {
		//	          "default": false,
		//	          "type": "boolean"
		//	        },
		//	        "Prefix": {
		//	          "default": "",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Bucket"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OriginGroups": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Items": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "FailoverCriteria": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "StatusCodes": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Items": {
		//	                        "items": {
		//	                          "type": "integer"
		//	                        },
		//	                        "type": "array",
		//	                        "uniqueItems": false
		//	                      },
		//	                      "Quantity": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Quantity",
		//	                      "Items"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "StatusCodes"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Id": {
		//	                "type": "string"
		//	              },
		//	              "Members": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Items": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "OriginId": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "OriginId"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": false
		//	                  },
		//	                  "Quantity": {
		//	                    "type": "integer"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Quantity",
		//	                  "Items"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "Id",
		//	              "FailoverCriteria",
		//	              "Members"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "Quantity": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "Quantity"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Origins": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ConnectionAttempts": {
		//	            "type": "integer"
		//	          },
		//	          "ConnectionTimeout": {
		//	            "type": "integer"
		//	          },
		//	          "CustomOriginConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "HTTPPort": {
		//	                "default": 80,
		//	                "type": "integer"
		//	              },
		//	              "HTTPSPort": {
		//	                "default": 443,
		//	                "type": "integer"
		//	              },
		//	              "OriginKeepaliveTimeout": {
		//	                "default": 5,
		//	                "type": "integer"
		//	              },
		//	              "OriginProtocolPolicy": {
		//	                "type": "string"
		//	              },
		//	              "OriginReadTimeout": {
		//	                "default": 30,
		//	                "type": "integer"
		//	              },
		//	              "OriginSSLProtocols": {
		//	                "default": [
		//	                  "TLSv1",
		//	                  "SSLv3"
		//	                ],
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "required": [
		//	              "OriginProtocolPolicy"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "DomainName": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          },
		//	          "OriginAccessControlId": {
		//	            "type": "string"
		//	          },
		//	          "OriginCustomHeaders": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "HeaderName": {
		//	                  "type": "string"
		//	                },
		//	                "HeaderValue": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "HeaderValue",
		//	                "HeaderName"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "OriginPath": {
		//	            "default": "",
		//	            "type": "string"
		//	          },
		//	          "OriginShield": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Enabled": {
		//	                "type": "boolean"
		//	              },
		//	              "OriginShieldRegion": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "S3OriginConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "OriginAccessIdentity": {
		//	                "default": "",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "DomainName",
		//	          "Id"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "PriceClass": {
		//	      "default": "PriceClass_All",
		//	      "type": "string"
		//	    },
		//	    "Restrictions": {
		//	      "additionalProperties": false,
		//	      "default": {
		//	        "GeoRestriction": {
		//	          "RestrictionType": "none"
		//	        }
		//	      },
		//	      "properties": {
		//	        "GeoRestriction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Locations": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": false
		//	            },
		//	            "RestrictionType": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RestrictionType"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "GeoRestriction"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "S3Origin": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DNSName": {
		//	          "type": "string"
		//	        },
		//	        "OriginAccessIdentity": {
		//	          "default": "",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DNSName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Staging": {
		//	      "type": "boolean"
		//	    },
		//	    "ViewerCertificate": {
		//	      "additionalProperties": false,
		//	      "default": {
		//	        "CloudFrontDefaultCertificate": true
		//	      },
		//	      "properties": {
		//	        "AcmCertificateArn": {
		//	          "type": "string"
		//	        },
		//	        "CloudFrontDefaultCertificate": {
		//	          "type": "boolean"
		//	        },
		//	        "IamCertificateId": {
		//	          "type": "string"
		//	        },
		//	        "MinimumProtocolVersion": {
		//	          "type": "string"
		//	        },
		//	        "SslSupportMethod": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "WebACLId": {
		//	      "default": "",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Enabled",
		//	    "DefaultCacheBehavior"
		//	  ],
		//	  "type": "object"
		//	}
		"distribution_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Aliases
				"aliases": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: CNAMEs
				"cnames": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: CacheBehaviors
				"cache_behaviors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AllowedMethods
							"allowed_methods": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: CachePolicyId
							"cache_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: CachedMethods
							"cached_methods": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Compress
							"compress": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: DefaultTTL
							"default_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: FieldLevelEncryptionId
							"field_level_encryption_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ForwardedValues
							"forwarded_values": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Cookies
									"cookies": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Forward
											"forward": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: WhitelistedNames
											"whitelisted_names": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Headers
									"headers": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: QueryString
									"query_string": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: QueryStringCacheKeys
									"query_string_cache_keys": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: FunctionAssociations
							"function_associations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: EventType
										"event_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: FunctionARN
										"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: LambdaFunctionAssociations
							"lambda_function_associations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: EventType
										"event_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: IncludeBody
										"include_body": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: LambdaFunctionARN
										"lambda_function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: MaxTTL
							"max_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: MinTTL
							"min_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OriginRequestPolicyId
							"origin_request_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PathPattern
							"path_pattern": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RealtimeLogConfigArn
							"realtime_log_config_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ResponseHeadersPolicyId
							"response_headers_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SmoothStreaming
							"smooth_streaming": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TargetOriginId
							"target_origin_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TrustedKeyGroups
							"trusted_key_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: TrustedSigners
							"trusted_signers": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ViewerProtocolPolicy
							"viewer_protocol_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Comment
				"comment": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ContinuousDeploymentPolicyId
				"continuous_deployment_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CustomErrorResponses
				"custom_error_responses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ErrorCachingMinTTL
							"error_caching_min_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ErrorCode
							"error_code": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ResponseCode
							"response_code": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ResponsePagePath
							"response_page_path": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CustomOrigin
				"custom_origin": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DNSName
						"dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HTTPPort
						"http_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HTTPSPort
						"https_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OriginProtocolPolicy
						"origin_protocol_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OriginSSLProtocols
						"origin_ssl_protocols": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DefaultCacheBehavior
				"default_cache_behavior": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AllowedMethods
						"allowed_methods": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: CachePolicyId
						"cache_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CachedMethods
						"cached_methods": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Compress
						"compress": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DefaultTTL
						"default_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: FieldLevelEncryptionId
						"field_level_encryption_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ForwardedValues
						"forwarded_values": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Cookies
								"cookies": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Forward
										"forward": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: WhitelistedNames
										"whitelisted_names": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Headers
								"headers": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: QueryString
								"query_string": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: QueryStringCacheKeys
								"query_string_cache_keys": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: FunctionAssociations
						"function_associations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: EventType
									"event_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: FunctionARN
									"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LambdaFunctionAssociations
						"lambda_function_associations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: EventType
									"event_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IncludeBody
									"include_body": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: LambdaFunctionARN
									"lambda_function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaxTTL
						"max_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MinTTL
						"min_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OriginRequestPolicyId
						"origin_request_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RealtimeLogConfigArn
						"realtime_log_config_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ResponseHeadersPolicyId
						"response_headers_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SmoothStreaming
						"smooth_streaming": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TargetOriginId
						"target_origin_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TrustedKeyGroups
						"trusted_key_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TrustedSigners
						"trusted_signers": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ViewerProtocolPolicy
						"viewer_protocol_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DefaultRootObject
				"default_root_object": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HttpVersion
				"http_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IPV6Enabled
				"ipv6_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Logging
				"logging": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Bucket
						"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: IncludeCookies
						"include_cookies": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: OriginGroups
				"origin_groups": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Items
						"items": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: FailoverCriteria
									"failover_criteria": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: StatusCodes
											"status_codes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Items
													"items": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.Int64Type,
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: Quantity
													"quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Id
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Members
									"members": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Items
											"items": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: OriginId
														"origin_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Quantity
											"quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Quantity
						"quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Origins
				"origins": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ConnectionAttempts
							"connection_attempts": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ConnectionTimeout
							"connection_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: CustomOriginConfig
							"custom_origin_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: HTTPPort
									"http_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: HTTPSPort
									"https_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: OriginKeepaliveTimeout
									"origin_keepalive_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: OriginProtocolPolicy
									"origin_protocol_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: OriginReadTimeout
									"origin_read_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: OriginSSLProtocols
									"origin_ssl_protocols": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: DomainName
							"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OriginAccessControlId
							"origin_access_control_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OriginCustomHeaders
							"origin_custom_headers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: HeaderName
										"header_name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: HeaderValue
										"header_value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OriginPath
							"origin_path": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OriginShield
							"origin_shield": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Enabled
									"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: OriginShieldRegion
									"origin_shield_region": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: S3OriginConfig
							"s3_origin_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: OriginAccessIdentity
									"origin_access_identity": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PriceClass
				"price_class": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Restrictions
				"restrictions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: GeoRestriction
						"geo_restriction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Locations
								"locations": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RestrictionType
								"restriction_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Origin
				"s3_origin": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DNSName
						"dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OriginAccessIdentity
						"origin_access_identity": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Staging
				"staging": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ViewerCertificate
				"viewer_certificate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AcmCertificateArn
						"acm_certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudFrontDefaultCertificate
						"cloudfront_default_certificate": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: IamCertificateId
						"iam_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MinimumProtocolVersion
						"minimum_protocol_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SslSupportMethod
						"ssl_support_method": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: WebACLId
				"web_acl_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudFront::Distribution",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::Distribution").WithTerraformTypeName("awscc_cloudfront_distribution")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"acm_certificate_arn":             "AcmCertificateArn",
		"aliases":                         "Aliases",
		"allowed_methods":                 "AllowedMethods",
		"bucket":                          "Bucket",
		"cache_behaviors":                 "CacheBehaviors",
		"cache_policy_id":                 "CachePolicyId",
		"cached_methods":                  "CachedMethods",
		"cloudfront_default_certificate":  "CloudFrontDefaultCertificate",
		"cnames":                          "CNAMEs",
		"comment":                         "Comment",
		"compress":                        "Compress",
		"connection_attempts":             "ConnectionAttempts",
		"connection_timeout":              "ConnectionTimeout",
		"continuous_deployment_policy_id": "ContinuousDeploymentPolicyId",
		"cookies":                         "Cookies",
		"custom_error_responses":          "CustomErrorResponses",
		"custom_origin":                   "CustomOrigin",
		"custom_origin_config":            "CustomOriginConfig",
		"default_cache_behavior":          "DefaultCacheBehavior",
		"default_root_object":             "DefaultRootObject",
		"default_ttl":                     "DefaultTTL",
		"distribution_config":             "DistributionConfig",
		"dns_name":                        "DNSName",
		"domain_name":                     "DomainName",
		"enabled":                         "Enabled",
		"error_caching_min_ttl":           "ErrorCachingMinTTL",
		"error_code":                      "ErrorCode",
		"event_type":                      "EventType",
		"failover_criteria":               "FailoverCriteria",
		"field_level_encryption_id":       "FieldLevelEncryptionId",
		"forward":                         "Forward",
		"forwarded_values":                "ForwardedValues",
		"function_arn":                    "FunctionARN",
		"function_associations":           "FunctionAssociations",
		"geo_restriction":                 "GeoRestriction",
		"header_name":                     "HeaderName",
		"header_value":                    "HeaderValue",
		"headers":                         "Headers",
		"http_port":                       "HTTPPort",
		"http_version":                    "HttpVersion",
		"https_port":                      "HTTPSPort",
		"iam_certificate_id":              "IamCertificateId",
		"id":                              "Id",
		"include_body":                    "IncludeBody",
		"include_cookies":                 "IncludeCookies",
		"ipv6_enabled":                    "IPV6Enabled",
		"items":                           "Items",
		"key":                             "Key",
		"lambda_function_arn":             "LambdaFunctionARN",
		"lambda_function_associations":    "LambdaFunctionAssociations",
		"locations":                       "Locations",
		"logging":                         "Logging",
		"max_ttl":                         "MaxTTL",
		"members":                         "Members",
		"min_ttl":                         "MinTTL",
		"minimum_protocol_version":        "MinimumProtocolVersion",
		"origin_access_control_id":        "OriginAccessControlId",
		"origin_access_identity":          "OriginAccessIdentity",
		"origin_custom_headers":           "OriginCustomHeaders",
		"origin_groups":                   "OriginGroups",
		"origin_id":                       "OriginId",
		"origin_keepalive_timeout":        "OriginKeepaliveTimeout",
		"origin_path":                     "OriginPath",
		"origin_protocol_policy":          "OriginProtocolPolicy",
		"origin_read_timeout":             "OriginReadTimeout",
		"origin_request_policy_id":        "OriginRequestPolicyId",
		"origin_shield":                   "OriginShield",
		"origin_shield_region":            "OriginShieldRegion",
		"origin_ssl_protocols":            "OriginSSLProtocols",
		"origins":                         "Origins",
		"path_pattern":                    "PathPattern",
		"prefix":                          "Prefix",
		"price_class":                     "PriceClass",
		"quantity":                        "Quantity",
		"query_string":                    "QueryString",
		"query_string_cache_keys":         "QueryStringCacheKeys",
		"realtime_log_config_arn":         "RealtimeLogConfigArn",
		"response_code":                   "ResponseCode",
		"response_headers_policy_id":      "ResponseHeadersPolicyId",
		"response_page_path":              "ResponsePagePath",
		"restriction_type":                "RestrictionType",
		"restrictions":                    "Restrictions",
		"s3_origin":                       "S3Origin",
		"s3_origin_config":                "S3OriginConfig",
		"smooth_streaming":                "SmoothStreaming",
		"ssl_support_method":              "SslSupportMethod",
		"staging":                         "Staging",
		"status_codes":                    "StatusCodes",
		"tags":                            "Tags",
		"target_origin_id":                "TargetOriginId",
		"trusted_key_groups":              "TrustedKeyGroups",
		"trusted_signers":                 "TrustedSigners",
		"value":                           "Value",
		"viewer_certificate":              "ViewerCertificate",
		"viewer_protocol_policy":          "ViewerProtocolPolicy",
		"web_acl_id":                      "WebACLId",
		"whitelisted_names":               "WhitelistedNames",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
