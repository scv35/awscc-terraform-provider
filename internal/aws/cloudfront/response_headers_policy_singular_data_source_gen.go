// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudfront_response_headers_policy", responseHeadersPolicyDataSource)
}

// responseHeadersPolicyDataSource returns the Terraform awscc_cloudfront_response_headers_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudFront::ResponseHeadersPolicy resource.
func responseHeadersPolicyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"last_modified_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseHeadersPolicyConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Comment": {
		//	      "type": "string"
		//	    },
		//	    "CorsConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AccessControlAllowCredentials": {
		//	          "type": "boolean"
		//	        },
		//	        "AccessControlAllowHeaders": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Items": {
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "Items"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "AccessControlAllowMethods": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Items": {
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "Items"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "AccessControlAllowOrigins": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Items": {
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "Items"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "AccessControlExposeHeaders": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Items": {
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "Items"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "AccessControlMaxAgeSec": {
		//	          "type": "integer"
		//	        },
		//	        "OriginOverride": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "required": [
		//	        "AccessControlAllowOrigins",
		//	        "AccessControlAllowHeaders",
		//	        "AccessControlAllowMethods",
		//	        "AccessControlAllowCredentials",
		//	        "OriginOverride"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "CustomHeadersConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Items": {
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Header": {
		//	                "type": "string"
		//	              },
		//	              "Override": {
		//	                "type": "boolean"
		//	              },
		//	              "Value": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Header",
		//	              "Value",
		//	              "Override"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        }
		//	      },
		//	      "required": [
		//	        "Items"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Name": {
		//	      "type": "string"
		//	    },
		//	    "SecurityHeadersConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ContentSecurityPolicy": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ContentSecurityPolicy": {
		//	              "type": "string"
		//	            },
		//	            "Override": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "Override",
		//	            "ContentSecurityPolicy"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ContentTypeOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Override": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "Override"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "FrameOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "FrameOption": {
		//	              "pattern": "^(DENY|SAMEORIGIN)$",
		//	              "type": "string"
		//	            },
		//	            "Override": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "Override",
		//	            "FrameOption"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ReferrerPolicy": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Override": {
		//	              "type": "boolean"
		//	            },
		//	            "ReferrerPolicy": {
		//	              "pattern": "^(no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Override",
		//	            "ReferrerPolicy"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "StrictTransportSecurity": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AccessControlMaxAgeSec": {
		//	              "type": "integer"
		//	            },
		//	            "IncludeSubdomains": {
		//	              "type": "boolean"
		//	            },
		//	            "Override": {
		//	              "type": "boolean"
		//	            },
		//	            "Preload": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "Override",
		//	            "AccessControlMaxAgeSec"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "XSSProtection": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ModeBlock": {
		//	              "type": "boolean"
		//	            },
		//	            "Override": {
		//	              "type": "boolean"
		//	            },
		//	            "Protection": {
		//	              "type": "boolean"
		//	            },
		//	            "ReportUri": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Override",
		//	            "Protection"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ServerTimingHeadersConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "SamplingRate": {
		//	          "maximum": 100,
		//	          "minimum": 0,
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "Enabled"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "Name"
		//	  ],
		//	  "type": "object"
		//	}
		"response_headers_policy_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Comment
				"comment": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CorsConfig
				"cors_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AccessControlAllowCredentials
						"access_control_allow_credentials": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: AccessControlAllowHeaders
						"access_control_allow_headers": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Items
								"items": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: AccessControlAllowMethods
						"access_control_allow_methods": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Items
								"items": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: AccessControlAllowOrigins
						"access_control_allow_origins": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Items
								"items": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: AccessControlExposeHeaders
						"access_control_expose_headers": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Items
								"items": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: AccessControlMaxAgeSec
						"access_control_max_age_sec": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OriginOverride
						"origin_override": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CustomHeadersConfig
				"custom_headers_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Items
						"items": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Header
									"header": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Override
									"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SecurityHeadersConfig
				"security_headers_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ContentSecurityPolicy
						"content_security_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ContentSecurityPolicy
								"content_security_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Override
								"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ContentTypeOptions
						"content_type_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Override
								"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: FrameOptions
						"frame_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: FrameOption
								"frame_option": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Override
								"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ReferrerPolicy
						"referrer_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Override
								"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ReferrerPolicy
								"referrer_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: StrictTransportSecurity
						"strict_transport_security": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AccessControlMaxAgeSec
								"access_control_max_age_sec": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeSubdomains
								"include_subdomains": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Override
								"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Preload
								"preload": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: XSSProtection
						"xss_protection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ModeBlock
								"mode_block": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Override
								"override": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Protection
								"protection": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ReportUri
								"report_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ServerTimingHeadersConfig
				"server_timing_headers_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SamplingRate
						"sampling_rate": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudFront::ResponseHeadersPolicy",
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::ResponseHeadersPolicy").WithTerraformTypeName("awscc_cloudfront_response_headers_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_control_allow_credentials": "AccessControlAllowCredentials",
		"access_control_allow_headers":     "AccessControlAllowHeaders",
		"access_control_allow_methods":     "AccessControlAllowMethods",
		"access_control_allow_origins":     "AccessControlAllowOrigins",
		"access_control_expose_headers":    "AccessControlExposeHeaders",
		"access_control_max_age_sec":       "AccessControlMaxAgeSec",
		"comment":                          "Comment",
		"content_security_policy":          "ContentSecurityPolicy",
		"content_type_options":             "ContentTypeOptions",
		"cors_config":                      "CorsConfig",
		"custom_headers_config":            "CustomHeadersConfig",
		"enabled":                          "Enabled",
		"frame_option":                     "FrameOption",
		"frame_options":                    "FrameOptions",
		"header":                           "Header",
		"id":                               "Id",
		"include_subdomains":               "IncludeSubdomains",
		"items":                            "Items",
		"last_modified_time":               "LastModifiedTime",
		"mode_block":                       "ModeBlock",
		"name":                             "Name",
		"origin_override":                  "OriginOverride",
		"override":                         "Override",
		"preload":                          "Preload",
		"protection":                       "Protection",
		"referrer_policy":                  "ReferrerPolicy",
		"report_uri":                       "ReportUri",
		"response_headers_policy_config":   "ResponseHeadersPolicyConfig",
		"sampling_rate":                    "SamplingRate",
		"security_headers_config":          "SecurityHeadersConfig",
		"server_timing_headers_config":     "ServerTimingHeadersConfig",
		"strict_transport_security":        "StrictTransportSecurity",
		"value":                            "Value",
		"xss_protection":                   "XSSProtection",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
