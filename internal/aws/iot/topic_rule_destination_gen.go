// Code generated by generators/resource/main.go; DO NOT EDIT.

package iot

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_iot_topic_rule_destination", topicRuleDestinationResourceType)
}

// topicRuleDestinationResourceType returns the Terraform aws_iot_topic_rule_destination resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::IoT::TopicRuleDestination resource type.
func topicRuleDestinationResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "Amazon Resource Name (ARN).",
			//   "type": "string"
			// }
			Description: "Amazon Resource Name (ARN).",
			Type:        types.StringType,
			Computed:    true,
		},
		"http_url_properties": {
			// Property: HttpUrlProperties
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "ConfirmationUrl": {
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"confirmation_url": {
						// Property: ConfirmationUrl
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// HttpUrlProperties is a force-new attribute.
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "ENABLED",
			//     "IN_PROGRESS",
			//     "DISABLED"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"status_reason": {
			// Property: StatusReason
			// CloudFormation resource type schema:
			// {
			//   "description": "The reasoning for the current status of the TopicRuleDestination.",
			//   "type": "string"
			// }
			Description: "The reasoning for the current status of the TopicRuleDestination.",
			Type:        types.StringType,
			Computed:    true,
		},
		"vpc_properties": {
			// Property: VpcProperties
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "RoleArn": {
			//       "type": "string"
			//     },
			//     "SecurityGroups": {
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array",
			//       "uniqueItems": true
			//     },
			//     "SubnetIds": {
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array",
			//       "uniqueItems": true
			//     },
			//     "VpcId": {
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"role_arn": {
						// Property: RoleArn
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Optional: true,
					},
					"security_groups": {
						// Property: SecurityGroups
						// CloudFormation resource type schema:
						// {
						//   "items": {
						//     "type": "string"
						//   },
						//   "type": "array",
						//   "uniqueItems": true
						// }
						// Ordered set.
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"subnet_ids": {
						// Property: SubnetIds
						// CloudFormation resource type schema:
						// {
						//   "items": {
						//     "type": "string"
						//   },
						//   "type": "array",
						//   "uniqueItems": true
						// }
						// Ordered set.
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"vpc_id": {
						// Property: VpcId
						// CloudFormation resource type schema:
						// {
						//   "type": "string"
						// }
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// VpcProperties is a force-new attribute.
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::IoT::TopicRuleDestination",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoT::TopicRuleDestination").WithTerraformTypeName("aws_iot_topic_rule_destination").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_iot_topic_rule_destination", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
