// Code generated by generators/resource/main.go; DO NOT EDIT.

package macie

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_macie_session", sessionResource)
}

// sessionResource returns the Terraform awscc_macie_session resource.
// This Terraform resource corresponds to the CloudFormation AWS::Macie::Session resource.
func sessionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"aws_account_id": {
			// Property: AwsAccountId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "AWS account ID of customer",
			//	  "type": "string"
			//	}
			Description: "AWS account ID of customer",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"finding_publishing_frequency": {
			// Property: FindingPublishingFrequency
			// CloudFormation resource type schema:
			//
			//	{
			//	  "default": "SIX_HOURS",
			//	  "description": "A enumeration value that specifies how frequently finding updates are published.",
			//	  "enum": [
			//	    "FIFTEEN_MINUTES",
			//	    "ONE_HOUR",
			//	    "SIX_HOURS"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "A enumeration value that specifies how frequently finding updates are published.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"FIFTEEN_MINUTES",
					"ONE_HOUR",
					"SIX_HOURS",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.StringValue("SIX_HOURS")),
				resource.UseStateForUnknown(),
			},
		},
		"service_role": {
			// Property: ServiceRole
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Service role used by Macie",
			//	  "type": "string"
			//	}
			Description: "Service role used by Macie",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			//
			//	{
			//	  "default": "ENABLED",
			//	  "description": "A enumeration value that specifies the status of the Macie Session.",
			//	  "enum": [
			//	    "ENABLED",
			//	    "PAUSED"
			//	  ],
			//	  "type": "string"
			//	}
			Description: "A enumeration value that specifies the status of the Macie Session.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"ENABLED",
					"PAUSED",
				}),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				DefaultValue(types.StringValue("ENABLED")),
				resource.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "The AWS::Macie::Session resource specifies a new Amazon Macie session. A session is an object that represents the Amazon Macie service. A session is required for Amazon Macie to become operational.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Macie::Session").WithTerraformTypeName("awscc_macie_session")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"aws_account_id":               "AwsAccountId",
		"finding_publishing_frequency": "FindingPublishingFrequency",
		"service_role":                 "ServiceRole",
		"status":                       "Status",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
