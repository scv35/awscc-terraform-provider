// Code generated by generators/resource/main.go; DO NOT EDIT.

package evidently

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_evidently_feature", featureResourceType)
}

// featureResourceType returns the Terraform awscc_evidently_feature resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Evidently::Feature resource type.
func featureResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 2048,
			//   "minLength": 0,
			//   "pattern": "arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*/feature/[-a-zA-Z0-9._]*",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"default_variation": {
			// Property: DefaultVariation
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 127,
			//   "minLength": 1,
			//   "pattern": "[-a-zA-Z0-9._]*",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 127),
				validate.StringMatch(regexp.MustCompile("[-a-zA-Z0-9._]*"), ""),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 160,
			//   "minLength": 0,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 160),
			},
		},
		"entity_overrides": {
			// Property: EntityOverrides
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "EntityId": {
			//         "type": "string"
			//       },
			//       "Variation": {
			//         "maxLength": 127,
			//         "minLength": 1,
			//         "pattern": "[-a-zA-Z0-9._]*",
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 20,
			//   "minItems": 0,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"entity_id": {
						// Property: EntityId
						Type:     types.StringType,
						Optional: true,
					},
					"variation": {
						// Property: Variation
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 127),
							validate.StringMatch(regexp.MustCompile("[-a-zA-Z0-9._]*"), ""),
						},
					},
				},
				tfsdk.SetNestedAttributesOptions{},
			),
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(0, 20),
			},
		},
		"evaluation_strategy": {
			// Property: EvaluationStrategy
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "ALL_RULES",
			//     "DEFAULT_VARIATION"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"ALL_RULES",
					"DEFAULT_VARIATION",
				}),
			},
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 127,
			//   "minLength": 1,
			//   "pattern": "[-a-zA-Z0-9._]*",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 127),
				validate.StringMatch(regexp.MustCompile("[-a-zA-Z0-9._]*"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
		"project": {
			// Property: Project
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 2048,
			//   "minLength": 0,
			//   "pattern": "([-a-zA-Z0-9._]*)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*)",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 2048),
				validate.StringMatch(regexp.MustCompile("([-a-zA-Z0-9._]*)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*)"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "An array of key-value pairs to apply to this resource.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A key-value pair to associate with a resource.",
			//     "properties": {
			//       "Key": {
			//         "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "pattern": "",
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "An array of key-value pairs to apply to this resource.",
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
				},
				tfsdk.SetNestedAttributesOptions{},
			),
			Optional: true,
		},
		"variations": {
			// Property: Variations
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": true,
			//   "items": {
			//     "additionalProperties": false,
			//     "oneOf": [
			//       {
			//         "required": [
			//           "VariationName",
			//           "StringValue"
			//         ]
			//       },
			//       {
			//         "required": [
			//           "VariationName",
			//           "BooleanValue"
			//         ]
			//       },
			//       {
			//         "required": [
			//           "VariationName",
			//           "LongValue"
			//         ]
			//       },
			//       {
			//         "required": [
			//           "VariationName",
			//           "DoubleValue"
			//         ]
			//       }
			//     ],
			//     "properties": {
			//       "BooleanValue": {
			//         "type": "boolean"
			//       },
			//       "DoubleValue": {
			//         "type": "number"
			//       },
			//       "LongValue": {
			//         "type": "number"
			//       },
			//       "StringValue": {
			//         "maxLength": 512,
			//         "minLength": 0,
			//         "type": "string"
			//       },
			//       "VariationName": {
			//         "maxLength": 127,
			//         "minLength": 1,
			//         "pattern": "[-a-zA-Z0-9._]*",
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 5,
			//   "minItems": 1,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"boolean_value": {
						// Property: BooleanValue
						Type:     types.BoolType,
						Optional: true,
					},
					"double_value": {
						// Property: DoubleValue
						Type:     types.Float64Type,
						Optional: true,
					},
					"long_value": {
						// Property: LongValue
						Type:     types.Float64Type,
						Optional: true,
					},
					"string_value": {
						// Property: StringValue
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 512),
						},
					},
					"variation_name": {
						// Property: VariationName
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 127),
							validate.StringMatch(regexp.MustCompile("[-a-zA-Z0-9._]*"), ""),
						},
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(1, 5),
				validate.UniqueItems(),
				validate.RequiredAttributes(
					validate.OneOfRequired(
						validate.Required(
							"variation_name",
							"string_value",
						),
						validate.Required(
							"variation_name",
							"boolean_value",
						),
						validate.Required(
							"variation_name",
							"long_value",
						),
						validate.Required(
							"variation_name",
							"double_value",
						),
					),
				),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::Evidently::Feature.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Evidently::Feature").WithTerraformTypeName("awscc_evidently_feature")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                 "Arn",
		"boolean_value":       "BooleanValue",
		"default_variation":   "DefaultVariation",
		"description":         "Description",
		"double_value":        "DoubleValue",
		"entity_id":           "EntityId",
		"entity_overrides":    "EntityOverrides",
		"evaluation_strategy": "EvaluationStrategy",
		"key":                 "Key",
		"long_value":          "LongValue",
		"name":                "Name",
		"project":             "Project",
		"string_value":        "StringValue",
		"tags":                "Tags",
		"value":               "Value",
		"variation":           "Variation",
		"variation_name":      "VariationName",
		"variations":          "Variations",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
