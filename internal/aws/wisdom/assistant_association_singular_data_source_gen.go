// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package wisdom

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_wisdom_assistant_association", assistantAssociationDataSourceType)
}

// assistantAssociationDataSourceType returns the Terraform awscc_wisdom_assistant_association data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::Wisdom::AssistantAssociation resource type.
func assistantAssociationDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"assistant_arn": {
			// Property: AssistantArn
			// CloudFormation resource type schema:
			// {
			//   "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"assistant_association_arn": {
			// Property: AssistantAssociationArn
			// CloudFormation resource type schema:
			// {
			//   "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"assistant_association_id": {
			// Property: AssistantAssociationId
			// CloudFormation resource type schema:
			// {
			//   "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"assistant_id": {
			// Property: AssistantId
			// CloudFormation resource type schema:
			// {
			//   "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"association": {
			// Property: Association
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "KnowledgeBaseId": {
			//       "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "KnowledgeBaseId"
			//   ],
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"knowledge_base_id": {
						// Property: KnowledgeBaseId
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"association_type": {
			// Property: AssociationType
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "KNOWLEDGE_BASE"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "pattern": "",
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 256,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Attributes: tfsdk.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.SetNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Wisdom::AssistantAssociation",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Wisdom::AssistantAssociation").WithTerraformTypeName("awscc_wisdom_assistant_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"assistant_arn":             "AssistantArn",
		"assistant_association_arn": "AssistantAssociationArn",
		"assistant_association_id":  "AssistantAssociationId",
		"assistant_id":              "AssistantId",
		"association":               "Association",
		"association_type":          "AssociationType",
		"key":                       "Key",
		"knowledge_base_id":         "KnowledgeBaseId",
		"tags":                      "Tags",
		"value":                     "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return singularDataSourceType, nil
}
