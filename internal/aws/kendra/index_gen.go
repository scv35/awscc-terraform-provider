// Code generated by generators/resource/main.go; DO NOT EDIT.

package kendra

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_kendra_index", indexResourceType)
}

// indexResourceType returns the Terraform aws_kendra_index resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Kendra::Index resource type.
func indexResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 1000,
			     "$ref": "#/definitions/Arn",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"capacity_units": {
			// Property: CapacityUnits
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "QueryCapacityUnits": {
			         "$ref": "#/definitions/QueryCapacityUnits",
			         "type": "integer"
			       },
			       "StorageCapacityUnits": {
			         "$ref": "#/definitions/StorageCapacityUnits",
			         "type": "integer"
			       }
			     },
			     "$ref": "#/definitions/CapacityUnitsConfiguration",
			     "required": [
			       "StorageCapacityUnits",
			       "QueryCapacityUnits"
			     ],
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"query_capacity_units": {
						// Property: QueryCapacityUnits
						// CloudFormation resource type schema:
						/*
						   {
						     "$ref": "#/definitions/QueryCapacityUnits",
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Required: true,
					},
					"storage_capacity_units": {
						// Property: StorageCapacityUnits
						// CloudFormation resource type schema:
						/*
						   {
						     "$ref": "#/definitions/StorageCapacityUnits",
						     "type": "integer"
						   }
						*/
						Type:     types.NumberType,
						Required: true,
					},
				},
			),
			Optional: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 1000,
			     "$ref": "#/definitions/Description",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"document_metadata_configurations": {
			// Property: DocumentMetadataConfigurations
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "Name": {
			           "maxLength": 30,
			           "minLength": 1,
			           "$ref": "#/definitions/DocumentMetadataConfigurationName",
			           "type": "string"
			         },
			         "Relevance": {
			           "additionalProperties": false,
			           "properties": {
			             "Duration": {
			               "maxLength": 10,
			               "minLength": 1,
			               "pattern": "",
			               "$ref": "#/definitions/Duration",
			               "type": "string"
			             },
			             "Freshness": {
			               "$ref": "#/definitions/Freshness",
			               "type": "boolean"
			             },
			             "Importance": {
			               "$ref": "#/definitions/Importance",
			               "type": "integer"
			             },
			             "RankOrder": {
			               "enum": [
			                 "ASCENDING",
			                 "DESCENDING"
			               ],
			               "$ref": "#/definitions/Order",
			               "type": "string"
			             },
			             "ValueImportanceItems": {
			               "items": {
			                 "additionalProperties": false,
			                 "properties": {
			                   "Key": {
			                     "maxLength": 50,
			                     "minLength": 1,
			                     "$ref": "#/definitions/ValueImportanceItemKey",
			                     "type": "string"
			                   },
			                   "Value": {
			                     "$ref": "#/definitions/Importance",
			                     "type": "integer"
			                   }
			                 },
			                 "$ref": "#/definitions/ValueImportanceItem",
			                 "type": "object"
			               },
			               "$ref": "#/definitions/ValueImportanceItems",
			               "type": "array"
			             }
			           },
			           "$ref": "#/definitions/Relevance",
			           "type": "object"
			         },
			         "Search": {
			           "additionalProperties": false,
			           "properties": {
			             "Displayable": {
			               "type": "boolean"
			             },
			             "Facetable": {
			               "type": "boolean"
			             },
			             "Searchable": {
			               "type": "boolean"
			             },
			             "Sortable": {
			               "type": "boolean"
			             }
			           },
			           "$ref": "#/definitions/Search",
			           "type": "object"
			         },
			         "Type": {
			           "enum": [
			             "STRING_VALUE",
			             "STRING_LIST_VALUE",
			             "LONG_VALUE",
			             "DATE_VALUE"
			           ],
			           "$ref": "#/definitions/DocumentAttributeValueType",
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/DocumentMetadataConfiguration",
			       "required": [
			         "Name",
			         "Type"
			       ],
			       "type": "object"
			     },
			     "maxItems": 500,
			     "$ref": "#/definitions/DocumentMetadataConfigurationList",
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"name": {
						// Property: Name
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 30,
						     "minLength": 1,
						     "$ref": "#/definitions/DocumentMetadataConfigurationName",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
					"relevance": {
						// Property: Relevance
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "Duration": {
						         "maxLength": 10,
						         "minLength": 1,
						         "pattern": "",
						         "$ref": "#/definitions/Duration",
						         "type": "string"
						       },
						       "Freshness": {
						         "$ref": "#/definitions/Freshness",
						         "type": "boolean"
						       },
						       "Importance": {
						         "$ref": "#/definitions/Importance",
						         "type": "integer"
						       },
						       "RankOrder": {
						         "enum": [
						           "ASCENDING",
						           "DESCENDING"
						         ],
						         "$ref": "#/definitions/Order",
						         "type": "string"
						       },
						       "ValueImportanceItems": {
						         "items": {
						           "additionalProperties": false,
						           "properties": {
						             "Key": {
						               "maxLength": 50,
						               "minLength": 1,
						               "$ref": "#/definitions/ValueImportanceItemKey",
						               "type": "string"
						             },
						             "Value": {
						               "$ref": "#/definitions/Importance",
						               "type": "integer"
						             }
						           },
						           "$ref": "#/definitions/ValueImportanceItem",
						           "type": "object"
						         },
						         "$ref": "#/definitions/ValueImportanceItems",
						         "type": "array"
						       }
						     },
						     "$ref": "#/definitions/Relevance",
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"duration": {
									// Property: Duration
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 10,
									     "minLength": 1,
									     "pattern": "",
									     "$ref": "#/definitions/Duration",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"freshness": {
									// Property: Freshness
									// CloudFormation resource type schema:
									/*
									   {
									     "$ref": "#/definitions/Freshness",
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Optional: true,
								},
								"importance": {
									// Property: Importance
									// CloudFormation resource type schema:
									/*
									   {
									     "$ref": "#/definitions/Importance",
									     "type": "integer"
									   }
									*/
									Type:     types.NumberType,
									Optional: true,
								},
								"rank_order": {
									// Property: RankOrder
									// CloudFormation resource type schema:
									/*
									   {
									     "enum": [
									       "ASCENDING",
									       "DESCENDING"
									     ],
									     "$ref": "#/definitions/Order",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"value_importance_items": {
									// Property: ValueImportanceItems
									// CloudFormation resource type schema:
									/*
									   {
									     "items": {
									       "additionalProperties": false,
									       "properties": {
									         "Key": {
									           "maxLength": 50,
									           "minLength": 1,
									           "$ref": "#/definitions/ValueImportanceItemKey",
									           "type": "string"
									         },
									         "Value": {
									           "$ref": "#/definitions/Importance",
									           "type": "integer"
									         }
									       },
									       "$ref": "#/definitions/ValueImportanceItem",
									       "type": "object"
									     },
									     "$ref": "#/definitions/ValueImportanceItems",
									     "type": "array"
									   }
									*/
									Attributes: schema.ListNestedAttributes(
										map[string]schema.Attribute{
											"key": {
												// Property: Key
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 50,
												     "minLength": 1,
												     "$ref": "#/definitions/ValueImportanceItemKey",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Optional: true,
											},
											"value": {
												// Property: Value
												// CloudFormation resource type schema:
												/*
												   {
												     "$ref": "#/definitions/Importance",
												     "type": "integer"
												   }
												*/
												Type:     types.NumberType,
												Optional: true,
											},
										},
										schema.ListNestedAttributesOptions{},
									),
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"search": {
						// Property: Search
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "Displayable": {
						         "type": "boolean"
						       },
						       "Facetable": {
						         "type": "boolean"
						       },
						       "Searchable": {
						         "type": "boolean"
						       },
						       "Sortable": {
						         "type": "boolean"
						       }
						     },
						     "$ref": "#/definitions/Search",
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"displayable": {
									// Property: Displayable
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Optional: true,
								},
								"facetable": {
									// Property: Facetable
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Optional: true,
								},
								"searchable": {
									// Property: Searchable
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Optional: true,
								},
								"sortable": {
									// Property: Sortable
									// CloudFormation resource type schema:
									/*
									   {
									     "type": "boolean"
									   }
									*/
									Type:     types.BoolType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
					"type": {
						// Property: Type
						// CloudFormation resource type schema:
						/*
						   {
						     "enum": [
						       "STRING_VALUE",
						       "STRING_LIST_VALUE",
						       "LONG_VALUE",
						       "DATE_VALUE"
						     ],
						     "$ref": "#/definitions/DocumentAttributeValueType",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MaxItems: 500,
				},
			),
			Optional: true,
		},
		"edition": {
			// Property: Edition
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Edition of index",
			     "enum": [
			       "DEVELOPER_EDITION",
			       "ENTERPRISE_EDITION"
			     ],
			     "$ref": "#/definitions/Edition",
			     "type": "string"
			   }
			*/
			Description: "Edition of index",
			Type:        types.StringType,
			Required:    true,
			// Edition is a force-new attribute.
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Unique ID of index",
			     "maxLength": 36,
			     "minLength": 36,
			     "$ref": "#/definitions/Id",
			     "type": "string"
			   }
			*/
			Description: "Unique ID of index",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Name of index",
			     "maxLength": 1000,
			     "minLength": 1,
			     "$ref": "#/definitions/Name",
			     "type": "string"
			   }
			*/
			Description: "Name of index",
			Type:        types.StringType,
			Required:    true,
		},
		"role_arn": {
			// Property: RoleArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Role Arn",
			     "maxLength": 1284,
			     "minLength": 1,
			     "pattern": "",
			     "$ref": "#/definitions/RoleArn",
			     "type": "string"
			   }
			*/
			Description: "Role Arn",
			Type:        types.StringType,
			Required:    true,
		},
		"server_side_encryption_configuration": {
			// Property: ServerSideEncryptionConfiguration
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "KmsKeyId": {
			         "maxLength": 2048,
			         "minLength": 1,
			         "$ref": "#/definitions/KmsKeyId",
			         "type": "string"
			       }
			     },
			     "$ref": "#/definitions/ServerSideEncryptionConfiguration",
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"kms_key_id": {
						// Property: KmsKeyId
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 2048,
						     "minLength": 1,
						     "$ref": "#/definitions/KmsKeyId",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			// ServerSideEncryptionConfiguration is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "List of tags",
			     "items": {
			       "additionalProperties": false,
			       "description": "A label for tagging Kendra resources",
			       "properties": {
			         "Key": {
			           "description": "A string used to identify this tag",
			           "maxLength": 128,
			           "minLength": 1,
			           "type": "string"
			         },
			         "Value": {
			           "description": "A string containing the value for the tag",
			           "maxLength": 256,
			           "minLength": 0,
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "maxItems": 200,
			     "$ref": "#/definitions/TagList",
			     "type": "array"
			   }
			*/
			Description: "List of tags",
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A string used to identify this tag",
						     "maxLength": 128,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "A string used to identify this tag",
						Type:        types.StringType,
						Required:    true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A string containing the value for the tag",
						     "maxLength": 256,
						     "minLength": 0,
						     "type": "string"
						   }
						*/
						Description: "A string containing the value for the tag",
						Type:        types.StringType,
						Required:    true,
					},
				},
				schema.ListNestedAttributesOptions{
					MaxItems: 200,
				},
			),
			Optional: true,
		},
		"user_context_policy": {
			// Property: UserContextPolicy
			// CloudFormation resource type schema:
			/*
			   {
			     "enum": [
			       "ATTRIBUTE_FILTER",
			       "USER_TOKEN"
			     ],
			     "$ref": "#/definitions/UserContextPolicy",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"user_token_configurations": {
			// Property: UserTokenConfigurations
			// CloudFormation resource type schema:
			/*
			   {
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "JsonTokenTypeConfiguration": {
			           "additionalProperties": false,
			           "properties": {
			             "GroupAttributeField": {
			               "maxLength": 100,
			               "minLength": 1,
			               "$ref": "#/definitions/GroupAttributeField",
			               "type": "string"
			             },
			             "UserNameAttributeField": {
			               "maxLength": 100,
			               "minLength": 1,
			               "$ref": "#/definitions/UserNameAttributeField",
			               "type": "string"
			             }
			           },
			           "$ref": "#/definitions/JsonTokenTypeConfiguration",
			           "required": [
			             "UserNameAttributeField",
			             "GroupAttributeField"
			           ],
			           "type": "object"
			         },
			         "JwtTokenTypeConfiguration": {
			           "additionalProperties": false,
			           "properties": {
			             "ClaimRegex": {
			               "maxLength": 100,
			               "minLength": 1,
			               "$ref": "#/definitions/ClaimRegex",
			               "type": "string"
			             },
			             "GroupAttributeField": {
			               "maxLength": 100,
			               "minLength": 1,
			               "$ref": "#/definitions/GroupAttributeField",
			               "type": "string"
			             },
			             "Issuer": {
			               "maxLength": 65,
			               "minLength": 1,
			               "$ref": "#/definitions/Issuer",
			               "type": "string"
			             },
			             "KeyLocation": {
			               "enum": [
			                 "URL",
			                 "SECRET_MANAGER"
			               ],
			               "$ref": "#/definitions/KeyLocation",
			               "type": "string"
			             },
			             "SecretManagerArn": {
			               "description": "Role Arn",
			               "maxLength": 1284,
			               "minLength": 1,
			               "pattern": "",
			               "$ref": "#/definitions/RoleArn",
			               "type": "string"
			             },
			             "URL": {
			               "maxLength": 2048,
			               "minLength": 1,
			               "pattern": "",
			               "$ref": "#/definitions/Url",
			               "type": "string"
			             },
			             "UserNameAttributeField": {
			               "maxLength": 100,
			               "minLength": 1,
			               "$ref": "#/definitions/UserNameAttributeField",
			               "type": "string"
			             }
			           },
			           "$ref": "#/definitions/JwtTokenTypeConfiguration",
			           "required": [
			             "KeyLocation"
			           ],
			           "type": "object"
			         }
			       },
			       "$ref": "#/definitions/UserTokenConfiguration",
			       "type": "object"
			     },
			     "maxItems": 1,
			     "$ref": "#/definitions/UserTokenConfigurationList",
			     "type": "array"
			   }
			*/
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"json_token_type_configuration": {
						// Property: JsonTokenTypeConfiguration
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "GroupAttributeField": {
						         "maxLength": 100,
						         "minLength": 1,
						         "$ref": "#/definitions/GroupAttributeField",
						         "type": "string"
						       },
						       "UserNameAttributeField": {
						         "maxLength": 100,
						         "minLength": 1,
						         "$ref": "#/definitions/UserNameAttributeField",
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/JsonTokenTypeConfiguration",
						     "required": [
						       "UserNameAttributeField",
						       "GroupAttributeField"
						     ],
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"group_attribute_field": {
									// Property: GroupAttributeField
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 100,
									     "minLength": 1,
									     "$ref": "#/definitions/GroupAttributeField",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Required: true,
								},
								"user_name_attribute_field": {
									// Property: UserNameAttributeField
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 100,
									     "minLength": 1,
									     "$ref": "#/definitions/UserNameAttributeField",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"jwt_token_type_configuration": {
						// Property: JwtTokenTypeConfiguration
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "ClaimRegex": {
						         "maxLength": 100,
						         "minLength": 1,
						         "$ref": "#/definitions/ClaimRegex",
						         "type": "string"
						       },
						       "GroupAttributeField": {
						         "maxLength": 100,
						         "minLength": 1,
						         "$ref": "#/definitions/GroupAttributeField",
						         "type": "string"
						       },
						       "Issuer": {
						         "maxLength": 65,
						         "minLength": 1,
						         "$ref": "#/definitions/Issuer",
						         "type": "string"
						       },
						       "KeyLocation": {
						         "enum": [
						           "URL",
						           "SECRET_MANAGER"
						         ],
						         "$ref": "#/definitions/KeyLocation",
						         "type": "string"
						       },
						       "SecretManagerArn": {
						         "description": "Role Arn",
						         "maxLength": 1284,
						         "minLength": 1,
						         "pattern": "",
						         "$ref": "#/definitions/RoleArn",
						         "type": "string"
						       },
						       "URL": {
						         "maxLength": 2048,
						         "minLength": 1,
						         "pattern": "",
						         "$ref": "#/definitions/Url",
						         "type": "string"
						       },
						       "UserNameAttributeField": {
						         "maxLength": 100,
						         "minLength": 1,
						         "$ref": "#/definitions/UserNameAttributeField",
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/JwtTokenTypeConfiguration",
						     "required": [
						       "KeyLocation"
						     ],
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"claim_regex": {
									// Property: ClaimRegex
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 100,
									     "minLength": 1,
									     "$ref": "#/definitions/ClaimRegex",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"group_attribute_field": {
									// Property: GroupAttributeField
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 100,
									     "minLength": 1,
									     "$ref": "#/definitions/GroupAttributeField",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"issuer": {
									// Property: Issuer
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 65,
									     "minLength": 1,
									     "$ref": "#/definitions/Issuer",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"key_location": {
									// Property: KeyLocation
									// CloudFormation resource type schema:
									/*
									   {
									     "enum": [
									       "URL",
									       "SECRET_MANAGER"
									     ],
									     "$ref": "#/definitions/KeyLocation",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Required: true,
								},
								"secret_manager_arn": {
									// Property: SecretManagerArn
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "Role Arn",
									     "maxLength": 1284,
									     "minLength": 1,
									     "pattern": "",
									     "$ref": "#/definitions/RoleArn",
									     "type": "string"
									   }
									*/
									Description: "Role Arn",
									Type:        types.StringType,
									Optional:    true,
								},
								"url": {
									// Property: URL
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 2048,
									     "minLength": 1,
									     "pattern": "",
									     "$ref": "#/definitions/Url",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
								"user_name_attribute_field": {
									// Property: UserNameAttributeField
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 100,
									     "minLength": 1,
									     "$ref": "#/definitions/UserNameAttributeField",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
							},
						),
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MaxItems: 1,
				},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "A Kendra index",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Kendra::Index").WithTerraformTypeName("aws_kendra_index").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(240).WithDeleteTimeoutInMinutes(720)

	opts = opts.WithUpdateTimeoutInMinutes(240)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_kendra_index", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
