// Code generated by generators/resource/main.go; DO NOT EDIT.

package kendra

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_kendra_faq", faqResourceType)
}

// faqResourceType returns the Terraform aws_kendra_faq resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Kendra::Faq resource type.
func faqResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 1000,
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Description of the FAQ",
			     "maxLength": 1000,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Description of the FAQ",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			// Description is a force-new attribute.
		},
		"file_format": {
			// Property: FileFormat
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Format of the input file",
			     "enum": [
			       "CSV",
			       "CSV_WITH_HEADER",
			       "JSON"
			     ],
			     "type": "string"
			   }
			*/
			Description: "Format of the input file",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			// FileFormat is a force-new attribute.
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Unique ID of the FAQ",
			     "maxLength": 100,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "Unique ID of the FAQ",
			Type:        types.StringType,
			Computed:    true,
		},
		"index_id": {
			// Property: IndexId
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Unique ID of Index",
			     "maxLength": 36,
			     "minLength": 36,
			     "type": "string"
			   }
			*/
			Description: "Unique ID of Index",
			Type:        types.StringType,
			Required:    true,
			// IndexId is a force-new attribute.
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 100,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Required: true,
			// Name is a force-new attribute.
		},
		"role_arn": {
			// Property: RoleArn
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 1284,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Required: true,
			// RoleArn is a force-new attribute.
		},
		"s3_path": {
			// Property: S3Path
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "Bucket": {
			         "maxLength": 63,
			         "minLength": 3,
			         "pattern": "",
			         "type": "string"
			       },
			       "Key": {
			         "maxLength": 1024,
			         "minLength": 1,
			         "type": "string"
			       }
			     },
			     "required": [
			       "Bucket",
			       "Key"
			     ],
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"bucket": {
						// Property: Bucket
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 63,
						     "minLength": 3,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 1024,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Required: true,
			// S3Path is a force-new attribute.
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "List of tags",
			     "items": {
			       "additionalProperties": false,
			       "description": "A label for tagging Kendra resources",
			       "properties": {
			         "Key": {
			           "description": "A string used to identify this tag",
			           "maxLength": 128,
			           "minLength": 1,
			           "type": "string"
			         },
			         "Value": {
			           "description": "A string containing the value for the tag",
			           "maxLength": 256,
			           "minLength": 0,
			           "type": "string"
			         }
			       },
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "maxItems": 200,
			     "type": "array"
			   }
			*/
			Description: "List of tags",
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A string used to identify this tag",
						     "maxLength": 128,
						     "minLength": 1,
						     "type": "string"
						   }
						*/
						Description: "A string used to identify this tag",
						Type:        types.StringType,
						Required:    true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A string containing the value for the tag",
						     "maxLength": 256,
						     "minLength": 0,
						     "type": "string"
						   }
						*/
						Description: "A string containing the value for the tag",
						Type:        types.StringType,
						Required:    true,
					},
				},
				schema.ListNestedAttributesOptions{
					MaxItems: 200,
				},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "A Kendra FAQ resource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Kendra::Faq").WithTerraformTypeName("aws_kendra_faq").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_kendra_faq", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
