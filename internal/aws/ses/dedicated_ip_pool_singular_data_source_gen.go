// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ses

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ses_dedicated_ip_pool", dedicatedIpPoolDataSource)
}

// dedicatedIpPoolDataSource returns the Terraform awscc_ses_dedicated_ip_pool data source.
// This Terraform data source corresponds to the CloudFormation AWS::SES::DedicatedIpPool resource.
func dedicatedIpPoolDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"pool_name": {
			// Property: PoolName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the dedicated IP pool.",
			//   "pattern": "^[a-z0-9_-]{0,64}$",
			//   "type": "string"
			// }
			Description: "The name of the dedicated IP pool.",
			Type:        types.StringType,
			Computed:    true,
		},
		"scaling_mode": {
			// Property: ScalingMode
			// CloudFormation resource type schema:
			// {
			//   "description": "Specifies whether the dedicated IP pool is managed or not. The default value is STANDARD.",
			//   "pattern": "^(STANDARD|MANAGED)$",
			//   "type": "string"
			// }
			Description: "Specifies whether the dedicated IP pool is managed or not. The default value is STANDARD.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::SES::DedicatedIpPool",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SES::DedicatedIpPool").WithTerraformTypeName("awscc_ses_dedicated_ip_pool")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"pool_name":    "PoolName",
		"scaling_mode": "ScalingMode",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
