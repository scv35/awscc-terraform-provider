// Code generated by generators/resource/main.go; DO NOT EDIT.

package appflow

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_appflow_connector", connectorResource)
}

// connectorResource returns the Terraform awscc_appflow_connector resource.
// This Terraform resource corresponds to the CloudFormation AWS::AppFlow::Connector resource.
func connectorResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"connector_arn": {
			// Property: ConnectorArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": " The arn of the connector. The arn is unique for each ConnectorRegistration in your AWS account.",
			//	  "maxLength": 512,
			//	  "pattern": "arn:*:appflow:.*:[0-9]+:.*",
			//	  "type": "string"
			//	}
			Description: " The arn of the connector. The arn is unique for each ConnectorRegistration in your AWS account.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"connector_label": {
			// Property: ConnectorLabel
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": " The name of the connector. The name is unique for each ConnectorRegistration in your AWS account.",
			//	  "maxLength": 512,
			//	  "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
			//	  "type": "string"
			//	}
			Description: " The name of the connector. The name is unique for each ConnectorRegistration in your AWS account.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenAtMost(512),
				validate.StringMatch(regexp.MustCompile("[a-zA-Z0-9][\\w!@#.-]+"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"connector_provisioning_config": {
			// Property: ConnectorProvisioningConfig
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "Contains information about the configuration of the connector being registered.",
			//	  "properties": {
			//	    "Lambda": {
			//	      "additionalProperties": false,
			//	      "description": "Contains information about the configuration of the lambda which is being registered as the connector.",
			//	      "properties": {
			//	        "LambdaArn": {
			//	          "description": "Lambda ARN of the connector being registered.",
			//	          "maxLength": 512,
			//	          "pattern": "arn:*:.*:.*:[0-9]+:.*",
			//	          "type": "string"
			//	        }
			//	      },
			//	      "required": [
			//	        "LambdaArn"
			//	      ],
			//	      "type": "object"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "Contains information about the configuration of the connector being registered.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"lambda": {
						// Property: Lambda
						Description: "Contains information about the configuration of the lambda which is being registered as the connector.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"lambda_arn": {
									// Property: LambdaArn
									Description: "Lambda ARN of the connector being registered.",
									Type:        types.StringType,
									Required:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenAtMost(512),
										validate.StringMatch(regexp.MustCompile("arn:*:.*:.*:[0-9]+:.*"), ""),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Required: true,
		},
		"connector_provisioning_type": {
			// Property: ConnectorProvisioningType
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The provisioning type of the connector. Currently the only supported value is LAMBDA. ",
			//	  "maxLength": 256,
			//	  "minLength": 1,
			//	  "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
			//	  "type": "string"
			//	}
			Description: "The provisioning type of the connector. Currently the only supported value is LAMBDA. ",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 256),
				validate.StringMatch(regexp.MustCompile("[a-zA-Z0-9][\\w!@#.-]+"), ""),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A description about the connector that's being registered.",
			//	  "maxLength": 2048,
			//	  "pattern": "[\\s\\w/!@#+=.-]*",
			//	  "type": "string"
			//	}
			Description: "A description about the connector that's being registered.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenAtMost(2048),
				validate.StringMatch(regexp.MustCompile("[\\s\\w/!@#+=.-]*"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::AppFlow::Connector",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppFlow::Connector").WithTerraformTypeName("awscc_appflow_connector")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"connector_arn":                 "ConnectorArn",
		"connector_label":               "ConnectorLabel",
		"connector_provisioning_config": "ConnectorProvisioningConfig",
		"connector_provisioning_type":   "ConnectorProvisioningType",
		"description":                   "Description",
		"lambda":                        "Lambda",
		"lambda_arn":                    "LambdaArn",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
