// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_vpn_connection", vPNConnectionResource)
}

// vPNConnectionResource returns the Terraform awscc_ec2_vpn_connection resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::VPNConnection resource.
func vPNConnectionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"customer_gateway_id": {
			// Property: CustomerGatewayId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the customer gateway at your end of the VPN connection.",
			//	  "type": "string"
			//	}
			Description: "The ID of the customer gateway at your end of the VPN connection.",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"static_routes_only": {
			// Property: StaticRoutesOnly
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Indicates whether the VPN connection uses static routes only.",
			//	  "type": "boolean"
			//	}
			Description: "Indicates whether the VPN connection uses static routes only.",
			Type:        types.BoolType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Any tags assigned to the VPN connection.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Value",
			//	      "Key"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Description: "Any tags assigned to the VPN connection.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
				resource.UseStateForUnknown(),
			},
		},
		"transit_gateway_id": {
			// Property: TransitGatewayId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the transit gateway associated with the VPN connection.",
			//	  "type": "string"
			//	}
			Description: "The ID of the transit gateway associated with the VPN connection.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"type": {
			// Property: Type
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The type of VPN connection.",
			//	  "type": "string"
			//	}
			Description: "The type of VPN connection.",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"vpn_connection_id": {
			// Property: VpnConnectionId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The provider-assigned unique ID for this managed resource",
			//	  "type": "string"
			//	}
			Description: "The provider-assigned unique ID for this managed resource",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"vpn_gateway_id": {
			// Property: VpnGatewayId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the virtual private gateway at the AWS side of the VPN connection.",
			//	  "type": "string"
			//	}
			Description: "The ID of the virtual private gateway at the AWS side of the VPN connection.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"vpn_tunnel_options_specifications": {
			// Property: VpnTunnelOptionsSpecifications
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The tunnel options for the VPN connection.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "PreSharedKey": {
			//	        "type": "string"
			//	      },
			//	      "TunnelInsideCidr": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Description: "The tunnel options for the VPN connection.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"pre_shared_key": {
						// Property: PreSharedKey
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"tunnel_inside_cidr": {
						// Property: TunnelInsideCidr
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::EC2::VPNConnection",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::VPNConnection").WithTerraformTypeName("awscc_ec2_vpn_connection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"customer_gateway_id":               "CustomerGatewayId",
		"key":                               "Key",
		"pre_shared_key":                    "PreSharedKey",
		"static_routes_only":                "StaticRoutesOnly",
		"tags":                              "Tags",
		"transit_gateway_id":                "TransitGatewayId",
		"tunnel_inside_cidr":                "TunnelInsideCidr",
		"type":                              "Type",
		"value":                             "Value",
		"vpn_connection_id":                 "VpnConnectionId",
		"vpn_gateway_id":                    "VpnGatewayId",
		"vpn_tunnel_options_specifications": "VpnTunnelOptionsSpecifications",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
