// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_launch_template", launchTemplateResource)
}

// launchTemplateResource returns the Terraform awscc_ec2_launch_template resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::LaunchTemplate resource.
func launchTemplateResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DefaultVersionNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The default version of the launch template",
		//	  "type": "string"
		//	}
		"default_version_number": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The default version of the launch template",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LatestVersionNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The latest version of the launch template",
		//	  "type": "string"
		//	}
		"latest_version_number": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The latest version of the launch template",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LaunchTemplateData
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The information for the launch template.",
		//	  "properties": {
		//	    "BlockDeviceMappings": {
		//	      "description": "The block device mapping.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Information about a block device mapping for an Amazon EC2 launch template.",
		//	        "properties": {
		//	          "DeviceName": {
		//	            "description": "The user data to make available to the instance.",
		//	            "type": "string"
		//	          },
		//	          "Ebs": {
		//	            "additionalProperties": false,
		//	            "description": "Parameters for a block device for an EBS volume in an Amazon EC2 launch template.",
		//	            "properties": {
		//	              "DeleteOnTermination": {
		//	                "description": "Indicates whether the EBS volume is deleted on instance termination.",
		//	                "type": "boolean"
		//	              },
		//	              "Encrypted": {
		//	                "description": "Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.",
		//	                "type": "boolean"
		//	              },
		//	              "Iops": {
		//	                "description": "The number of I/O operations per second (IOPS).",
		//	                "type": "integer"
		//	              },
		//	              "KmsKeyId": {
		//	                "description": "The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.",
		//	                "type": "string"
		//	              },
		//	              "SnapshotId": {
		//	                "description": "The ID of the snapshot.",
		//	                "type": "string"
		//	              },
		//	              "Throughput": {
		//	                "description": "The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.",
		//	                "type": "integer"
		//	              },
		//	              "VolumeSize": {
		//	                "description": "The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.",
		//	                "type": "integer"
		//	              },
		//	              "VolumeType": {
		//	                "description": "The volume type.",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "NoDevice": {
		//	            "description": "To omit the device from the block device mapping, specify an empty string.",
		//	            "type": "string"
		//	          },
		//	          "VirtualName": {
		//	            "description": "The virtual device name (ephemeralN).",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "CapacityReservationSpecification": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies an instance's Capacity Reservation targeting option.",
		//	      "properties": {
		//	        "CapacityReservationPreference": {
		//	          "description": "Indicates the instance's Capacity Reservation preferences.",
		//	          "type": "string"
		//	        },
		//	        "CapacityReservationTarget": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies a target Capacity Reservation.",
		//	          "properties": {
		//	            "CapacityReservationId": {
		//	              "description": "The ID of the Capacity Reservation in which to run the instance.",
		//	              "type": "string"
		//	            },
		//	            "CapacityReservationResourceGroupArn": {
		//	              "description": "The ARN of the Capacity Reservation resource group in which to run the instance.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CpuOptions": {
		//	      "additionalProperties": false,
		//	      "description": "specifies the CPU options for an instance.",
		//	      "properties": {
		//	        "AmdSevSnp": {
		//	          "description": "Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only.",
		//	          "enum": [
		//	            "enabled",
		//	            "disabled"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "CoreCount": {
		//	          "description": "The number of CPU cores for the instance.",
		//	          "type": "integer"
		//	        },
		//	        "ThreadsPerCore": {
		//	          "description": "The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.",
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CreditSpecification": {
		//	      "additionalProperties": false,
		//	      "description": "The user data to make available to the instance.",
		//	      "properties": {
		//	        "CpuCredits": {
		//	          "description": "The user data to make available to the instance.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DisableApiStop": {
		//	      "description": "Indicates whether to enable the instance for stop protection.",
		//	      "type": "boolean"
		//	    },
		//	    "DisableApiTermination": {
		//	      "description": "If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API.",
		//	      "type": "boolean"
		//	    },
		//	    "EbsOptimized": {
		//	      "description": "Indicates whether the instance is optimized for Amazon EBS I/O.",
		//	      "type": "boolean"
		//	    },
		//	    "ElasticGpuSpecifications": {
		//	      "description": "An elastic GPU to associate with the instance.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies a specification for an Elastic GPU for launch template.",
		//	        "properties": {
		//	          "Type": {
		//	            "description": "The type of Elastic Graphics accelerator.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "ElasticInferenceAccelerators": {
		//	      "description": "The elastic inference accelerator for the instance.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies an elastic inference accelerator.",
		//	        "properties": {
		//	          "Count": {
		//	            "description": "The number of elastic inference accelerators to attach to the instance.",
		//	            "type": "integer"
		//	          },
		//	          "Type": {
		//	            "description": "The type of elastic inference accelerator.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "EnclaveOptions": {
		//	      "additionalProperties": false,
		//	      "description": "Indicates whether the instance is enabled for AWS Nitro Enclaves.",
		//	      "properties": {
		//	        "Enabled": {
		//	          "description": "If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.",
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "HibernationOptions": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies whether your instance is configured for hibernation.",
		//	      "properties": {
		//	        "Configured": {
		//	          "description": "TIf you set this parameter to true, the instance is enabled for hibernation.",
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "IamInstanceProfile": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies an IAM instance profile, which is a container for an IAM role for your instance.",
		//	      "properties": {
		//	        "Arn": {
		//	          "description": "The Amazon Resource Name (ARN) of the instance profile.",
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "The name of the instance profile.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ImageId": {
		//	      "description": "The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.",
		//	      "type": "string"
		//	    },
		//	    "InstanceInitiatedShutdownBehavior": {
		//	      "description": "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).",
		//	      "type": "string"
		//	    },
		//	    "InstanceMarketOptions": {
		//	      "additionalProperties": false,
		//	      "description": "The market (purchasing) option for the instances.",
		//	      "properties": {
		//	        "MarketType": {
		//	          "description": "The market type.",
		//	          "type": "string"
		//	        },
		//	        "SpotOptions": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies options for Spot Instances.",
		//	          "properties": {
		//	            "BlockDurationMinutes": {
		//	              "description": "Deprecated",
		//	              "type": "integer"
		//	            },
		//	            "InstanceInterruptionBehavior": {
		//	              "description": "The behavior when a Spot Instance is interrupted. The default is terminate.",
		//	              "type": "string"
		//	            },
		//	            "MaxPrice": {
		//	              "description": "The maximum hourly price you're willing to pay for the Spot Instances.",
		//	              "type": "string"
		//	            },
		//	            "SpotInstanceType": {
		//	              "description": "The Spot Instance request type.",
		//	              "type": "string"
		//	            },
		//	            "ValidUntil": {
		//	              "description": "The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "InstanceRequirements": {
		//	      "additionalProperties": false,
		//	      "description": "The attributes for the instance types.",
		//	      "properties": {
		//	        "AcceleratorCount": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferential chips) on an instance.",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum number of accelerators.",
		//	              "type": "integer"
		//	            },
		//	            "Min": {
		//	              "description": "The minimum number of accelerators.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "AcceleratorManufacturers": {
		//	          "description": "Indicates whether instance types must have accelerators by specific manufacturers.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "AcceleratorNames": {
		//	          "description": "The accelerators that must be on the instance type.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "AcceleratorTotalMemoryMiB": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum amount of total accelerator memory, in MiB.",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum amount of accelerator memory, in MiB.",
		//	              "type": "integer"
		//	            },
		//	            "Min": {
		//	              "description": "The minimum amount of accelerator memory, in MiB.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "AcceleratorTypes": {
		//	          "description": "The accelerator types that must be on the instance type.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "AllowedInstanceTypes": {
		//	          "description": "The instance types to apply your specified attributes against.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "BareMetal": {
		//	          "description": "Indicates whether bare metal instance types must be included, excluded, or required.",
		//	          "type": "string"
		//	        },
		//	        "BaselineEbsBandwidthMbps": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps.",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum baseline bandwidth, in Mbps.",
		//	              "type": "integer"
		//	            },
		//	            "Min": {
		//	              "description": "The minimum baseline bandwidth, in Mbps.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "BurstablePerformance": {
		//	          "type": "string"
		//	        },
		//	        "CpuManufacturers": {
		//	          "description": "The CPU manufacturers to include.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "ExcludedInstanceTypes": {
		//	          "description": "The instance types to exclude.",
		//	          "items": {
		//	            "description": "The user data to make available to the instance.",
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "InstanceGenerations": {
		//	          "description": "Indicates whether current or previous generation instance types are included.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "LocalStorage": {
		//	          "description": "The user data to make available to the instance.",
		//	          "type": "string"
		//	        },
		//	        "LocalStorageTypes": {
		//	          "description": "The type of local storage that is required.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "MemoryGiBPerVCpu": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum amount of memory per vCPU, in GiB.",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum amount of memory per vCPU, in GiB.",
		//	              "type": "number"
		//	            },
		//	            "Min": {
		//	              "description": "TThe minimum amount of memory per vCPU, in GiB.",
		//	              "type": "number"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MemoryMiB": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum amount of memory, in MiB.",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum amount of memory, in MiB.",
		//	              "type": "integer"
		//	            },
		//	            "Min": {
		//	              "description": "The minimum amount of memory, in MiB.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "NetworkBandwidthGbps": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum amount of network bandwidth, in Gbps.",
		//	              "type": "number"
		//	            },
		//	            "Min": {
		//	              "description": "The minimum amount of network bandwidth, in Gbps.",
		//	              "type": "number"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "NetworkInterfaceCount": {
		//	          "additionalProperties": false,
		//	          "description": "TThe minimum and maximum number of network interfaces.",
		//	          "properties": {
		//	            "Max": {
		//	              "type": "integer"
		//	            },
		//	            "Min": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "OnDemandMaxPricePercentageOverLowestPrice": {
		//	          "description": "The price protection threshold for On-Demand Instances.",
		//	          "type": "integer"
		//	        },
		//	        "RequireHibernateSupport": {
		//	          "description": "Indicates whether instance types must support hibernation for On-Demand Instances.",
		//	          "type": "boolean"
		//	        },
		//	        "SpotMaxPricePercentageOverLowestPrice": {
		//	          "description": "The price protection threshold for Spot Instances.",
		//	          "type": "integer"
		//	        },
		//	        "TotalLocalStorageGB": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum amount of total local storage, in GB.",
		//	          "properties": {
		//	            "Max": {
		//	              "type": "number"
		//	            },
		//	            "Min": {
		//	              "type": "number"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "VCpuCount": {
		//	          "additionalProperties": false,
		//	          "description": "The minimum and maximum number of vCPUs.",
		//	          "properties": {
		//	            "Max": {
		//	              "description": "The maximum number of vCPUs.",
		//	              "type": "integer"
		//	            },
		//	            "Min": {
		//	              "description": "The minimum number of vCPUs.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "InstanceType": {
		//	      "type": "string"
		//	    },
		//	    "KernelId": {
		//	      "description": "The ID of the kernel.",
		//	      "type": "string"
		//	    },
		//	    "KeyName": {
		//	      "description": "The name of the EC2 key pair",
		//	      "type": "string"
		//	    },
		//	    "LicenseSpecifications": {
		//	      "description": "The license configurations.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies a license configuration for an instance.",
		//	        "properties": {
		//	          "LicenseConfigurationArn": {
		//	            "description": "The Amazon Resource Name (ARN) of the license configuration.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "MaintenanceOptions": {
		//	      "additionalProperties": false,
		//	      "description": "The maintenance options of your instance.",
		//	      "properties": {
		//	        "AutoRecovery": {
		//	          "description": "Disables the automatic recovery behavior of your instance or sets it to default.",
		//	          "type": "string"
		//	        },
		//	        "RebootMigration": {
		//	          "description": "Disables the automatic reboot-migration behavior of your instance or sets it to default.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "MetadataOptions": {
		//	      "additionalProperties": false,
		//	      "description": "The metadata options for the instance.",
		//	      "properties": {
		//	        "HttpEndpoint": {
		//	          "description": "Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.",
		//	          "type": "string"
		//	        },
		//	        "HttpProtocolIpv6": {
		//	          "description": "Enables or disables the IPv6 endpoint for the instance metadata service.",
		//	          "type": "string"
		//	        },
		//	        "HttpPutResponseHopLimit": {
		//	          "description": "The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.",
		//	          "type": "integer"
		//	        },
		//	        "HttpTokens": {
		//	          "description": "IMDSv2 uses token-backed sessions.",
		//	          "type": "string"
		//	        },
		//	        "InstanceMetadataTags": {
		//	          "description": "Set to enabled to allow access to instance tags from the instance metadata.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Monitoring": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies whether detailed monitoring is enabled for an instance.",
		//	      "properties": {
		//	        "Enabled": {
		//	          "description": "Specify true to enable detailed monitoring.",
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "NetworkInterfaces": {
		//	      "description": "If you specify a network interface, you must specify any security groups and subnets as part of the network interface.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the parameters for a network interface.",
		//	        "properties": {
		//	          "AssociateCarrierIpAddress": {
		//	            "description": "Indicates whether to associate a Carrier IP address with eth0 for a new network interface.",
		//	            "type": "boolean"
		//	          },
		//	          "AssociatePublicIpAddress": {
		//	            "description": "Associates a public IPv4 address with eth0 for a new network interface.",
		//	            "type": "boolean"
		//	          },
		//	          "ConnectionTrackingSpecification": {
		//	            "additionalProperties": false,
		//	            "description": "Allows customer to specify Connection Tracking options",
		//	            "properties": {
		//	              "TcpEstablishedTimeout": {
		//	                "description": "Integer value for TCP Established Timeout",
		//	                "type": "integer"
		//	              },
		//	              "UdpStreamTimeout": {
		//	                "description": "Integer value for UDP Stream Timeout",
		//	                "type": "integer"
		//	              },
		//	              "UdpTimeout": {
		//	                "description": "Integer value for UDP Timeout",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "DeleteOnTermination": {
		//	            "description": "Indicates whether the network interface is deleted when the instance is terminated.",
		//	            "type": "boolean"
		//	          },
		//	          "Description": {
		//	            "description": "A description for the network interface.",
		//	            "type": "string"
		//	          },
		//	          "DeviceIndex": {
		//	            "description": "The device index for the network interface attachment.",
		//	            "type": "integer"
		//	          },
		//	          "EnaSrdSpecification": {
		//	            "additionalProperties": false,
		//	            "description": "Allows customer to specify ENA-SRD options",
		//	            "properties": {
		//	              "EnaSrdEnabled": {
		//	                "description": "Enables TCP ENA-SRD",
		//	                "type": "boolean"
		//	              },
		//	              "EnaSrdUdpSpecification": {
		//	                "additionalProperties": false,
		//	                "description": "Allows customer to specify ENA-SRD (UDP) options",
		//	                "properties": {
		//	                  "EnaSrdUdpEnabled": {
		//	                    "description": "Enables UDP ENA-SRD",
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Groups": {
		//	            "description": "The IDs of one or more security groups.",
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "InterfaceType": {
		//	            "description": "The type of network interface.",
		//	            "type": "string"
		//	          },
		//	          "Ipv4PrefixCount": {
		//	            "description": "The number of IPv4 prefixes to be automatically assigned to the network interface.",
		//	            "type": "integer"
		//	          },
		//	          "Ipv4Prefixes": {
		//	            "description": "One or more IPv4 prefixes to be assigned to the network interface.",
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies an IPv4 prefix for a network interface.",
		//	              "properties": {
		//	                "Ipv4Prefix": {
		//	                  "description": "The IPv4 prefix.",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "Ipv6AddressCount": {
		//	            "description": "The number of IPv6 addresses to assign to a network interface.",
		//	            "type": "integer"
		//	          },
		//	          "Ipv6Addresses": {
		//	            "description": "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.",
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies an IPv6 address.",
		//	              "properties": {
		//	                "Ipv6Address": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "Ipv6PrefixCount": {
		//	            "description": "The number of IPv6 prefixes to be automatically assigned to the network interface.",
		//	            "type": "integer"
		//	          },
		//	          "Ipv6Prefixes": {
		//	            "description": "One or more IPv6 prefixes to be assigned to the network interface.",
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies an IPv6 prefix for a network interface.",
		//	              "properties": {
		//	                "Ipv6Prefix": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "NetworkCardIndex": {
		//	            "description": "The index of the network card.",
		//	            "type": "integer"
		//	          },
		//	          "NetworkInterfaceId": {
		//	            "description": "The ID of the network interface.",
		//	            "type": "string"
		//	          },
		//	          "PrimaryIpv6": {
		//	            "description": "Enables the first IPv6 global unique address (GUA) on a dual stack or IPv6-only ENI immutable.",
		//	            "type": "boolean"
		//	          },
		//	          "PrivateIpAddress": {
		//	            "description": "The primary private IPv4 address of the network interface.",
		//	            "type": "string"
		//	          },
		//	          "PrivateIpAddresses": {
		//	            "description": "One or more private IPv4 addresses.",
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies a secondary private IPv4 address for a network interface.",
		//	              "properties": {
		//	                "Primary": {
		//	                  "description": "Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.",
		//	                  "type": "boolean"
		//	                },
		//	                "PrivateIpAddress": {
		//	                  "description": "The private IPv4 address.",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "SecondaryPrivateIpAddressCount": {
		//	            "description": "The number of secondary private IPv4 addresses to assign to a network interface.",
		//	            "type": "integer"
		//	          },
		//	          "SubnetId": {
		//	            "description": "The ID of the subnet for the network interface.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Placement": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies the placement of an instance.",
		//	      "properties": {
		//	        "Affinity": {
		//	          "description": "The affinity setting for an instance on a Dedicated Host.",
		//	          "type": "string"
		//	        },
		//	        "AvailabilityZone": {
		//	          "description": "The Availability Zone for the instance.",
		//	          "type": "string"
		//	        },
		//	        "GroupId": {
		//	          "description": "The Group Id of a placement group. You must specify the Placement Group Group Id to launch an instance in a shared placement group.",
		//	          "type": "string"
		//	        },
		//	        "GroupName": {
		//	          "description": "The name of the placement group for the instance.",
		//	          "type": "string"
		//	        },
		//	        "HostId": {
		//	          "description": "The ID of the Dedicated Host for the instance.",
		//	          "type": "string"
		//	        },
		//	        "HostResourceGroupArn": {
		//	          "description": "The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.",
		//	          "type": "string"
		//	        },
		//	        "PartitionNumber": {
		//	          "description": "The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.",
		//	          "type": "integer"
		//	        },
		//	        "SpreadDomain": {
		//	          "description": "Reserved for future use.",
		//	          "type": "string"
		//	        },
		//	        "Tenancy": {
		//	          "description": "The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "PrivateDnsNameOptions": {
		//	      "additionalProperties": false,
		//	      "description": "Describes the options for instance hostnames.",
		//	      "properties": {
		//	        "EnableResourceNameDnsAAAARecord": {
		//	          "description": "Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.",
		//	          "type": "boolean"
		//	        },
		//	        "EnableResourceNameDnsARecord": {
		//	          "description": "Indicates whether to respond to DNS queries for instance hostnames with DNS A records.",
		//	          "type": "boolean"
		//	        },
		//	        "HostnameType": {
		//	          "description": "The type of hostname for EC2 instances.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RamDiskId": {
		//	      "type": "string"
		//	    },
		//	    "SecurityGroupIds": {
		//	      "description": "One or more security group IDs. ",
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "SecurityGroups": {
		//	      "description": "One or more security group names.",
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "TagSpecifications": {
		//	      "description": "The tags to apply to the resources that are created during instance launch.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the tags to apply to a resource when the resource is created for the launch template.",
		//	        "properties": {
		//	          "ResourceType": {
		//	            "description": "The type of resource to tag.",
		//	            "type": "string"
		//	          },
		//	          "Tags": {
		//	            "description": "The tags for the resource.",
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "The user data to make available to the instance.",
		//	              "properties": {
		//	                "Key": {
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Value",
		//	                "Key"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "UserData": {
		//	      "description": "The user data to make available to the instance.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"launch_template_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BlockDeviceMappings
				"block_device_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DeviceName
							"device_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The user data to make available to the instance.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ebs
							"ebs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DeleteOnTermination
									"delete_on_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether the EBS volume is deleted on instance termination.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Encrypted
									"encrypted": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Iops
									"iops": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The number of I/O operations per second (IOPS).",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: KmsKeyId
									"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: SnapshotId
									"snapshot_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The ID of the snapshot.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Throughput
									"throughput": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: VolumeSize
									"volume_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: VolumeType
									"volume_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The volume type.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Parameters for a block device for an EBS volume in an Amazon EC2 launch template.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NoDevice
							"no_device": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "To omit the device from the block device mapping, specify an empty string.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: VirtualName
							"virtual_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The virtual device name (ephemeralN).",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The block device mapping.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: CapacityReservationSpecification
				"capacity_reservation_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CapacityReservationPreference
						"capacity_reservation_preference": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Indicates the instance's Capacity Reservation preferences.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CapacityReservationTarget
						"capacity_reservation_target": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CapacityReservationId
								"capacity_reservation_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The ID of the Capacity Reservation in which to run the instance.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CapacityReservationResourceGroupArn
								"capacity_reservation_resource_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The ARN of the Capacity Reservation resource group in which to run the instance.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies a target Capacity Reservation.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies an instance's Capacity Reservation targeting option.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: CpuOptions
				"cpu_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AmdSevSnp
						"amd_sev_snp": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"enabled",
									"disabled",
								),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CoreCount
						"core_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The number of CPU cores for the instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: ThreadsPerCore
						"threads_per_core": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "specifies the CPU options for an instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: CreditSpecification
				"credit_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CpuCredits
						"cpu_credits": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The user data to make available to the instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The user data to make available to the instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: DisableApiStop
				"disable_api_stop": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to enable the instance for stop protection.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: DisableApiTermination
				"disable_api_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: EbsOptimized
				"ebs_optimized": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether the instance is optimized for Amazon EBS I/O.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ElasticGpuSpecifications
				"elastic_gpu_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The type of Elastic Graphics accelerator.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "An elastic GPU to associate with the instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ElasticInferenceAccelerators
				"elastic_inference_accelerators": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Count
							"count": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of elastic inference accelerators to attach to the instance.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The type of elastic inference accelerator.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The elastic inference accelerator for the instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: EnclaveOptions
				"enclave_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Indicates whether the instance is enabled for AWS Nitro Enclaves.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HibernationOptions
				"hibernation_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Configured
						"configured": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "TIf you set this parameter to true, the instance is enabled for hibernation.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies whether your instance is configured for hibernation.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: IamInstanceProfile
				"iam_instance_profile": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Arn
						"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the instance profile.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the instance profile.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies an IAM instance profile, which is a container for an IAM role for your instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ImageId
				"image_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: InstanceInitiatedShutdownBehavior
				"instance_initiated_shutdown_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: InstanceMarketOptions
				"instance_market_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MarketType
						"market_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The market type.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SpotOptions
						"spot_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BlockDurationMinutes
								"block_duration_minutes": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "Deprecated",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: InstanceInterruptionBehavior
								"instance_interruption_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The behavior when a Spot Instance is interrupted. The default is terminate.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: MaxPrice
								"max_price": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The maximum hourly price you're willing to pay for the Spot Instances.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: SpotInstanceType
								"spot_instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The Spot Instance request type.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ValidUntil
								"valid_until": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies options for Spot Instances.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The market (purchasing) option for the instances.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: InstanceRequirements
				"instance_requirements": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AcceleratorCount
						"accelerator_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum number of accelerators.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The minimum number of accelerators.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferential chips) on an instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AcceleratorManufacturers
						"accelerator_manufacturers": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "Indicates whether instance types must have accelerators by specific manufacturers.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AcceleratorNames
						"accelerator_names": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The accelerators that must be on the instance type.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AcceleratorTotalMemoryMiB
						"accelerator_total_memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum amount of accelerator memory, in MiB.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The minimum amount of accelerator memory, in MiB.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum amount of total accelerator memory, in MiB.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AcceleratorTypes
						"accelerator_types": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The accelerator types that must be on the instance type.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AllowedInstanceTypes
						"allowed_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The instance types to apply your specified attributes against.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: BareMetal
						"bare_metal": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Indicates whether bare metal instance types must be included, excluded, or required.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: BaselineEbsBandwidthMbps
						"baseline_ebs_bandwidth_mbps": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum baseline bandwidth, in Mbps.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The minimum baseline bandwidth, in Mbps.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: BurstablePerformance
						"burstable_performance": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CpuManufacturers
						"cpu_manufacturers": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The CPU manufacturers to include.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: ExcludedInstanceTypes
						"excluded_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The instance types to exclude.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: InstanceGenerations
						"instance_generations": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "Indicates whether current or previous generation instance types are included.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: LocalStorage
						"local_storage": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The user data to make available to the instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: LocalStorageTypes
						"local_storage_types": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The type of local storage that is required.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: MemoryGiBPerVCpu
						"memory_gi_b_per_v_cpu": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum amount of memory per vCPU, in GiB.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "TThe minimum amount of memory per vCPU, in GiB.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum amount of memory per vCPU, in GiB.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: MemoryMiB
						"memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum amount of memory, in MiB.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The minimum amount of memory, in MiB.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum amount of memory, in MiB.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: NetworkBandwidthGbps
						"network_bandwidth_gbps": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum amount of network bandwidth, in Gbps.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "The minimum amount of network bandwidth, in Gbps.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: NetworkInterfaceCount
						"network_interface_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "TThe minimum and maximum number of network interfaces.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: OnDemandMaxPricePercentageOverLowestPrice
						"on_demand_max_price_percentage_over_lowest_price": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The price protection threshold for On-Demand Instances.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: RequireHibernateSupport
						"require_hibernate_support": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Indicates whether instance types must support hibernation for On-Demand Instances.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SpotMaxPricePercentageOverLowestPrice
						"spot_max_price_percentage_over_lowest_price": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The price protection threshold for Spot Instances.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TotalLocalStorageGB
						"total_local_storage_gb": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum amount of total local storage, in GB.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: VCpuCount
						"v_cpu_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Max
								"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum number of vCPUs.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Min
								"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The minimum number of vCPUs.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The minimum and maximum number of vCPUs.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The attributes for the instance types.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: InstanceType
				"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: KernelId
				"kernel_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ID of the kernel.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: KeyName
				"key_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the EC2 key pair",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LicenseSpecifications
				"license_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: LicenseConfigurationArn
							"license_configuration_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the license configuration.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The license configurations.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MaintenanceOptions
				"maintenance_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AutoRecovery
						"auto_recovery": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Disables the automatic recovery behavior of your instance or sets it to default.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: RebootMigration
						"reboot_migration": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Disables the automatic reboot-migration behavior of your instance or sets it to default.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The maintenance options of your instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MetadataOptions
				"metadata_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HttpEndpoint
						"http_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: HttpProtocolIpv6
						"http_protocol_ipv_6": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Enables or disables the IPv6 endpoint for the instance metadata service.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: HttpPutResponseHopLimit
						"http_put_response_hop_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: HttpTokens
						"http_tokens": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "IMDSv2 uses token-backed sessions.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: InstanceMetadataTags
						"instance_metadata_tags": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Set to enabled to allow access to instance tags from the instance metadata.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The metadata options for the instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Monitoring
				"monitoring": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Specify true to enable detailed monitoring.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies whether detailed monitoring is enabled for an instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: NetworkInterfaces
				"network_interfaces": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AssociateCarrierIpAddress
							"associate_carrier_ip_address": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates whether to associate a Carrier IP address with eth0 for a new network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: AssociatePublicIpAddress
							"associate_public_ip_address": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Associates a public IPv4 address with eth0 for a new network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ConnectionTrackingSpecification
							"connection_tracking_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: TcpEstablishedTimeout
									"tcp_established_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Integer value for TCP Established Timeout",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: UdpStreamTimeout
									"udp_stream_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Integer value for UDP Stream Timeout",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: UdpTimeout
									"udp_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Integer value for UDP Timeout",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Allows customer to specify Connection Tracking options",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: DeleteOnTermination
							"delete_on_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates whether the network interface is deleted when the instance is terminated.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A description for the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: DeviceIndex
							"device_index": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The device index for the network interface attachment.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: EnaSrdSpecification
							"ena_srd_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: EnaSrdEnabled
									"ena_srd_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Enables TCP ENA-SRD",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: EnaSrdUdpSpecification
									"ena_srd_udp_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: EnaSrdUdpEnabled
											"ena_srd_udp_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Description: "Enables UDP ENA-SRD",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
													boolplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Allows customer to specify ENA-SRD (UDP) options",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Allows customer to specify ENA-SRD options",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Groups
							"groups": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "The IDs of one or more security groups.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: InterfaceType
							"interface_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The type of network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ipv4PrefixCount
							"ipv_4_prefix_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of IPv4 prefixes to be automatically assigned to the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ipv4Prefixes
							"ipv_4_prefixes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Ipv4Prefix
										"ipv_4_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The IPv4 prefix.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "One or more IPv4 prefixes to be assigned to the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ipv6AddressCount
							"ipv_6_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of IPv6 addresses to assign to a network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ipv6Addresses
							"ipv_6_addresses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Ipv6Address
										"ipv_6_address": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ipv6PrefixCount
							"ipv_6_prefix_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of IPv6 prefixes to be automatically assigned to the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Ipv6Prefixes
							"ipv_6_prefixes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Ipv6Prefix
										"ipv_6_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "One or more IPv6 prefixes to be assigned to the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NetworkCardIndex
							"network_card_index": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The index of the network card.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NetworkInterfaceId
							"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The ID of the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PrimaryIpv6
							"primary_ipv_6": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Enables the first IPv6 global unique address (GUA) on a dual stack or IPv6-only ENI immutable.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PrivateIpAddress
							"private_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The primary private IPv4 address of the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PrivateIpAddresses
							"private_ip_addresses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Primary
										"primary": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Description: "Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
												boolplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: PrivateIpAddress
										"private_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The private IPv4 address.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "One or more private IPv4 addresses.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: SecondaryPrivateIpAddressCount
							"secondary_private_ip_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of secondary private IPv4 addresses to assign to a network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: SubnetId
							"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The ID of the subnet for the network interface.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "If you specify a network interface, you must specify any security groups and subnets as part of the network interface.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Placement
				"placement": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Affinity
						"affinity": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The affinity setting for an instance on a Dedicated Host.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AvailabilityZone
						"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Availability Zone for the instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: GroupId
						"group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Group Id of a placement group. You must specify the Placement Group Group Id to launch an instance in a shared placement group.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: GroupName
						"group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the placement group for the instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: HostId
						"host_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ID of the Dedicated Host for the instance.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: HostResourceGroupArn
						"host_resource_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: PartitionNumber
						"partition_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SpreadDomain
						"spread_domain": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Reserved for future use.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Tenancy
						"tenancy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies the placement of an instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PrivateDnsNameOptions
				"private_dns_name_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EnableResourceNameDnsAAAARecord
						"enable_resource_name_dns_aaaa_record": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: EnableResourceNameDnsARecord
						"enable_resource_name_dns_a_record": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Indicates whether to respond to DNS queries for instance hostnames with DNS A records.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: HostnameType
						"hostname_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The type of hostname for EC2 instances.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Describes the options for instance hostnames.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RamDiskId
				"ram_disk_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SecurityGroupIds
				"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "One or more security group IDs. ",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SecurityGroups
				"security_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "One or more security group names.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TagSpecifications
				"tag_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ResourceType
							"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The type of resource to tag.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Tags
							"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Key
										"key": schema.StringAttribute{ /*START ATTRIBUTE*/
											Required: true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Required: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "The tags for the resource.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The tags to apply to the resources that are created during instance launch.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: UserData
				"user_data": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The user data to make available to the instance.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The information for the launch template.",
			Required:    true,
			// LaunchTemplateData is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: LaunchTemplateId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "LaunchTemplate ID generated by service",
		//	  "type": "string"
		//	}
		"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "LaunchTemplate ID generated by service",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LaunchTemplateName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A name for the launch template.",
		//	  "type": "string"
		//	}
		"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A name for the launch template.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TagSpecifications
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags to apply to the launch template on creation.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies the tags to apply to the launch template during creation.",
		//	    "properties": {
		//	      "ResourceType": {
		//	        "description": "The type of resource to tag.",
		//	        "type": "string"
		//	      },
		//	      "Tags": {
		//	        "description": "The tags for the resource.",
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "The user data to make available to the instance.",
		//	          "properties": {
		//	            "Key": {
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tag_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ResourceType
					"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of resource to tag.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Tags
					"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The tags for the resource.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags to apply to the launch template on creation.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// TagSpecifications is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: VersionDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description for the first version of the launch template.",
		//	  "type": "string"
		//	}
		"version_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description for the first version of the launch template.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// VersionDescription is a write-only property.
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::EC2::LaunchTemplate",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::LaunchTemplate").WithTerraformTypeName("awscc_ec2_launch_template")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"accelerator_count":                       "AcceleratorCount",
		"accelerator_manufacturers":               "AcceleratorManufacturers",
		"accelerator_names":                       "AcceleratorNames",
		"accelerator_total_memory_mi_b":           "AcceleratorTotalMemoryMiB",
		"accelerator_types":                       "AcceleratorTypes",
		"affinity":                                "Affinity",
		"allowed_instance_types":                  "AllowedInstanceTypes",
		"amd_sev_snp":                             "AmdSevSnp",
		"arn":                                     "Arn",
		"associate_carrier_ip_address":            "AssociateCarrierIpAddress",
		"associate_public_ip_address":             "AssociatePublicIpAddress",
		"auto_recovery":                           "AutoRecovery",
		"availability_zone":                       "AvailabilityZone",
		"bare_metal":                              "BareMetal",
		"baseline_ebs_bandwidth_mbps":             "BaselineEbsBandwidthMbps",
		"block_device_mappings":                   "BlockDeviceMappings",
		"block_duration_minutes":                  "BlockDurationMinutes",
		"burstable_performance":                   "BurstablePerformance",
		"capacity_reservation_id":                 "CapacityReservationId",
		"capacity_reservation_preference":         "CapacityReservationPreference",
		"capacity_reservation_resource_group_arn": "CapacityReservationResourceGroupArn",
		"capacity_reservation_specification":      "CapacityReservationSpecification",
		"capacity_reservation_target":             "CapacityReservationTarget",
		"configured":                              "Configured",
		"connection_tracking_specification":       "ConnectionTrackingSpecification",
		"core_count":                              "CoreCount",
		"count":                                   "Count",
		"cpu_credits":                             "CpuCredits",
		"cpu_manufacturers":                       "CpuManufacturers",
		"cpu_options":                             "CpuOptions",
		"credit_specification":                    "CreditSpecification",
		"default_version_number":                  "DefaultVersionNumber",
		"delete_on_termination":                   "DeleteOnTermination",
		"description":                             "Description",
		"device_index":                            "DeviceIndex",
		"device_name":                             "DeviceName",
		"disable_api_stop":                        "DisableApiStop",
		"disable_api_termination":                 "DisableApiTermination",
		"ebs":                                     "Ebs",
		"ebs_optimized":                           "EbsOptimized",
		"elastic_gpu_specifications":              "ElasticGpuSpecifications",
		"elastic_inference_accelerators":          "ElasticInferenceAccelerators",
		"ena_srd_enabled":                         "EnaSrdEnabled",
		"ena_srd_specification":                   "EnaSrdSpecification",
		"ena_srd_udp_enabled":                     "EnaSrdUdpEnabled",
		"ena_srd_udp_specification":               "EnaSrdUdpSpecification",
		"enable_resource_name_dns_a_record":       "EnableResourceNameDnsARecord",
		"enable_resource_name_dns_aaaa_record":    "EnableResourceNameDnsAAAARecord",
		"enabled":                                 "Enabled",
		"enclave_options":                         "EnclaveOptions",
		"encrypted":                               "Encrypted",
		"excluded_instance_types":                 "ExcludedInstanceTypes",
		"group_id":                                "GroupId",
		"group_name":                              "GroupName",
		"groups":                                  "Groups",
		"hibernation_options":                     "HibernationOptions",
		"host_id":                                 "HostId",
		"host_resource_group_arn":                 "HostResourceGroupArn",
		"hostname_type":                           "HostnameType",
		"http_endpoint":                           "HttpEndpoint",
		"http_protocol_ipv_6":                     "HttpProtocolIpv6",
		"http_put_response_hop_limit":             "HttpPutResponseHopLimit",
		"http_tokens":                             "HttpTokens",
		"iam_instance_profile":                    "IamInstanceProfile",
		"image_id":                                "ImageId",
		"instance_generations":                    "InstanceGenerations",
		"instance_initiated_shutdown_behavior":    "InstanceInitiatedShutdownBehavior",
		"instance_interruption_behavior":          "InstanceInterruptionBehavior",
		"instance_market_options":                 "InstanceMarketOptions",
		"instance_metadata_tags":                  "InstanceMetadataTags",
		"instance_requirements":                   "InstanceRequirements",
		"instance_type":                           "InstanceType",
		"interface_type":                          "InterfaceType",
		"iops":                                    "Iops",
		"ipv_4_prefix":                            "Ipv4Prefix",
		"ipv_4_prefix_count":                      "Ipv4PrefixCount",
		"ipv_4_prefixes":                          "Ipv4Prefixes",
		"ipv_6_address":                           "Ipv6Address",
		"ipv_6_address_count":                     "Ipv6AddressCount",
		"ipv_6_addresses":                         "Ipv6Addresses",
		"ipv_6_prefix":                            "Ipv6Prefix",
		"ipv_6_prefix_count":                      "Ipv6PrefixCount",
		"ipv_6_prefixes":                          "Ipv6Prefixes",
		"kernel_id":                               "KernelId",
		"key":                                     "Key",
		"key_name":                                "KeyName",
		"kms_key_id":                              "KmsKeyId",
		"latest_version_number":                   "LatestVersionNumber",
		"launch_template_data":                    "LaunchTemplateData",
		"launch_template_id":                      "LaunchTemplateId",
		"launch_template_name":                    "LaunchTemplateName",
		"license_configuration_arn":               "LicenseConfigurationArn",
		"license_specifications":                  "LicenseSpecifications",
		"local_storage":                           "LocalStorage",
		"local_storage_types":                     "LocalStorageTypes",
		"maintenance_options":                     "MaintenanceOptions",
		"market_type":                             "MarketType",
		"max":                                     "Max",
		"max_price":                               "MaxPrice",
		"memory_gi_b_per_v_cpu":                   "MemoryGiBPerVCpu",
		"memory_mi_b":                             "MemoryMiB",
		"metadata_options":                        "MetadataOptions",
		"min":                                     "Min",
		"monitoring":                              "Monitoring",
		"name":                                    "Name",
		"network_bandwidth_gbps":                  "NetworkBandwidthGbps",
		"network_card_index":                      "NetworkCardIndex",
		"network_interface_count":                 "NetworkInterfaceCount",
		"network_interface_id":                    "NetworkInterfaceId",
		"network_interfaces":                      "NetworkInterfaces",
		"no_device":                               "NoDevice",
		"on_demand_max_price_percentage_over_lowest_price": "OnDemandMaxPricePercentageOverLowestPrice",
		"partition_number":                   "PartitionNumber",
		"placement":                          "Placement",
		"primary":                            "Primary",
		"primary_ipv_6":                      "PrimaryIpv6",
		"private_dns_name_options":           "PrivateDnsNameOptions",
		"private_ip_address":                 "PrivateIpAddress",
		"private_ip_addresses":               "PrivateIpAddresses",
		"ram_disk_id":                        "RamDiskId",
		"reboot_migration":                   "RebootMigration",
		"require_hibernate_support":          "RequireHibernateSupport",
		"resource_type":                      "ResourceType",
		"secondary_private_ip_address_count": "SecondaryPrivateIpAddressCount",
		"security_group_ids":                 "SecurityGroupIds",
		"security_groups":                    "SecurityGroups",
		"snapshot_id":                        "SnapshotId",
		"spot_instance_type":                 "SpotInstanceType",
		"spot_max_price_percentage_over_lowest_price": "SpotMaxPricePercentageOverLowestPrice",
		"spot_options":            "SpotOptions",
		"spread_domain":           "SpreadDomain",
		"subnet_id":               "SubnetId",
		"tag_specifications":      "TagSpecifications",
		"tags":                    "Tags",
		"tcp_established_timeout": "TcpEstablishedTimeout",
		"tenancy":                 "Tenancy",
		"threads_per_core":        "ThreadsPerCore",
		"throughput":              "Throughput",
		"total_local_storage_gb":  "TotalLocalStorageGB",
		"type":                    "Type",
		"udp_stream_timeout":      "UdpStreamTimeout",
		"udp_timeout":             "UdpTimeout",
		"user_data":               "UserData",
		"v_cpu_count":             "VCpuCount",
		"valid_until":             "ValidUntil",
		"value":                   "Value",
		"version_description":     "VersionDescription",
		"virtual_name":            "VirtualName",
		"volume_size":             "VolumeSize",
		"volume_type":             "VolumeType",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/LaunchTemplateData",
		"/properties/VersionDescription",
		"/properties/TagSpecifications",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
