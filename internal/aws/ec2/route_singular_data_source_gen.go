// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_route", routeDataSource)
}

// routeDataSource returns the Terraform awscc_ec2_route data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::Route resource.
func routeDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CarrierGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the carrier gateway.",
		//	  "type": "string"
		//	}
		"carrier_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the carrier gateway.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The primary identifier of the resource generated by the service.",
		//	  "type": "string"
		//	}
		"cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The primary identifier of the resource generated by the service.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DestinationCidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 CIDR block used for the destination match.",
		//	  "type": "string"
		//	}
		"destination_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv4 CIDR block used for the destination match.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DestinationIpv6CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv6 CIDR block used for the destination match.",
		//	  "type": "string"
		//	}
		"destination_ipv_6_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv6 CIDR block used for the destination match.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EgressOnlyInternetGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the egress-only internet gateway.",
		//	  "type": "string"
		//	}
		"egress_only_internet_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the egress-only internet gateway.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of an internet gateway or virtual private gateway attached to your VPC.",
		//	  "type": "string"
		//	}
		"gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of an internet gateway or virtual private gateway attached to your VPC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a NAT instance in your VPC.",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a NAT instance in your VPC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the local gateway.",
		//	  "type": "string"
		//	}
		"local_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the local gateway.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NatGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a NAT gateway.",
		//	  "type": "string"
		//	}
		"nat_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a NAT gateway.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInterfaceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the network interface.",
		//	  "type": "string"
		//	}
		"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the network interface.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RouteTableId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.",
		//	  "type": "string"
		//	}
		"route_table_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a transit gateway.",
		//	  "type": "string"
		//	}
		"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a transit gateway.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcEndpointId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.",
		//	  "type": "string"
		//	}
		"vpc_endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcPeeringConnectionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a VPC peering connection.",
		//	  "type": "string"
		//	}
		"vpc_peering_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a VPC peering connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::Route",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::Route").WithTerraformTypeName("awscc_ec2_route")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"carrier_gateway_id":              "CarrierGatewayId",
		"cidr_block":                      "CidrBlock",
		"destination_cidr_block":          "DestinationCidrBlock",
		"destination_ipv_6_cidr_block":    "DestinationIpv6CidrBlock",
		"egress_only_internet_gateway_id": "EgressOnlyInternetGatewayId",
		"gateway_id":                      "GatewayId",
		"instance_id":                     "InstanceId",
		"local_gateway_id":                "LocalGatewayId",
		"nat_gateway_id":                  "NatGatewayId",
		"network_interface_id":            "NetworkInterfaceId",
		"route_table_id":                  "RouteTableId",
		"transit_gateway_id":              "TransitGatewayId",
		"vpc_endpoint_id":                 "VpcEndpointId",
		"vpc_peering_connection_id":       "VpcPeeringConnectionId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
