// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_customer_gateway", customerGatewayDataSource)
}

// customerGatewayDataSource returns the Terraform awscc_ec2_customer_gateway data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::CustomerGateway resource.
func customerGatewayDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"bgp_asn": {
			// Property: BgpAsn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "default": 65000,
			//	  "description": "For devices that support BGP, the customer gateway's BGP ASN.",
			//	  "type": "integer"
			//	}
			Description: "For devices that support BGP, the customer gateway's BGP ASN.",
			Type:        types.Int64Type,
			Computed:    true,
		},
		"customer_gateway_id": {
			// Property: CustomerGatewayId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "CustomerGateway ID generated after customer gateway is created. Each customer gateway has a unique ID.",
			//	  "type": "string"
			//	}
			Description: "CustomerGateway ID generated after customer gateway is created. Each customer gateway has a unique ID.",
			Type:        types.StringType,
			Computed:    true,
		},
		"ip_address": {
			// Property: IpAddress
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The internet-routable IP address for the customer gateway's outside interface. The address must be static.",
			//	  "type": "string"
			//	}
			Description: "The internet-routable IP address for the customer gateway's outside interface. The address must be static.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "One or more tags for the customer gateway.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Value",
			//	      "Key"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Description: "One or more tags for the customer gateway.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"type": {
			// Property: Type
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The type of VPN connection that this customer gateway supports.",
			//	  "type": "string"
			//	}
			Description: "The type of VPN connection that this customer gateway supports.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EC2::CustomerGateway",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::CustomerGateway").WithTerraformTypeName("awscc_ec2_customer_gateway")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bgp_asn":             "BgpAsn",
		"customer_gateway_id": "CustomerGatewayId",
		"ip_address":          "IpAddress",
		"key":                 "Key",
		"tags":                "Tags",
		"type":                "Type",
		"value":               "Value",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
