// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_ec2_network_insights_access_scope_analysis", networkInsightsAccessScopeAnalysisDataSourceType)
}

// networkInsightsAccessScopeAnalysisDataSourceType returns the Terraform awscc_ec2_network_insights_access_scope_analysis data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::EC2::NetworkInsightsAccessScopeAnalysis resource type.
func networkInsightsAccessScopeAnalysisDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"analyzed_eni_count": {
			// Property: AnalyzedEniCount
			// CloudFormation resource type schema:
			// {
			//   "type": "integer"
			// }
			Type:     types.Int64Type,
			Computed: true,
		},
		"end_date": {
			// Property: EndDate
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"findings_found": {
			// Property: FindingsFound
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "true",
			//     "false",
			//     "unknown"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"network_insights_access_scope_analysis_arn": {
			// Property: NetworkInsightsAccessScopeAnalysisArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"network_insights_access_scope_analysis_id": {
			// Property: NetworkInsightsAccessScopeAnalysisId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"network_insights_access_scope_id": {
			// Property: NetworkInsightsAccessScopeId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"start_date": {
			// Property: StartDate
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "running",
			//     "failed",
			//     "succeeded"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"status_message": {
			// Property: StatusMessage
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EC2::NetworkInsightsAccessScopeAnalysis",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::NetworkInsightsAccessScopeAnalysis").WithTerraformTypeName("awscc_ec2_network_insights_access_scope_analysis")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"analyzed_eni_count": "AnalyzedEniCount",
		"end_date":           "EndDate",
		"findings_found":     "FindingsFound",
		"key":                "Key",
		"network_insights_access_scope_analysis_arn": "NetworkInsightsAccessScopeAnalysisArn",
		"network_insights_access_scope_analysis_id":  "NetworkInsightsAccessScopeAnalysisId",
		"network_insights_access_scope_id":           "NetworkInsightsAccessScopeId",
		"start_date":                                 "StartDate",
		"status":                                     "Status",
		"status_message":                             "StatusMessage",
		"tags":                                       "Tags",
		"value":                                      "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return singularDataSourceType, nil
}
