// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_placement_group", placementGroupDataSource)
}

// placementGroupDataSource returns the Terraform awscc_ec2_placement_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::PlacementGroup resource.
func placementGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: GroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Group Name of Placement Group.",
		//	  "type": "string"
		//	}
		"group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Group Name of Placement Group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SpreadLevel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread",
		//	  "type": "string"
		//	}
		"spread_level": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Strategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The placement strategy.",
		//	  "type": "string"
		//	}
		"strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The placement strategy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::PlacementGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::PlacementGroup").WithTerraformTypeName("awscc_ec2_placement_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"group_name":   "GroupName",
		"spread_level": "SpreadLevel",
		"strategy":     "Strategy",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
