// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_eip", eIPResource)
}

// eIPResource returns the Terraform awscc_ec2_eip resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::EIP resource.
func eIPResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"allocation_id": {
			// Property: AllocationId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Allocation ID of the EIP generated by resource.",
			//	  "type": "string"
			//	}
			Description: "The Allocation ID of the EIP generated by resource.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"domain": {
			// Property: Domain
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.",
			//	  "type": "string"
			//	}
			Description: "Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"instance_id": {
			// Property: InstanceId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the instance.",
			//	  "type": "string"
			//	}
			Description: "The ID of the instance.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"network_border_group": {
			// Property: NetworkBorderGroup
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.",
			//	  "type": "string"
			//	}
			Description: "A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"public_ip": {
			// Property: PublicIp
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The PublicIP of the EIP generated by resource.",
			//	  "type": "string"
			//	}
			Description: "The PublicIP of the EIP generated by resource.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"public_ipv_4_pool": {
			// Property: PublicIpv4Pool
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.",
			//	  "type": "string"
			//	}
			Description: "The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Any tags assigned to the EIP.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Value",
			//	      "Key"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Description: "Any tags assigned to the EIP.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
				resource.UseStateForUnknown(),
			},
		},
		"transfer_address": {
			// Property: TransferAddress
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The PublicIP of the EIP generated by resource through transfer from another account",
			//	  "type": "string"
			//	}
			Description: "The PublicIP of the EIP generated by resource through transfer from another account",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
			// TransferAddress is a write-only property.
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::EC2::EIP",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::EIP").WithTerraformTypeName("awscc_ec2_eip")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allocation_id":        "AllocationId",
		"domain":               "Domain",
		"instance_id":          "InstanceId",
		"key":                  "Key",
		"network_border_group": "NetworkBorderGroup",
		"public_ip":            "PublicIp",
		"public_ipv_4_pool":    "PublicIpv4Pool",
		"tags":                 "Tags",
		"transfer_address":     "TransferAddress",
		"value":                "Value",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/TransferAddress",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
