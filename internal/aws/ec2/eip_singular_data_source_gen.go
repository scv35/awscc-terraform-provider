// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_eip", eIPDataSource)
}

// eIPDataSource returns the Terraform awscc_ec2_eip data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::EIP resource.
func eIPDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"allocation_id": {
			// Property: AllocationId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The Allocation ID of the EIP generated by resource.",
			//	  "type": "string"
			//	}
			Description: "The Allocation ID of the EIP generated by resource.",
			Type:        types.StringType,
			Computed:    true,
		},
		"domain": {
			// Property: Domain
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.",
			//	  "type": "string"
			//	}
			Description: "Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.",
			Type:        types.StringType,
			Computed:    true,
		},
		"instance_id": {
			// Property: InstanceId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the instance.",
			//	  "type": "string"
			//	}
			Description: "The ID of the instance.",
			Type:        types.StringType,
			Computed:    true,
		},
		"network_border_group": {
			// Property: NetworkBorderGroup
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.",
			//	  "type": "string"
			//	}
			Description: "A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.",
			Type:        types.StringType,
			Computed:    true,
		},
		"public_ip": {
			// Property: PublicIp
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The PublicIP of the EIP generated by resource.",
			//	  "type": "string"
			//	}
			Description: "The PublicIP of the EIP generated by resource.",
			Type:        types.StringType,
			Computed:    true,
		},
		"public_ipv_4_pool": {
			// Property: PublicIpv4Pool
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.",
			//	  "type": "string"
			//	}
			Description: "The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Any tags assigned to the EIP.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Value",
			//	      "Key"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Description: "Any tags assigned to the EIP.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"transfer_address": {
			// Property: TransferAddress
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The PublicIP of the EIP generated by resource through transfer from another account",
			//	  "type": "string"
			//	}
			Description: "The PublicIP of the EIP generated by resource through transfer from another account",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EC2::EIP",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::EIP").WithTerraformTypeName("awscc_ec2_eip")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allocation_id":        "AllocationId",
		"domain":               "Domain",
		"instance_id":          "InstanceId",
		"key":                  "Key",
		"network_border_group": "NetworkBorderGroup",
		"public_ip":            "PublicIp",
		"public_ipv_4_pool":    "PublicIpv4Pool",
		"tags":                 "Tags",
		"transfer_address":     "TransferAddress",
		"value":                "Value",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
