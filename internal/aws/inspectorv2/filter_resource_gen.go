// Code generated by generators/resource/main.go; DO NOT EDIT.

package inspectorv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_inspectorv2_filter", filterResourceType)
}

// filterResourceType returns the Terraform awscc_inspectorv2_filter resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::InspectorV2::Filter resource type.
func filterResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "Findings filter ARN.",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Findings filter ARN.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "Findings filter description.",
			//   "maxLength": 512,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Findings filter description.",
			Type:        types.StringType,
			Optional:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 512),
			},
		},
		"filter_action": {
			// Property: FilterAction
			// CloudFormation resource type schema:
			// {
			//   "description": "Findings filter action.",
			//   "enum": [
			//     "NONE",
			//     "SUPPRESS"
			//   ],
			//   "type": "string"
			// }
			Description: "Findings filter action.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"NONE",
					"SUPPRESS",
				}),
			},
		},
		"filter_criteria": {
			// Property: FilterCriteria
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Findings filter criteria.",
			//   "properties": {
			//     "AwsAccountId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "ComponentId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "ComponentType": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "Ec2InstanceImageId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "Ec2InstanceSubnetId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "Ec2InstanceVpcId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "EcrImageArchitecture": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "EcrImageHash": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "EcrImagePushedAt": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "EndInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           },
			//           "StartInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "EcrImageRegistry": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "EcrImageRepositoryName": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "EcrImageTags": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "FindingArn": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "FindingStatus": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "FindingType": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "FirstObservedAt": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "EndInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           },
			//           "StartInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "InspectorScore": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "LowerInclusive": {
			//             "type": "number"
			//           },
			//           "UpperInclusive": {
			//             "type": "number"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "LastObservedAt": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "EndInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           },
			//           "StartInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "NetworkProtocol": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "PortRange": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "BeginInclusive": {
			//             "maximum": 65535,
			//             "minimum": 0,
			//             "type": "integer"
			//           },
			//           "EndInclusive": {
			//             "maximum": 65535,
			//             "minimum": 0,
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "RelatedVulnerabilities": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "ResourceId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "ResourceTags": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Key": {
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 256,
			//             "minLength": 0,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "ResourceType": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "Severity": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "Title": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "UpdatedAt": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "EndInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           },
			//           "StartInclusive": {
			//             "format": "int64",
			//             "type": "integer"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "VendorSeverity": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "VulnerabilityId": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "VulnerabilitySource": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Comparison": {
			//             "enum": [
			//               "EQUALS",
			//               "PREFIX",
			//               "NOT_EQUALS"
			//             ],
			//             "type": "string"
			//           },
			//           "Value": {
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Comparison",
			//           "Value"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     },
			//     "VulnerablePackages": {
			//       "insertionOrder": false,
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "Architecture": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Comparison": {
			//                 "enum": [
			//                   "EQUALS",
			//                   "PREFIX",
			//                   "NOT_EQUALS"
			//                 ],
			//                 "type": "string"
			//               },
			//               "Value": {
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Comparison",
			//               "Value"
			//             ],
			//             "type": "object"
			//           },
			//           "Epoch": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "LowerInclusive": {
			//                 "type": "number"
			//               },
			//               "UpperInclusive": {
			//                 "type": "number"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Name": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Comparison": {
			//                 "enum": [
			//                   "EQUALS",
			//                   "PREFIX",
			//                   "NOT_EQUALS"
			//                 ],
			//                 "type": "string"
			//               },
			//               "Value": {
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Comparison",
			//               "Value"
			//             ],
			//             "type": "object"
			//           },
			//           "Release": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Comparison": {
			//                 "enum": [
			//                   "EQUALS",
			//                   "PREFIX",
			//                   "NOT_EQUALS"
			//                 ],
			//                 "type": "string"
			//               },
			//               "Value": {
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Comparison",
			//               "Value"
			//             ],
			//             "type": "object"
			//           },
			//           "SourceLayerHash": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Comparison": {
			//                 "enum": [
			//                   "EQUALS",
			//                   "PREFIX",
			//                   "NOT_EQUALS"
			//                 ],
			//                 "type": "string"
			//               },
			//               "Value": {
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Comparison",
			//               "Value"
			//             ],
			//             "type": "object"
			//           },
			//           "Version": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Comparison": {
			//                 "enum": [
			//                   "EQUALS",
			//                   "PREFIX",
			//                   "NOT_EQUALS"
			//                 ],
			//                 "type": "string"
			//               },
			//               "Value": {
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Comparison",
			//               "Value"
			//             ],
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "maxItems": 10,
			//       "minItems": 1,
			//       "type": "array"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Findings filter criteria.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"aws_account_id": {
						// Property: AwsAccountId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"component_id": {
						// Property: ComponentId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"component_type": {
						// Property: ComponentType
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ec_2_instance_image_id": {
						// Property: Ec2InstanceImageId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ec_2_instance_subnet_id": {
						// Property: Ec2InstanceSubnetId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ec_2_instance_vpc_id": {
						// Property: Ec2InstanceVpcId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ecr_image_architecture": {
						// Property: EcrImageArchitecture
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ecr_image_hash": {
						// Property: EcrImageHash
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ecr_image_pushed_at": {
						// Property: EcrImagePushedAt
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"end_inclusive": {
									// Property: EndInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
								"start_inclusive": {
									// Property: StartInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ecr_image_registry": {
						// Property: EcrImageRegistry
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ecr_image_repository_name": {
						// Property: EcrImageRepositoryName
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"ecr_image_tags": {
						// Property: EcrImageTags
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"finding_arn": {
						// Property: FindingArn
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"finding_status": {
						// Property: FindingStatus
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"finding_type": {
						// Property: FindingType
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"first_observed_at": {
						// Property: FirstObservedAt
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"end_inclusive": {
									// Property: EndInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
								"start_inclusive": {
									// Property: StartInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"inspector_score": {
						// Property: InspectorScore
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"lower_inclusive": {
									// Property: LowerInclusive
									Type:     types.Float64Type,
									Optional: true,
								},
								"upper_inclusive": {
									// Property: UpperInclusive
									Type:     types.Float64Type,
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"last_observed_at": {
						// Property: LastObservedAt
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"end_inclusive": {
									// Property: EndInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
								"start_inclusive": {
									// Property: StartInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"network_protocol": {
						// Property: NetworkProtocol
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"port_range": {
						// Property: PortRange
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"begin_inclusive": {
									// Property: BeginInclusive
									Type:     types.Int64Type,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(0, 65535),
									},
								},
								"end_inclusive": {
									// Property: EndInclusive
									Type:     types.Int64Type,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.IntBetween(0, 65535),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"related_vulnerabilities": {
						// Property: RelatedVulnerabilities
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"resource_id": {
						// Property: ResourceId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"resource_tags": {
						// Property: ResourceTags
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
										}),
									},
								},
								"key": {
									// Property: Key
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 128),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"resource_type": {
						// Property: ResourceType
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"severity": {
						// Property: Severity
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"title": {
						// Property: Title
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"updated_at": {
						// Property: UpdatedAt
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"end_inclusive": {
									// Property: EndInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
								"start_inclusive": {
									// Property: StartInclusive
									Type:     types.Int64Type,
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"vendor_severity": {
						// Property: VendorSeverity
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"vulnerability_id": {
						// Property: VulnerabilityId
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"vulnerability_source": {
						// Property: VulnerabilitySource
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"comparison": {
									// Property: Comparison
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"EQUALS",
											"PREFIX",
											"NOT_EQUALS",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 1024),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
					"vulnerable_packages": {
						// Property: VulnerablePackages
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"architecture": {
									// Property: Architecture
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"comparison": {
												// Property: Comparison
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"EQUALS",
														"PREFIX",
														"NOT_EQUALS",
													}),
												},
											},
											"value": {
												// Property: Value
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 1024),
												},
											},
										},
									),
									Optional: true,
								},
								"epoch": {
									// Property: Epoch
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"lower_inclusive": {
												// Property: LowerInclusive
												Type:     types.Float64Type,
												Optional: true,
											},
											"upper_inclusive": {
												// Property: UpperInclusive
												Type:     types.Float64Type,
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"name": {
									// Property: Name
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"comparison": {
												// Property: Comparison
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"EQUALS",
														"PREFIX",
														"NOT_EQUALS",
													}),
												},
											},
											"value": {
												// Property: Value
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 1024),
												},
											},
										},
									),
									Optional: true,
								},
								"release": {
									// Property: Release
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"comparison": {
												// Property: Comparison
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"EQUALS",
														"PREFIX",
														"NOT_EQUALS",
													}),
												},
											},
											"value": {
												// Property: Value
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 1024),
												},
											},
										},
									),
									Optional: true,
								},
								"source_layer_hash": {
									// Property: SourceLayerHash
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"comparison": {
												// Property: Comparison
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"EQUALS",
														"PREFIX",
														"NOT_EQUALS",
													}),
												},
											},
											"value": {
												// Property: Value
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 1024),
												},
											},
										},
									),
									Optional: true,
								},
								"version": {
									// Property: Version
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"comparison": {
												// Property: Comparison
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"EQUALS",
														"PREFIX",
														"NOT_EQUALS",
													}),
												},
											},
											"value": {
												// Property: Value
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(1, 1024),
												},
											},
										},
									),
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 10),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							Multiset(),
						},
					},
				},
			),
			Required: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "Findings filter name.",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Findings filter name.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Inspector Filter resource schema",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::InspectorV2::Filter").WithTerraformTypeName("awscc_inspectorv2_filter")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"architecture":              "Architecture",
		"arn":                       "Arn",
		"aws_account_id":            "AwsAccountId",
		"begin_inclusive":           "BeginInclusive",
		"comparison":                "Comparison",
		"component_id":              "ComponentId",
		"component_type":            "ComponentType",
		"description":               "Description",
		"ec_2_instance_image_id":    "Ec2InstanceImageId",
		"ec_2_instance_subnet_id":   "Ec2InstanceSubnetId",
		"ec_2_instance_vpc_id":      "Ec2InstanceVpcId",
		"ecr_image_architecture":    "EcrImageArchitecture",
		"ecr_image_hash":            "EcrImageHash",
		"ecr_image_pushed_at":       "EcrImagePushedAt",
		"ecr_image_registry":        "EcrImageRegistry",
		"ecr_image_repository_name": "EcrImageRepositoryName",
		"ecr_image_tags":            "EcrImageTags",
		"end_inclusive":             "EndInclusive",
		"epoch":                     "Epoch",
		"filter_action":             "FilterAction",
		"filter_criteria":           "FilterCriteria",
		"finding_arn":               "FindingArn",
		"finding_status":            "FindingStatus",
		"finding_type":              "FindingType",
		"first_observed_at":         "FirstObservedAt",
		"inspector_score":           "InspectorScore",
		"key":                       "Key",
		"last_observed_at":          "LastObservedAt",
		"lower_inclusive":           "LowerInclusive",
		"name":                      "Name",
		"network_protocol":          "NetworkProtocol",
		"port_range":                "PortRange",
		"related_vulnerabilities":   "RelatedVulnerabilities",
		"release":                   "Release",
		"resource_id":               "ResourceId",
		"resource_tags":             "ResourceTags",
		"resource_type":             "ResourceType",
		"severity":                  "Severity",
		"source_layer_hash":         "SourceLayerHash",
		"start_inclusive":           "StartInclusive",
		"title":                     "Title",
		"updated_at":                "UpdatedAt",
		"upper_inclusive":           "UpperInclusive",
		"value":                     "Value",
		"vendor_severity":           "VendorSeverity",
		"version":                   "Version",
		"vulnerability_id":          "VulnerabilityId",
		"vulnerability_source":      "VulnerabilitySource",
		"vulnerable_packages":       "VulnerablePackages",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
