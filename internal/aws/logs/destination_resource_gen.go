// Code generated by generators/resource/main.go; DO NOT EDIT.

package logs

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_logs_destination", destinationResource)
}

// destinationResource returns the Terraform awscc_logs_destination resource.
// This Terraform resource corresponds to the CloudFormation AWS::Logs::Destination resource.
func destinationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"destination_name": {
			// Property: DestinationName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the destination resource",
			//	  "maxLength": 512,
			//	  "minLength": 1,
			//	  "pattern": "^[^:*]{1,512}$",
			//	  "type": "string"
			//	}
			Description: "The name of the destination resource",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 512),
				validate.StringMatch(regexp.MustCompile("^[^:*]{1,512}$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"destination_policy": {
			// Property: DestinationPolicy
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "An IAM policy document that governs which AWS accounts can create subscription filters against this destination.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenAtLeast(1),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"role_arn": {
			// Property: RoleArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource",
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenAtLeast(1),
			},
		},
		"target_arn": {
			// Property: TargetArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)",
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenAtLeast(1),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "The AWS::Logs::Destination resource specifies a CloudWatch Logs destination. A destination encapsulates a physical resource (such as an Amazon Kinesis data stream) and enables you to subscribe that resource to a stream of log events.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Logs::Destination").WithTerraformTypeName("awscc_logs_destination")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                "Arn",
		"destination_name":   "DestinationName",
		"destination_policy": "DestinationPolicy",
		"role_arn":           "RoleArn",
		"target_arn":         "TargetArn",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
