// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package logs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_logs_log_stream", logStreamDataSource)
}

// logStreamDataSource returns the Terraform awscc_logs_log_stream data source.
// This Terraform data source corresponds to the CloudFormation AWS::Logs::LogStream resource.
func logStreamDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]tfsdk.Attribute{
		"log_group_name": {
			// Property: LogGroupName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the log group where the log stream is created.",
			//	  "type": "string"
			//	}
			Description: "The name of the log group where the log stream is created.",
			Type:        types.StringType,
			Computed:    true,
		},
		"log_stream_name": {
			// Property: LogStreamName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the log stream. The name must be unique wihtin the log group.",
			//	  "type": "string"
			//	}
			Description: "The name of the log stream. The name must be unique wihtin the log group.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Logs::LogStream",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Logs::LogStream").WithTerraformTypeName("awscc_logs_log_stream")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"log_group_name":  "LogGroupName",
		"log_stream_name": "LogStreamName",
	})

	v, err := NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
