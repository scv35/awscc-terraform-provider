// Code generated by generators/resource/main.go; DO NOT EDIT.

package logs

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_logs_metric_filter", metricFilterResource)
}

// metricFilterResource returns the Terraform awscc_logs_metric_filter resource.
// This Terraform resource corresponds to the CloudFormation AWS::Logs::MetricFilter resource.
func metricFilterResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"filter_name": {
			// Property: FilterName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A name for the metric filter.",
			//	  "maxLength": 512,
			//	  "minLength": 1,
			//	  "pattern": "^[^:*]{1,512}",
			//	  "type": "string"
			//	}
			Description: "A name for the metric filter.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 512),
				validate.StringMatch(regexp.MustCompile("^[^:*]{1,512}"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"filter_pattern": {
			// Property: FilterPattern
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Pattern that Logs follows to interpret each entry in a log.",
			//	  "maxLength": 1024,
			//	  "type": "string"
			//	}
			Description: "Pattern that Logs follows to interpret each entry in a log.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenAtMost(1024),
			},
		},
		"log_group_name": {
			// Property: LogGroupName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Existing log group that you want to associate with this filter.",
			//	  "maxLength": 512,
			//	  "minLength": 1,
			//	  "pattern": "^[.\\-_/#A-Za-z0-9]{1,512}",
			//	  "type": "string"
			//	}
			Description: "Existing log group that you want to associate with this filter.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 512),
				validate.StringMatch(regexp.MustCompile("^[.\\-_/#A-Za-z0-9]{1,512}"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"metric_transformations": {
			// Property: MetricTransformations
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A collection of information that defines how metric data gets emitted.",
			//	  "insertionOrder": false,
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "DefaultValue": {
			//	        "description": "The value to emit when a filter pattern does not match a log event. This value can be null.",
			//	        "type": "number"
			//	      },
			//	      "Dimensions": {
			//	        "description": "Dimensions are the key-value pairs that further define a metric",
			//	        "insertionOrder": false,
			//	        "items": {
			//	          "additionalProperties": false,
			//	          "description": "the key-value pairs that further define a metric.",
			//	          "properties": {
			//	            "Key": {
			//	              "description": "The key of the dimension. Maximum length of 255.",
			//	              "maxLength": 255,
			//	              "minLength": 1,
			//	              "type": "string"
			//	            },
			//	            "Value": {
			//	              "description": "The value of the dimension. Maximum length of 255.",
			//	              "maxLength": 255,
			//	              "minLength": 1,
			//	              "type": "string"
			//	            }
			//	          },
			//	          "required": [
			//	            "Key",
			//	            "Value"
			//	          ],
			//	          "type": "object"
			//	        },
			//	        "maxItems": 3,
			//	        "minItems": 1,
			//	        "type": "array",
			//	        "uniqueItems": true
			//	      },
			//	      "MetricName": {
			//	        "description": "The name of the CloudWatch metric. Metric name must be in ASCII format.",
			//	        "maxLength": 255,
			//	        "minLength": 1,
			//	        "pattern": "",
			//	        "type": "string"
			//	      },
			//	      "MetricNamespace": {
			//	        "$comment": "Namespaces can be up to 256 characters long; valid characters include 0-9A-Za-z.-_/#",
			//	        "description": "The namespace of the CloudWatch metric.",
			//	        "maxLength": 256,
			//	        "minLength": 1,
			//	        "pattern": "^[0-9a-zA-Z\\.\\-_\\/#]{1,256}",
			//	        "type": "string"
			//	      },
			//	      "MetricValue": {
			//	        "description": "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
			//	        "maxLength": 100,
			//	        "minLength": 1,
			//	        "pattern": ".{1,100}",
			//	        "type": "string"
			//	      },
			//	      "Unit": {
			//	        "description": "The unit to assign to the metric. If you omit this, the unit is set as None.",
			//	        "enum": [
			//	          "Seconds",
			//	          "Microseconds",
			//	          "Milliseconds",
			//	          "Bytes",
			//	          "Kilobytes",
			//	          "Megabytes",
			//	          "Gigabytes",
			//	          "Terabytes",
			//	          "Bits",
			//	          "Kilobits",
			//	          "Megabits",
			//	          "Gigabits",
			//	          "Terabits",
			//	          "Percent",
			//	          "Count",
			//	          "Bytes/Second",
			//	          "Kilobytes/Second",
			//	          "Megabytes/Second",
			//	          "Gigabytes/Second",
			//	          "Terabytes/Second",
			//	          "Bits/Second",
			//	          "Kilobits/Second",
			//	          "Megabits/Second",
			//	          "Gigabits/Second",
			//	          "Terabits/Second",
			//	          "Count/Second",
			//	          "None"
			//	        ],
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "MetricName",
			//	      "MetricNamespace",
			//	      "MetricValue"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "maxItems": 1,
			//	  "minItems": 1,
			//	  "type": "array"
			//	}
			Description: "A collection of information that defines how metric data gets emitted.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"default_value": {
						// Property: DefaultValue
						Description: "The value to emit when a filter pattern does not match a log event. This value can be null.",
						Type:        types.Float64Type,
						Optional:    true,
						Computed:    true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"dimensions": {
						// Property: Dimensions
						Description: "Dimensions are the key-value pairs that further define a metric",
						Attributes: tfsdk.SetNestedAttributes(
							map[string]tfsdk.Attribute{
								"key": {
									// Property: Key
									Description: "The key of the dimension. Maximum length of 255.",
									Type:        types.StringType,
									Required:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 255),
									},
								},
								"value": {
									// Property: Value
									Description: "The value of the dimension. Maximum length of 255.",
									Type:        types.StringType,
									Required:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 255),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						Validators: []tfsdk.AttributeValidator{
							validate.ArrayLenBetween(1, 3),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"metric_name": {
						// Property: MetricName
						Description: "The name of the CloudWatch metric. Metric name must be in ASCII format.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 255),
						},
					},
					"metric_namespace": {
						// Property: MetricNamespace
						Description: "The namespace of the CloudWatch metric.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 256),
							validate.StringMatch(regexp.MustCompile("^[0-9a-zA-Z\\.\\-_\\/#]{1,256}"), ""),
						},
					},
					"metric_value": {
						// Property: MetricValue
						Description: "The value to publish to the CloudWatch metric when a filter pattern matches a log event.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 100),
							validate.StringMatch(regexp.MustCompile(".{1,100}"), ""),
						},
					},
					"unit": {
						// Property: Unit
						Description: "The unit to assign to the metric. If you omit this, the unit is set as None.",
						Type:        types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"Seconds",
								"Microseconds",
								"Milliseconds",
								"Bytes",
								"Kilobytes",
								"Megabytes",
								"Gigabytes",
								"Terabytes",
								"Bits",
								"Kilobits",
								"Megabits",
								"Gigabits",
								"Terabits",
								"Percent",
								"Count",
								"Bytes/Second",
								"Kilobytes/Second",
								"Megabytes/Second",
								"Gigabytes/Second",
								"Terabytes/Second",
								"Bits/Second",
								"Kilobits/Second",
								"Megabits/Second",
								"Gigabits/Second",
								"Terabits/Second",
								"Count/Second",
								"None",
							}),
						},
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Required: true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(1, 1),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Specifies a metric filter that describes how CloudWatch Logs extracts information from logs and transforms it into Amazon CloudWatch metrics.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Logs::MetricFilter").WithTerraformTypeName("awscc_logs_metric_filter")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"default_value":          "DefaultValue",
		"dimensions":             "Dimensions",
		"filter_name":            "FilterName",
		"filter_pattern":         "FilterPattern",
		"key":                    "Key",
		"log_group_name":         "LogGroupName",
		"metric_name":            "MetricName",
		"metric_namespace":       "MetricNamespace",
		"metric_transformations": "MetricTransformations",
		"metric_value":           "MetricValue",
		"unit":                   "Unit",
		"value":                  "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
