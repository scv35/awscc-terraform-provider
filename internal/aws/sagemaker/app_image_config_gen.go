// Code generated by generators/resource/main.go; DO NOT EDIT.

package sagemaker

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("awscc_sagemaker_app_image_config", appImageConfigResourceType)
}

// appImageConfigResourceType returns the Terraform awscc_sagemaker_app_image_config resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::SageMaker::AppImageConfig resource type.
func appImageConfigResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"app_image_config_arn": {
			// Property: AppImageConfigArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) of the AppImageConfig.",
			//   "maxLength": 256,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) of the AppImageConfig.",
			Type:        types.StringType,
			Computed:    true,
		},
		"app_image_config_name": {
			// Property: AppImageConfigName
			// CloudFormation resource type schema:
			// {
			//   "description": "The Name of the AppImageConfig.",
			//   "maxLength": 63,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The Name of the AppImageConfig.",
			Type:        types.StringType,
			Required:    true,
			// AppImageConfigName is a force-new attribute.
		},
		"kernel_gateway_image_config": {
			// Property: KernelGatewayImageConfig
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.",
			//   "properties": {
			//     "FileSystemConfig": {
			//       "additionalProperties": false,
			//       "description": "The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.",
			//       "properties": {
			//         "DefaultGid": {
			//           "description": "The default POSIX group ID (GID). If not specified, defaults to 100.",
			//           "type": "integer"
			//         },
			//         "DefaultUid": {
			//           "description": "The default POSIX user ID (UID). If not specified, defaults to 1000.",
			//           "type": "integer"
			//         },
			//         "MountPath": {
			//           "description": "The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.",
			//           "maxLength": 1024,
			//           "minLength": 1,
			//           "pattern": "",
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "KernelSpecs": {
			//       "description": "The specification of the Jupyter kernels in the image.",
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "DisplayName": {
			//             "description": "The display name of the kernel.",
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Name": {
			//             "description": "The name of the kernel.",
			//             "maxLength": 1024,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Name"
			//         ],
			//         "type": "object"
			//       },
			//       "maxItems": 1,
			//       "minItems": 1,
			//       "type": "array"
			//     }
			//   },
			//   "required": [
			//     "KernelSpecs"
			//   ],
			//   "type": "object"
			// }
			Description: "The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"file_system_config": {
						// Property: FileSystemConfig
						Description: "The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"default_gid": {
									// Property: DefaultGid
									Description: "The default POSIX group ID (GID). If not specified, defaults to 100.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"default_uid": {
									// Property: DefaultUid
									Description: "The default POSIX user ID (UID). If not specified, defaults to 1000.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"mount_path": {
									// Property: MountPath
									Description: "The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.",
									Type:        types.StringType,
									Optional:    true,
								},
							},
						),
						Optional: true,
					},
					"kernel_specs": {
						// Property: KernelSpecs
						Description: "The specification of the Jupyter kernels in the image.",
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"display_name": {
									// Property: DisplayName
									Description: "The display name of the kernel.",
									Type:        types.StringType,
									Optional:    true,
								},
								"name": {
									// Property: Name
									Description: "The name of the kernel.",
									Type:        types.StringType,
									Required:    true,
								},
							},
							schema.ListNestedAttributesOptions{
								MinItems: 1,
								MaxItems: 1,
							},
						),
						Required: true,
					},
				},
			),
			Optional: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "A list of tags to apply to the AppImageConfig.",
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "minItems": 0,
			//   "type": "array",
			//   "uniqueItems": false
			// }
			Description: "A list of tags to apply to the AppImageConfig.",
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MinItems: 0,
					MaxItems: 50,
				},
			),
			Optional: true,
			Computed: true,
			// Tags is a force-new attribute.
			// Tags is a write-only attribute.
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::SageMaker::AppImageConfig",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::SageMaker::AppImageConfig").WithTerraformTypeName("awscc_sagemaker_app_image_config").WithTerraformSchema(schema)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Tags",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_sagemaker_app_image_config", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
