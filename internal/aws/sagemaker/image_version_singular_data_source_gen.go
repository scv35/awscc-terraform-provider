// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package sagemaker

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_sagemaker_image_version", imageVersionDataSource)
}

// imageVersionDataSource returns the Terraform awscc_sagemaker_image_version data source.
// This Terraform data source corresponds to the CloudFormation AWS::SageMaker::ImageVersion resource.
func imageVersionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: BaseImage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The registry path of the container image on which this image version is based.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": ".+",
		//	  "type": "string"
		//	}
		"base_image": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The registry path of the container image on which this image version is based.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ContainerImage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The registry path of the container image that contains this image version.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": ".+",
		//	  "type": "string"
		//	}
		"container_image": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The registry path of the container image that contains this image version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ImageArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the parent image.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws(-[\\w]+)*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:image\\/[a-z0-9]([-.]?[a-z0-9])*$",
		//	  "type": "string"
		//	}
		"image_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the parent image.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ImageName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the image this version belongs to.",
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "pattern": "^[A-Za-z0-9]([-.]?[A-Za-z0-9])*$",
		//	  "type": "string"
		//	}
		"image_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the image this version belongs to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ImageVersionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the image version.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws(-[\\w]+)*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:image-version\\/[a-z0-9]([-.]?[a-z0-9])*\\/[0-9]+$",
		//	  "type": "string"
		//	}
		"image_version_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the image version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Version
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version number of the image version.",
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"version": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The version number of the image version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SageMaker::ImageVersion",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SageMaker::ImageVersion").WithTerraformTypeName("awscc_sagemaker_image_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"base_image":        "BaseImage",
		"container_image":   "ContainerImage",
		"image_arn":         "ImageArn",
		"image_name":        "ImageName",
		"image_version_arn": "ImageVersionArn",
		"version":           "Version",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
