// Code generated by generators/resource/main.go; DO NOT EDIT.

package backup

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_backup_backup_vault", backupVault)
}

// backupVault returns the Terraform aws_backup_backup_vault resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Backup::BackupVault resource type.
func backupVault(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"access_policy": {
			// Property: AccessPolicy
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
		},
		"backup_vault_arn": {
			// Property: BackupVaultArn
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"backup_vault_name": {
			// Property: BackupVaultName
			// CloudFormation resource type schema:
			/*
			   {
			     "pattern": "",
			     "$ref": "#/definitions/BackupVaultNamePattern",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Required: true,
			// BackupVaultName is a force-new attribute.
		},
		"backup_vault_tags": {
			// Property: BackupVaultTags
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "patternProperties": {
			       "": {
			         "type": "string"
			       }
			     },
			     "type": "object"
			   }
			*/
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Optional: true,
		},
		"encryption_key_arn": {
			// Property: EncryptionKeyArn
			// CloudFormation resource type schema:
			/*
			   {
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			// EncryptionKeyArn is a force-new attribute.
		},
		"notifications": {
			// Property: Notifications
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "BackupVaultEvents": {
			         "items": {
			           "type": "string"
			         },
			         "type": "array",
			         "uniqueItems": false
			       },
			       "SNSTopicArn": {
			         "type": "string"
			       }
			     },
			     "$ref": "#/definitions/NotificationObjectType",
			     "required": [
			       "SNSTopicArn",
			       "BackupVaultEvents"
			     ],
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"backup_vault_events": {
						// Property: BackupVaultEvents
						// CloudFormation resource type schema:
						/*
						   {
						     "items": {
						       "type": "string"
						     },
						     "type": "array",
						     "uniqueItems": false
						   }
						*/
						Type:     types.ListType{ElemType: types.StringType},
						Required: true,
					},
					"sns_topic_arn": {
						// Property: SNSTopicArn
						// CloudFormation resource type schema:
						/*
						   {
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::Backup::BackupVault",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Backup::BackupVault").WithTerraformTypeName("aws_backup_backup_vault").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_backup_backup_vault", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
