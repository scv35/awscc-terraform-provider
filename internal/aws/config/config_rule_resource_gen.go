// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package config

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_config_config_rule", configRuleResource)
}

// configRuleResource returns the Terraform awscc_config_config_rule resource.
// This Terraform resource corresponds to the CloudFormation AWS::Config::ConfigRule resource.
func configRuleResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN generated for the AWS Config rule ",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN generated for the AWS Config rule ",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Compliance
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Compliance details of the Config rule",
		//	  "properties": {
		//	    "Type": {
		//	      "description": "Compliance type determined by the Config rule",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"compliance": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Compliance type determined by the Config rule",
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Compliance details of the Config rule",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConfigRuleId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ID of the config rule",
		//	  "type": "string"
		//	}
		"config_rule_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ID of the config rule",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConfigRuleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name for the AWS Config rule",
		//	  "type": "string"
		//	}
		"config_rule_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name for the AWS Config rule",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description provided for the AWS Config rule",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description provided for the AWS Config rule",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EvaluationModes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of EvaluationModeConfiguration objects",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Mode of evaluation of AWS Config rule",
		//	    "properties": {
		//	      "Mode": {
		//	        "description": "Mode of evaluation of AWS Config rule",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"evaluation_modes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Mode
					"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Mode of evaluation of AWS Config rule",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of EvaluationModeConfiguration objects",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InputParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "JSON string passed the Lambda function",
		//	  "type": "string"
		//	}
		"input_parameters": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "JSON string passed the Lambda function",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaximumExecutionFrequency
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Maximum frequency at which the rule has to be evaluated",
		//	  "type": "string"
		//	}
		"maximum_execution_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Maximum frequency at which the rule has to be evaluated",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Scope
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Scope to constrain which resources can trigger the AWS Config rule",
		//	  "properties": {
		//	    "ComplianceResourceId": {
		//	      "description": "ID of the only one resource which we want to trigger the rule",
		//	      "type": "string"
		//	    },
		//	    "ComplianceResourceTypes": {
		//	      "description": "Resource types of resources which we want to trigger the rule",
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "TagKey": {
		//	      "description": "Tag key applied only to resources which we want to trigger the rule",
		//	      "type": "string"
		//	    },
		//	    "TagValue": {
		//	      "description": "Tag value applied only to resources which we want to trigger the rule",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"scope": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ComplianceResourceId
				"compliance_resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "ID of the only one resource which we want to trigger the rule",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ComplianceResourceTypes
				"compliance_resource_types": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "Resource types of resources which we want to trigger the rule",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TagKey
				"tag_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Tag key applied only to resources which we want to trigger the rule",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TagValue
				"tag_value": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Tag value applied only to resources which we want to trigger the rule",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Scope to constrain which resources can trigger the AWS Config rule",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Source
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Source of events for the AWS Config rule",
		//	  "properties": {
		//	    "CustomPolicyDetails": {
		//	      "additionalProperties": false,
		//	      "description": "Custom policy details when rule is custom owned",
		//	      "properties": {
		//	        "EnableDebugLogDelivery": {
		//	          "description": "Logging toggle for custom policy rule",
		//	          "type": "boolean"
		//	        },
		//	        "PolicyRuntime": {
		//	          "description": "Runtime system for custom policy rule",
		//	          "type": "string"
		//	        },
		//	        "PolicyText": {
		//	          "description": "Policy definition containing logic for custom policy rule",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Owner": {
		//	      "description": "Owner of the config rule",
		//	      "type": "string"
		//	    },
		//	    "SourceDetails": {
		//	      "description": "List of message types that can trigger the rule",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Source and message type that can trigger the rule",
		//	        "properties": {
		//	          "EventSource": {
		//	            "description": "Source of event that can trigger the rule",
		//	            "type": "string"
		//	          },
		//	          "MaximumExecutionFrequency": {
		//	            "description": "Frequency at which the rule has to be evaluated",
		//	            "type": "string"
		//	          },
		//	          "MessageType": {
		//	            "description": "Notification type that can trigger the rule",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "EventSource",
		//	          "MessageType"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "SourceIdentifier": {
		//	      "description": "Identifier for the source of events",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Owner"
		//	  ],
		//	  "type": "object"
		//	}
		"source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomPolicyDetails
				"custom_policy_details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EnableDebugLogDelivery
						"enable_debug_log_delivery": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Logging toggle for custom policy rule",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: PolicyRuntime
						"policy_runtime": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Runtime system for custom policy rule",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: PolicyText
						"policy_text": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Policy definition containing logic for custom policy rule",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
							// PolicyText is a write-only property.
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Custom policy details when rule is custom owned",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Owner
				"owner": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Owner of the config rule",
					Required:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourceDetails
				"source_details": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EventSource
							"event_source": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Source of event that can trigger the rule",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: MaximumExecutionFrequency
							"maximum_execution_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Frequency at which the rule has to be evaluated",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: MessageType
							"message_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Notification type that can trigger the rule",
								Required:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "List of message types that can trigger the rule",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SourceIdentifier
				"source_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Identifier for the source of events",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Source of events for the AWS Config rule",
			Required:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Schema for AWS Config ConfigRule",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Config::ConfigRule").WithTerraformTypeName("awscc_config_config_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                         "Arn",
		"compliance":                  "Compliance",
		"compliance_resource_id":      "ComplianceResourceId",
		"compliance_resource_types":   "ComplianceResourceTypes",
		"config_rule_id":              "ConfigRuleId",
		"config_rule_name":            "ConfigRuleName",
		"custom_policy_details":       "CustomPolicyDetails",
		"description":                 "Description",
		"enable_debug_log_delivery":   "EnableDebugLogDelivery",
		"evaluation_modes":            "EvaluationModes",
		"event_source":                "EventSource",
		"input_parameters":            "InputParameters",
		"maximum_execution_frequency": "MaximumExecutionFrequency",
		"message_type":                "MessageType",
		"mode":                        "Mode",
		"owner":                       "Owner",
		"policy_runtime":              "PolicyRuntime",
		"policy_text":                 "PolicyText",
		"scope":                       "Scope",
		"source":                      "Source",
		"source_details":              "SourceDetails",
		"source_identifier":           "SourceIdentifier",
		"tag_key":                     "TagKey",
		"tag_value":                   "TagValue",
		"type":                        "Type",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Source/CustomPolicyDetails/PolicyText",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
