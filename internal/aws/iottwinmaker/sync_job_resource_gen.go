// Code generated by generators/resource/main.go; DO NOT EDIT.

package iottwinmaker

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_iottwinmaker_sync_job", syncJobResource)
}

// syncJobResource returns the Terraform awscc_iottwinmaker_sync_job resource.
// This Terraform resource corresponds to the CloudFormation AWS::IoTTwinMaker::SyncJob resource.
func syncJobResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ARN of the SyncJob.",
			//	  "maxLength": 2048,
			//	  "minLength": 20,
			//	  "pattern": "arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\\/a-zA-Z0-9_\\-\\.:]+",
			//	  "type": "string"
			//	}
			Description: "The ARN of the SyncJob.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"creation_date_time": {
			// Property: CreationDateTime
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The date and time when the sync job was created.",
			//	  "format": "date-time",
			//	  "type": "string"
			//	}
			Description: "The date and time when the sync job was created.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"state": {
			// Property: State
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The state of SyncJob.",
			//	  "maxLength": 128,
			//	  "minLength": 1,
			//	  "pattern": "[a-zA-Z_\\-0-9]+",
			//	  "type": "string"
			//	}
			Description: "The state of SyncJob.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"sync_role": {
			// Property: SyncRole
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The IAM Role that execute SyncJob.",
			//	  "maxLength": 2048,
			//	  "minLength": 20,
			//	  "pattern": "arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*",
			//	  "type": "string"
			//	}
			Description: "The IAM Role that execute SyncJob.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(20, 2048),
				validate.StringMatch(regexp.MustCompile("arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"sync_source": {
			// Property: SyncSource
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The source of the SyncJob.",
			//	  "maxLength": 128,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "The source of the SyncJob.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "description": "A key-value pair to associate with a resource.",
			//	  "patternProperties": {
			//	    "": {
			//	      "maxLength": 256,
			//	      "minLength": 1,
			//	      "type": "string"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Description: "A key-value pair to associate with a resource.",
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"update_date_time": {
			// Property: UpdateDateTime
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The date and time when the sync job was updated.",
			//	  "format": "date-time",
			//	  "type": "string"
			//	}
			Description: "The date and time when the sync job was updated.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"workspace_id": {
			// Property: WorkspaceId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The ID of the workspace.",
			//	  "maxLength": 128,
			//	  "minLength": 1,
			//	  "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
			//	  "type": "string"
			//	}
			Description: "The ID of the workspace.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
				validate.StringMatch(regexp.MustCompile("[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::IoTTwinMaker::SyncJob",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTTwinMaker::SyncJob").WithTerraformTypeName("awscc_iottwinmaker_sync_job")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                "Arn",
		"creation_date_time": "CreationDateTime",
		"state":              "State",
		"sync_role":          "SyncRole",
		"sync_source":        "SyncSource",
		"tags":               "Tags",
		"update_date_time":   "UpdateDateTime",
		"workspace_id":       "WorkspaceId",
	})

	opts = opts.IsImmutableType(true)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
