// Code generated by generators/resource/main.go; DO NOT EDIT.

package iottwinmaker

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_iottwinmaker_scene", sceneResourceType)
}

// sceneResourceType returns the Terraform awscc_iottwinmaker_scene resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::IoTTwinMaker::Scene resource type.
func sceneResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The ARN of the scene.",
			//   "maxLength": 2048,
			//   "minLength": 20,
			//   "pattern": "arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\\/a-zA-Z0-9_\\-\\.:]+",
			//   "type": "string"
			// }
			Description: "The ARN of the scene.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"capabilities": {
			// Property: Capabilities
			// CloudFormation resource type schema:
			// {
			//   "description": "A list of capabilities that the scene uses to render.",
			//   "insertionOrder": false,
			//   "items": {
			//     "maxLength": 256,
			//     "minLength": 0,
			//     "pattern": ".*",
			//     "type": "string"
			//   },
			//   "maxItems": 50,
			//   "minItems": 0,
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "A list of capabilities that the scene uses to render.",
			Type:        types.SetType{ElemType: types.StringType},
			Optional:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.ArrayLenBetween(0, 50),
				validate.ArrayForEach(validate.StringLenBetween(0, 256)),
				validate.ArrayForEach(validate.StringMatch(regexp.MustCompile(".*"), "")),
			},
		},
		"content_location": {
			// Property: ContentLocation
			// CloudFormation resource type schema:
			// {
			//   "description": "The relative path that specifies the location of the content definition file.",
			//   "maxLength": 256,
			//   "minLength": 0,
			//   "pattern": "[sS]3://[A-Za-z0-9._/-]+",
			//   "type": "string"
			// }
			Description: "The relative path that specifies the location of the content definition file.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 256),
				validate.StringMatch(regexp.MustCompile("[sS]3://[A-Za-z0-9._/-]+"), ""),
			},
		},
		"creation_date_time": {
			// Property: CreationDateTime
			// CloudFormation resource type schema:
			// {
			//   "description": "The date and time when the scene was created.",
			//   "format": "date-time",
			//   "type": "string"
			// }
			Description: "The date and time when the scene was created.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "The description of the scene.",
			//   "maxLength": 512,
			//   "minLength": 0,
			//   "type": "string"
			// }
			Description: "The description of the scene.",
			Type:        types.StringType,
			Optional:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 512),
			},
		},
		"scene_id": {
			// Property: SceneId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the scene.",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
			//   "type": "string"
			// }
			Description: "The ID of the scene.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
				validate.StringMatch(regexp.MustCompile("[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A key-value pair to associate with a resource.",
			//   "patternProperties": {
			//     "": {
			//       "maxLength": 256,
			//       "minLength": 1,
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "A key-value pair to associate with a resource.",
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Optional: true,
		},
		"update_date_time": {
			// Property: UpdateDateTime
			// CloudFormation resource type schema:
			// {
			//   "description": "The date and time of the current update.",
			//   "format": "date-time",
			//   "type": "string"
			// }
			Description: "The date and time of the current update.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"workspace_id": {
			// Property: WorkspaceId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the scene.",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
			//   "type": "string"
			// }
			Description: "The ID of the scene.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
				validate.StringMatch(regexp.MustCompile("[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::IoTTwinMaker::Scene",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTTwinMaker::Scene").WithTerraformTypeName("awscc_iottwinmaker_scene")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                "Arn",
		"capabilities":       "Capabilities",
		"content_location":   "ContentLocation",
		"creation_date_time": "CreationDateTime",
		"description":        "Description",
		"scene_id":           "SceneId",
		"tags":               "Tags",
		"update_date_time":   "UpdateDateTime",
		"workspace_id":       "WorkspaceId",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
