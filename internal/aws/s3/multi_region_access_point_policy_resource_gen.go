// Code generated by generators/resource/main.go; DO NOT EDIT.

package s3

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_s3_multi_region_access_point_policy", multiRegionAccessPointPolicyResourceType)
}

// multiRegionAccessPointPolicyResourceType returns the Terraform awscc_s3_multi_region_access_point_policy resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::S3::MultiRegionAccessPointPolicy resource type.
func multiRegionAccessPointPolicyResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"mrap_name": {
			// Property: MrapName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the Multi Region Access Point to apply policy",
			//   "maxLength": 50,
			//   "minLength": 3,
			//   "pattern": "^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$",
			//   "type": "string"
			// }
			Description: "The name of the Multi Region Access Point to apply policy",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(3, 50),
				validate.StringMatch(regexp.MustCompile("^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(),
			},
		},
		"policy": {
			// Property: Policy
			// CloudFormation resource type schema:
			// {
			//   "description": "Policy document to apply to a Multi Region Access Point",
			//   "type": "object"
			// }
			Description: "Policy document to apply to a Multi Region Access Point",
			Type:        types.MapType{ElemType: types.StringType},
			Required:    true,
		},
		"policy_status": {
			// Property: PolicyStatus
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "The Policy Status associated with this Multi Region Access Point",
			//   "properties": {
			//     "IsPublic": {
			//       "description": "Specifies whether the policy is public or not.",
			//       "enum": [
			//         "true",
			//         "false"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "IsPublic"
			//   ],
			//   "type": "object"
			// }
			Description: "The Policy Status associated with this Multi Region Access Point",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"is_public": {
						// Property: IsPublic
						Description: "Specifies whether the policy is public or not.",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"true",
								"false",
							}),
						},
					},
				},
			),
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "The policy to be attached to a Multi Region Access Point",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3::MultiRegionAccessPointPolicy").WithTerraformTypeName("awscc_s3_multi_region_access_point_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"is_public":     "IsPublic",
		"mrap_name":     "MrapName",
		"policy":        "Policy",
		"policy_status": "PolicyStatus",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
