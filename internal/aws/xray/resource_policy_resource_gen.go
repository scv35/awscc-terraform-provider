// Code generated by generators/resource/main.go; DO NOT EDIT.

package xray

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_xray_resource_policy", resourcePolicyResource)
}

// resourcePolicyResource returns the Terraform awscc_xray_resource_policy resource.
// This Terraform resource corresponds to the CloudFormation AWS::XRay::ResourcePolicy resource.
func resourcePolicyResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"bypass_policy_lockout_check": {
			// Property: BypassPolicyLockoutCheck
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A flag to indicate whether to bypass the resource policy lockout safety check",
			//	  "type": "boolean"
			//	}
			Description: "A flag to indicate whether to bypass the resource policy lockout safety check",
			Type:        types.BoolType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
			// BypassPolicyLockoutCheck is a write-only property.
		},
		"policy_document": {
			// Property: PolicyDocument
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The resource policy document, which can be up to 5kb in size.",
			//	  "maxLength": 5120,
			//	  "minLength": 1,
			//	  "type": "string"
			//	}
			Description: "The resource policy document, which can be up to 5kb in size.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 5120),
			},
		},
		"policy_name": {
			// Property: PolicyName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "The name of the resource policy. Must be unique within a specific AWS account.",
			//	  "maxLength": 128,
			//	  "minLength": 1,
			//	  "pattern": "[\\w+=,.@-]+",
			//	  "type": "string"
			//	}
			Description: "The name of the resource policy. Must be unique within a specific AWS account.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 128),
				validate.StringMatch(regexp.MustCompile("[\\w+=,.@-]+"), ""),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "This schema provides construct and validation rules for AWS-XRay Resource Policy resource parameters.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::XRay::ResourcePolicy").WithTerraformTypeName("awscc_xray_resource_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bypass_policy_lockout_check": "BypassPolicyLockoutCheck",
		"policy_document":             "PolicyDocument",
		"policy_name":                 "PolicyName",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/BypassPolicyLockoutCheck",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
