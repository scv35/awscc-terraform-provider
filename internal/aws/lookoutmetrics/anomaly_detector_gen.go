// Code generated by generators/resource/main.go; DO NOT EDIT.

package lookoutmetrics

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("aws_lookoutmetrics_anomaly_detector", anomalyDetector)
}

// anomalyDetector returns the Terraform aws_lookoutmetrics_anomaly_detector resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::LookoutMetrics::AnomalyDetector resource type.
func anomalyDetector(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"anomaly_detector_config": {
			// Property: AnomalyDetectorConfig
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "properties": {
			       "AnomalyDetectorFrequency": {
			         "description": "Frequency of anomaly detection",
			         "enum": [
			           "PT5M",
			           "PT10M",
			           "PT1H",
			           "P1D"
			         ],
			         "$ref": "#/definitions/AnomalyDetectorFrequency",
			         "type": "string"
			       }
			     },
			     "$ref": "#/definitions/AnomalyDetectorConfig",
			     "required": [
			       "AnomalyDetectorFrequency"
			     ],
			     "type": "object"
			   }
			*/
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"anomaly_detector_frequency": {
						// Property: AnomalyDetectorFrequency
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Frequency of anomaly detection",
						     "enum": [
						       "PT5M",
						       "PT10M",
						       "PT1H",
						       "P1D"
						     ],
						     "$ref": "#/definitions/AnomalyDetectorFrequency",
						     "type": "string"
						   }
						*/
						Description: "Frequency of anomaly detection",
						Type:        types.StringType,
						Required:    true,
					},
				},
			),
			Required: true,
		},
		"anomaly_detector_description": {
			// Property: AnomalyDetectorDescription
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "A description for the AnomalyDetector.",
			     "maxLength": 256,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "A description for the AnomalyDetector.",
			Type:        types.StringType,
			Optional:    true,
		},
		"anomaly_detector_name": {
			// Property: AnomalyDetectorName
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "Name for the Amazon Lookout for Metrics Anomaly Detector",
			     "maxLength": 63,
			     "minLength": 1,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "Name for the Amazon Lookout for Metrics Anomaly Detector",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			// AnomalyDetectorName is a force-new attribute.
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			/*
			   {
			     "maxLength": 256,
			     "pattern": "",
			     "$ref": "#/definitions/Arn",
			     "type": "string"
			   }
			*/
			Type:     types.StringType,
			Computed: true,
		},
		"kms_key_arn": {
			// Property: KmsKeyArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "KMS key used to encrypt the AnomalyDetector data",
			     "maxLength": 2048,
			     "minLength": 20,
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "KMS key used to encrypt the AnomalyDetector data",
			Type:        types.StringType,
			Optional:    true,
		},
		"metric_set_list": {
			// Property: MetricSetList
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "List of metric sets for anomaly detection",
			     "items": {
			       "additionalProperties": false,
			       "properties": {
			         "DimensionList": {
			           "description": "Dimensions for this MetricSet.",
			           "insertionOrder": false,
			           "items": {
			             "description": "Name of a column in the data.",
			             "maxLength": 63,
			             "minLength": 1,
			             "pattern": "",
			             "$ref": "#/definitions/ColumnName",
			             "type": "string"
			           },
			           "minItems": 0,
			           "type": "array"
			         },
			         "MetricList": {
			           "description": "Metrics captured by this MetricSet.",
			           "insertionOrder": false,
			           "items": {
			             "additionalProperties": false,
			             "properties": {
			               "AggregationFunction": {
			                 "description": "Operator used to aggregate metric values",
			                 "enum": [
			                   "AVG",
			                   "SUM"
			                 ],
			                 "type": "string"
			               },
			               "MetricName": {
			                 "description": "Name of a column in the data.",
			                 "maxLength": 63,
			                 "minLength": 1,
			                 "pattern": "",
			                 "$ref": "#/definitions/ColumnName",
			                 "type": "string"
			               },
			               "Namespace": {
			                 "maxLength": 255,
			                 "minLength": 1,
			                 "pattern": "",
			                 "type": "string"
			               }
			             },
			             "$ref": "#/definitions/Metric",
			             "required": [
			               "MetricName",
			               "AggregationFunction"
			             ],
			             "type": "object"
			           },
			           "minItems": 1,
			           "type": "array"
			         },
			         "MetricSetDescription": {
			           "description": "A description for the MetricSet.",
			           "maxLength": 256,
			           "pattern": "",
			           "type": "string"
			         },
			         "MetricSetFrequency": {
			           "description": "A frequency period to aggregate the data",
			           "enum": [
			             "PT5M",
			             "PT10M",
			             "PT1H",
			             "P1D"
			           ],
			           "type": "string"
			         },
			         "MetricSetName": {
			           "description": "The name of the MetricSet.",
			           "maxLength": 63,
			           "minLength": 1,
			           "pattern": "",
			           "type": "string"
			         },
			         "MetricSource": {
			           "additionalProperties": false,
			           "properties": {
			             "AppFlowConfig": {
			               "additionalProperties": false,
			               "properties": {
			                 "FlowName": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "type": "string"
			                 },
			                 "RoleArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/Arn",
			                   "type": "string"
			                 }
			               },
			               "$ref": "#/definitions/AppFlowConfig",
			               "required": [
			                 "RoleArn",
			                 "FlowName"
			               ],
			               "type": "object"
			             },
			             "CloudwatchConfig": {
			               "additionalProperties": false,
			               "properties": {
			                 "RoleArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/Arn",
			                   "type": "string"
			                 }
			               },
			               "$ref": "#/definitions/CloudwatchConfig",
			               "required": [
			                 "RoleArn"
			               ],
			               "type": "object"
			             },
			             "RDSSourceConfig": {
			               "additionalProperties": false,
			               "properties": {
			                 "DBInstanceIdentifier": {
			                   "maxLength": 63,
			                   "minLength": 1,
			                   "pattern": "",
			                   "type": "string"
			                 },
			                 "DatabaseHost": {
			                   "maxLength": 253,
			                   "minLength": 1,
			                   "pattern": "",
			                   "$ref": "#/definitions/DatabaseHost",
			                   "type": "string"
			                 },
			                 "DatabaseName": {
			                   "maxLength": 64,
			                   "minLength": 1,
			                   "pattern": "",
			                   "type": "string"
			                 },
			                 "DatabasePort": {
			                   "$ref": "#/definitions/DatabasePort",
			                   "type": "integer"
			                 },
			                 "RoleArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/Arn",
			                   "type": "string"
			                 },
			                 "SecretManagerArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/SecretManagerArn",
			                   "type": "string"
			                 },
			                 "TableName": {
			                   "maxLength": 100,
			                   "minLength": 1,
			                   "pattern": "",
			                   "$ref": "#/definitions/TableName",
			                   "type": "string"
			                 },
			                 "VpcConfiguration": {
			                   "additionalProperties": false,
			                   "properties": {
			                     "SecurityGroupIdList": {
			                       "items": {
			                         "maxLength": 255,
			                         "minLength": 1,
			                         "pattern": "",
			                         "type": "string"
			                       },
			                       "$ref": "#/definitions/SecurityGroupIdList",
			                       "type": "array"
			                     },
			                     "SubnetIdList": {
			                       "items": {
			                         "maxLength": 255,
			                         "pattern": "",
			                         "type": "string"
			                       },
			                       "$ref": "#/definitions/SubnetIdList",
			                       "type": "array"
			                     }
			                   },
			                   "$ref": "#/definitions/VpcConfiguration",
			                   "required": [
			                     "SubnetIdList",
			                     "SecurityGroupIdList"
			                   ],
			                   "type": "object"
			                 }
			               },
			               "$ref": "#/definitions/RDSSourceConfig",
			               "required": [
			                 "DBInstanceIdentifier",
			                 "DatabaseHost",
			                 "DatabasePort",
			                 "SecretManagerArn",
			                 "DatabaseName",
			                 "TableName",
			                 "RoleArn",
			                 "VpcConfiguration"
			               ],
			               "type": "object"
			             },
			             "RedshiftSourceConfig": {
			               "additionalProperties": false,
			               "properties": {
			                 "ClusterIdentifier": {
			                   "maxLength": 63,
			                   "minLength": 1,
			                   "pattern": "",
			                   "type": "string"
			                 },
			                 "DatabaseHost": {
			                   "maxLength": 253,
			                   "minLength": 1,
			                   "pattern": "",
			                   "$ref": "#/definitions/DatabaseHost",
			                   "type": "string"
			                 },
			                 "DatabaseName": {
			                   "maxLength": 100,
			                   "minLength": 1,
			                   "pattern": "",
			                   "type": "string"
			                 },
			                 "DatabasePort": {
			                   "$ref": "#/definitions/DatabasePort",
			                   "type": "integer"
			                 },
			                 "RoleArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/Arn",
			                   "type": "string"
			                 },
			                 "SecretManagerArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/SecretManagerArn",
			                   "type": "string"
			                 },
			                 "TableName": {
			                   "maxLength": 100,
			                   "minLength": 1,
			                   "pattern": "",
			                   "$ref": "#/definitions/TableName",
			                   "type": "string"
			                 },
			                 "VpcConfiguration": {
			                   "additionalProperties": false,
			                   "properties": {
			                     "SecurityGroupIdList": {
			                       "items": {
			                         "maxLength": 255,
			                         "minLength": 1,
			                         "pattern": "",
			                         "type": "string"
			                       },
			                       "$ref": "#/definitions/SecurityGroupIdList",
			                       "type": "array"
			                     },
			                     "SubnetIdList": {
			                       "items": {
			                         "maxLength": 255,
			                         "pattern": "",
			                         "type": "string"
			                       },
			                       "$ref": "#/definitions/SubnetIdList",
			                       "type": "array"
			                     }
			                   },
			                   "$ref": "#/definitions/VpcConfiguration",
			                   "required": [
			                     "SubnetIdList",
			                     "SecurityGroupIdList"
			                   ],
			                   "type": "object"
			                 }
			               },
			               "$ref": "#/definitions/RedshiftSourceConfig",
			               "required": [
			                 "ClusterIdentifier",
			                 "DatabaseHost",
			                 "DatabasePort",
			                 "SecretManagerArn",
			                 "DatabaseName",
			                 "TableName",
			                 "RoleArn",
			                 "VpcConfiguration"
			               ],
			               "type": "object"
			             },
			             "S3SourceConfig": {
			               "additionalProperties": false,
			               "properties": {
			                 "FileFormatDescriptor": {
			                   "additionalProperties": false,
			                   "properties": {
			                     "CsvFormatDescriptor": {
			                       "additionalProperties": false,
			                       "properties": {
			                         "Charset": {
			                           "maxLength": 63,
			                           "pattern": "",
			                           "$ref": "#/definitions/Charset",
			                           "type": "string"
			                         },
			                         "ContainsHeader": {
			                           "type": "boolean"
			                         },
			                         "Delimiter": {
			                           "maxLength": 1,
			                           "pattern": "",
			                           "type": "string"
			                         },
			                         "FileCompression": {
			                           "enum": [
			                             "NONE",
			                             "GZIP"
			                           ],
			                           "type": "string"
			                         },
			                         "HeaderList": {
			                           "items": {
			                             "description": "Name of a column in the data.",
			                             "maxLength": 63,
			                             "minLength": 1,
			                             "pattern": "",
			                             "$ref": "#/definitions/ColumnName",
			                             "type": "string"
			                           },
			                           "type": "array"
			                         },
			                         "QuoteSymbol": {
			                           "maxLength": 1,
			                           "pattern": "",
			                           "type": "string"
			                         }
			                       },
			                       "$ref": "#/definitions/CsvFormatDescriptor",
			                       "type": "object"
			                     },
			                     "JsonFormatDescriptor": {
			                       "additionalProperties": false,
			                       "properties": {
			                         "Charset": {
			                           "maxLength": 63,
			                           "pattern": "",
			                           "$ref": "#/definitions/Charset",
			                           "type": "string"
			                         },
			                         "FileCompression": {
			                           "enum": [
			                             "NONE",
			                             "GZIP"
			                           ],
			                           "type": "string"
			                         }
			                       },
			                       "$ref": "#/definitions/JsonFormatDescriptor",
			                       "type": "object"
			                     }
			                   },
			                   "$ref": "#/definitions/FileFormatDescriptor",
			                   "type": "object"
			                 },
			                 "HistoricalDataPathList": {
			                   "items": {
			                     "maxLength": 1024,
			                     "pattern": "",
			                     "type": "string"
			                   },
			                   "maxItems": 1,
			                   "minItems": 1,
			                   "type": "array"
			                 },
			                 "RoleArn": {
			                   "maxLength": 256,
			                   "pattern": "",
			                   "$ref": "#/definitions/Arn",
			                   "type": "string"
			                 },
			                 "TemplatedPathList": {
			                   "items": {
			                     "maxLength": 1024,
			                     "pattern": "",
			                     "type": "string"
			                   },
			                   "maxItems": 1,
			                   "minItems": 1,
			                   "type": "array"
			                 }
			               },
			               "$ref": "#/definitions/S3SourceConfig",
			               "required": [
			                 "RoleArn",
			                 "FileFormatDescriptor"
			               ],
			               "type": "object"
			             }
			           },
			           "$ref": "#/definitions/MetricSource",
			           "type": "object"
			         },
			         "Offset": {
			           "description": "Offset, in seconds, between the frequency interval and the time at which the metrics are available.",
			           "type": "integer"
			         },
			         "TimestampColumn": {
			           "additionalProperties": false,
			           "properties": {
			             "ColumnFormat": {
			               "description": "A timestamp format for the timestamps in the dataset",
			               "maxLength": 63,
			               "pattern": "",
			               "type": "string"
			             },
			             "ColumnName": {
			               "description": "Name of a column in the data.",
			               "maxLength": 63,
			               "minLength": 1,
			               "pattern": "",
			               "$ref": "#/definitions/ColumnName",
			               "type": "string"
			             }
			           },
			           "$ref": "#/definitions/TimestampColumn",
			           "type": "object"
			         },
			         "Timezone": {
			           "maxLength": 60,
			           "pattern": "",
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/MetricSet",
			       "required": [
			         "MetricSetName",
			         "MetricList",
			         "MetricSource"
			       ],
			       "type": "object"
			     },
			     "maxItems": 1,
			     "minItems": 1,
			     "type": "array"
			   }
			*/
			Description: "List of metric sets for anomaly detection",
			Attributes: schema.ListNestedAttributes(
				map[string]schema.Attribute{
					"dimension_list": {
						// Property: DimensionList
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Dimensions for this MetricSet.",
						     "insertionOrder": false,
						     "items": {
						       "description": "Name of a column in the data.",
						       "maxLength": 63,
						       "minLength": 1,
						       "pattern": "",
						       "$ref": "#/definitions/ColumnName",
						       "type": "string"
						     },
						     "minItems": 0,
						     "type": "array"
						   }
						*/
						Description: "Dimensions for this MetricSet.",
						// Multiset.
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"metric_list": {
						// Property: MetricList
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Metrics captured by this MetricSet.",
						     "insertionOrder": false,
						     "items": {
						       "additionalProperties": false,
						       "properties": {
						         "AggregationFunction": {
						           "description": "Operator used to aggregate metric values",
						           "enum": [
						             "AVG",
						             "SUM"
						           ],
						           "type": "string"
						         },
						         "MetricName": {
						           "description": "Name of a column in the data.",
						           "maxLength": 63,
						           "minLength": 1,
						           "pattern": "",
						           "$ref": "#/definitions/ColumnName",
						           "type": "string"
						         },
						         "Namespace": {
						           "maxLength": 255,
						           "minLength": 1,
						           "pattern": "",
						           "type": "string"
						         }
						       },
						       "$ref": "#/definitions/Metric",
						       "required": [
						         "MetricName",
						         "AggregationFunction"
						       ],
						       "type": "object"
						     },
						     "minItems": 1,
						     "type": "array"
						   }
						*/
						Description: "Metrics captured by this MetricSet.",
						// Multiset.
						Attributes: schema.ListNestedAttributes(
							map[string]schema.Attribute{
								"aggregation_function": {
									// Property: AggregationFunction
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "Operator used to aggregate metric values",
									     "enum": [
									       "AVG",
									       "SUM"
									     ],
									     "type": "string"
									   }
									*/
									Description: "Operator used to aggregate metric values",
									Type:        types.StringType,
									Required:    true,
								},
								"metric_name": {
									// Property: MetricName
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "Name of a column in the data.",
									     "maxLength": 63,
									     "minLength": 1,
									     "pattern": "",
									     "$ref": "#/definitions/ColumnName",
									     "type": "string"
									   }
									*/
									Description: "Name of a column in the data.",
									Type:        types.StringType,
									Required:    true,
								},
								"namespace": {
									// Property: Namespace
									// CloudFormation resource type schema:
									/*
									   {
									     "maxLength": 255,
									     "minLength": 1,
									     "pattern": "",
									     "type": "string"
									   }
									*/
									Type:     types.StringType,
									Optional: true,
								},
							},
							schema.ListNestedAttributesOptions{
								MinItems: 1,
							},
						),
						Required: true,
					},
					"metric_set_description": {
						// Property: MetricSetDescription
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A description for the MetricSet.",
						     "maxLength": 256,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "A description for the MetricSet.",
						Type:        types.StringType,
						Optional:    true,
					},
					"metric_set_frequency": {
						// Property: MetricSetFrequency
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "A frequency period to aggregate the data",
						     "enum": [
						       "PT5M",
						       "PT10M",
						       "PT1H",
						       "P1D"
						     ],
						     "type": "string"
						   }
						*/
						Description: "A frequency period to aggregate the data",
						Type:        types.StringType,
						Optional:    true,
					},
					"metric_set_name": {
						// Property: MetricSetName
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The name of the MetricSet.",
						     "maxLength": 63,
						     "minLength": 1,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "The name of the MetricSet.",
						Type:        types.StringType,
						Required:    true,
					},
					"metric_source": {
						// Property: MetricSource
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "AppFlowConfig": {
						         "additionalProperties": false,
						         "properties": {
						           "FlowName": {
						             "maxLength": 256,
						             "pattern": "",
						             "type": "string"
						           },
						           "RoleArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/Arn",
						             "type": "string"
						           }
						         },
						         "$ref": "#/definitions/AppFlowConfig",
						         "required": [
						           "RoleArn",
						           "FlowName"
						         ],
						         "type": "object"
						       },
						       "CloudwatchConfig": {
						         "additionalProperties": false,
						         "properties": {
						           "RoleArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/Arn",
						             "type": "string"
						           }
						         },
						         "$ref": "#/definitions/CloudwatchConfig",
						         "required": [
						           "RoleArn"
						         ],
						         "type": "object"
						       },
						       "RDSSourceConfig": {
						         "additionalProperties": false,
						         "properties": {
						           "DBInstanceIdentifier": {
						             "maxLength": 63,
						             "minLength": 1,
						             "pattern": "",
						             "type": "string"
						           },
						           "DatabaseHost": {
						             "maxLength": 253,
						             "minLength": 1,
						             "pattern": "",
						             "$ref": "#/definitions/DatabaseHost",
						             "type": "string"
						           },
						           "DatabaseName": {
						             "maxLength": 64,
						             "minLength": 1,
						             "pattern": "",
						             "type": "string"
						           },
						           "DatabasePort": {
						             "$ref": "#/definitions/DatabasePort",
						             "type": "integer"
						           },
						           "RoleArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/Arn",
						             "type": "string"
						           },
						           "SecretManagerArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/SecretManagerArn",
						             "type": "string"
						           },
						           "TableName": {
						             "maxLength": 100,
						             "minLength": 1,
						             "pattern": "",
						             "$ref": "#/definitions/TableName",
						             "type": "string"
						           },
						           "VpcConfiguration": {
						             "additionalProperties": false,
						             "properties": {
						               "SecurityGroupIdList": {
						                 "items": {
						                   "maxLength": 255,
						                   "minLength": 1,
						                   "pattern": "",
						                   "type": "string"
						                 },
						                 "$ref": "#/definitions/SecurityGroupIdList",
						                 "type": "array"
						               },
						               "SubnetIdList": {
						                 "items": {
						                   "maxLength": 255,
						                   "pattern": "",
						                   "type": "string"
						                 },
						                 "$ref": "#/definitions/SubnetIdList",
						                 "type": "array"
						               }
						             },
						             "$ref": "#/definitions/VpcConfiguration",
						             "required": [
						               "SubnetIdList",
						               "SecurityGroupIdList"
						             ],
						             "type": "object"
						           }
						         },
						         "$ref": "#/definitions/RDSSourceConfig",
						         "required": [
						           "DBInstanceIdentifier",
						           "DatabaseHost",
						           "DatabasePort",
						           "SecretManagerArn",
						           "DatabaseName",
						           "TableName",
						           "RoleArn",
						           "VpcConfiguration"
						         ],
						         "type": "object"
						       },
						       "RedshiftSourceConfig": {
						         "additionalProperties": false,
						         "properties": {
						           "ClusterIdentifier": {
						             "maxLength": 63,
						             "minLength": 1,
						             "pattern": "",
						             "type": "string"
						           },
						           "DatabaseHost": {
						             "maxLength": 253,
						             "minLength": 1,
						             "pattern": "",
						             "$ref": "#/definitions/DatabaseHost",
						             "type": "string"
						           },
						           "DatabaseName": {
						             "maxLength": 100,
						             "minLength": 1,
						             "pattern": "",
						             "type": "string"
						           },
						           "DatabasePort": {
						             "$ref": "#/definitions/DatabasePort",
						             "type": "integer"
						           },
						           "RoleArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/Arn",
						             "type": "string"
						           },
						           "SecretManagerArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/SecretManagerArn",
						             "type": "string"
						           },
						           "TableName": {
						             "maxLength": 100,
						             "minLength": 1,
						             "pattern": "",
						             "$ref": "#/definitions/TableName",
						             "type": "string"
						           },
						           "VpcConfiguration": {
						             "additionalProperties": false,
						             "properties": {
						               "SecurityGroupIdList": {
						                 "items": {
						                   "maxLength": 255,
						                   "minLength": 1,
						                   "pattern": "",
						                   "type": "string"
						                 },
						                 "$ref": "#/definitions/SecurityGroupIdList",
						                 "type": "array"
						               },
						               "SubnetIdList": {
						                 "items": {
						                   "maxLength": 255,
						                   "pattern": "",
						                   "type": "string"
						                 },
						                 "$ref": "#/definitions/SubnetIdList",
						                 "type": "array"
						               }
						             },
						             "$ref": "#/definitions/VpcConfiguration",
						             "required": [
						               "SubnetIdList",
						               "SecurityGroupIdList"
						             ],
						             "type": "object"
						           }
						         },
						         "$ref": "#/definitions/RedshiftSourceConfig",
						         "required": [
						           "ClusterIdentifier",
						           "DatabaseHost",
						           "DatabasePort",
						           "SecretManagerArn",
						           "DatabaseName",
						           "TableName",
						           "RoleArn",
						           "VpcConfiguration"
						         ],
						         "type": "object"
						       },
						       "S3SourceConfig": {
						         "additionalProperties": false,
						         "properties": {
						           "FileFormatDescriptor": {
						             "additionalProperties": false,
						             "properties": {
						               "CsvFormatDescriptor": {
						                 "additionalProperties": false,
						                 "properties": {
						                   "Charset": {
						                     "maxLength": 63,
						                     "pattern": "",
						                     "$ref": "#/definitions/Charset",
						                     "type": "string"
						                   },
						                   "ContainsHeader": {
						                     "type": "boolean"
						                   },
						                   "Delimiter": {
						                     "maxLength": 1,
						                     "pattern": "",
						                     "type": "string"
						                   },
						                   "FileCompression": {
						                     "enum": [
						                       "NONE",
						                       "GZIP"
						                     ],
						                     "type": "string"
						                   },
						                   "HeaderList": {
						                     "items": {
						                       "description": "Name of a column in the data.",
						                       "maxLength": 63,
						                       "minLength": 1,
						                       "pattern": "",
						                       "$ref": "#/definitions/ColumnName",
						                       "type": "string"
						                     },
						                     "type": "array"
						                   },
						                   "QuoteSymbol": {
						                     "maxLength": 1,
						                     "pattern": "",
						                     "type": "string"
						                   }
						                 },
						                 "$ref": "#/definitions/CsvFormatDescriptor",
						                 "type": "object"
						               },
						               "JsonFormatDescriptor": {
						                 "additionalProperties": false,
						                 "properties": {
						                   "Charset": {
						                     "maxLength": 63,
						                     "pattern": "",
						                     "$ref": "#/definitions/Charset",
						                     "type": "string"
						                   },
						                   "FileCompression": {
						                     "enum": [
						                       "NONE",
						                       "GZIP"
						                     ],
						                     "type": "string"
						                   }
						                 },
						                 "$ref": "#/definitions/JsonFormatDescriptor",
						                 "type": "object"
						               }
						             },
						             "$ref": "#/definitions/FileFormatDescriptor",
						             "type": "object"
						           },
						           "HistoricalDataPathList": {
						             "items": {
						               "maxLength": 1024,
						               "pattern": "",
						               "type": "string"
						             },
						             "maxItems": 1,
						             "minItems": 1,
						             "type": "array"
						           },
						           "RoleArn": {
						             "maxLength": 256,
						             "pattern": "",
						             "$ref": "#/definitions/Arn",
						             "type": "string"
						           },
						           "TemplatedPathList": {
						             "items": {
						               "maxLength": 1024,
						               "pattern": "",
						               "type": "string"
						             },
						             "maxItems": 1,
						             "minItems": 1,
						             "type": "array"
						           }
						         },
						         "$ref": "#/definitions/S3SourceConfig",
						         "required": [
						           "RoleArn",
						           "FileFormatDescriptor"
						         ],
						         "type": "object"
						       }
						     },
						     "$ref": "#/definitions/MetricSource",
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"app_flow_config": {
									// Property: AppFlowConfig
									// CloudFormation resource type schema:
									/*
									   {
									     "additionalProperties": false,
									     "properties": {
									       "FlowName": {
									         "maxLength": 256,
									         "pattern": "",
									         "type": "string"
									       },
									       "RoleArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/Arn",
									         "type": "string"
									       }
									     },
									     "$ref": "#/definitions/AppFlowConfig",
									     "required": [
									       "RoleArn",
									       "FlowName"
									     ],
									     "type": "object"
									   }
									*/
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"flow_name": {
												// Property: FlowName
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"role_arn": {
												// Property: RoleArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/Arn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
										},
									),
									Optional: true,
								},
								"cloudwatch_config": {
									// Property: CloudwatchConfig
									// CloudFormation resource type schema:
									/*
									   {
									     "additionalProperties": false,
									     "properties": {
									       "RoleArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/Arn",
									         "type": "string"
									       }
									     },
									     "$ref": "#/definitions/CloudwatchConfig",
									     "required": [
									       "RoleArn"
									     ],
									     "type": "object"
									   }
									*/
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"role_arn": {
												// Property: RoleArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/Arn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
										},
									),
									Optional: true,
								},
								"rds_source_config": {
									// Property: RDSSourceConfig
									// CloudFormation resource type schema:
									/*
									   {
									     "additionalProperties": false,
									     "properties": {
									       "DBInstanceIdentifier": {
									         "maxLength": 63,
									         "minLength": 1,
									         "pattern": "",
									         "type": "string"
									       },
									       "DatabaseHost": {
									         "maxLength": 253,
									         "minLength": 1,
									         "pattern": "",
									         "$ref": "#/definitions/DatabaseHost",
									         "type": "string"
									       },
									       "DatabaseName": {
									         "maxLength": 64,
									         "minLength": 1,
									         "pattern": "",
									         "type": "string"
									       },
									       "DatabasePort": {
									         "$ref": "#/definitions/DatabasePort",
									         "type": "integer"
									       },
									       "RoleArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/Arn",
									         "type": "string"
									       },
									       "SecretManagerArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/SecretManagerArn",
									         "type": "string"
									       },
									       "TableName": {
									         "maxLength": 100,
									         "minLength": 1,
									         "pattern": "",
									         "$ref": "#/definitions/TableName",
									         "type": "string"
									       },
									       "VpcConfiguration": {
									         "additionalProperties": false,
									         "properties": {
									           "SecurityGroupIdList": {
									             "items": {
									               "maxLength": 255,
									               "minLength": 1,
									               "pattern": "",
									               "type": "string"
									             },
									             "$ref": "#/definitions/SecurityGroupIdList",
									             "type": "array"
									           },
									           "SubnetIdList": {
									             "items": {
									               "maxLength": 255,
									               "pattern": "",
									               "type": "string"
									             },
									             "$ref": "#/definitions/SubnetIdList",
									             "type": "array"
									           }
									         },
									         "$ref": "#/definitions/VpcConfiguration",
									         "required": [
									           "SubnetIdList",
									           "SecurityGroupIdList"
									         ],
									         "type": "object"
									       }
									     },
									     "$ref": "#/definitions/RDSSourceConfig",
									     "required": [
									       "DBInstanceIdentifier",
									       "DatabaseHost",
									       "DatabasePort",
									       "SecretManagerArn",
									       "DatabaseName",
									       "TableName",
									       "RoleArn",
									       "VpcConfiguration"
									     ],
									     "type": "object"
									   }
									*/
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"db_instance_identifier": {
												// Property: DBInstanceIdentifier
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 63,
												     "minLength": 1,
												     "pattern": "",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"database_host": {
												// Property: DatabaseHost
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 253,
												     "minLength": 1,
												     "pattern": "",
												     "$ref": "#/definitions/DatabaseHost",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"database_name": {
												// Property: DatabaseName
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 64,
												     "minLength": 1,
												     "pattern": "",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"database_port": {
												// Property: DatabasePort
												// CloudFormation resource type schema:
												/*
												   {
												     "$ref": "#/definitions/DatabasePort",
												     "type": "integer"
												   }
												*/
												Type:     types.NumberType,
												Required: true,
											},
											"role_arn": {
												// Property: RoleArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/Arn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"secret_manager_arn": {
												// Property: SecretManagerArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/SecretManagerArn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"table_name": {
												// Property: TableName
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 100,
												     "minLength": 1,
												     "pattern": "",
												     "$ref": "#/definitions/TableName",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"vpc_configuration": {
												// Property: VpcConfiguration
												// CloudFormation resource type schema:
												/*
												   {
												     "additionalProperties": false,
												     "properties": {
												       "SecurityGroupIdList": {
												         "items": {
												           "maxLength": 255,
												           "minLength": 1,
												           "pattern": "",
												           "type": "string"
												         },
												         "$ref": "#/definitions/SecurityGroupIdList",
												         "type": "array"
												       },
												       "SubnetIdList": {
												         "items": {
												           "maxLength": 255,
												           "pattern": "",
												           "type": "string"
												         },
												         "$ref": "#/definitions/SubnetIdList",
												         "type": "array"
												       }
												     },
												     "$ref": "#/definitions/VpcConfiguration",
												     "required": [
												       "SubnetIdList",
												       "SecurityGroupIdList"
												     ],
												     "type": "object"
												   }
												*/
												Attributes: schema.SingleNestedAttributes(
													map[string]schema.Attribute{
														"security_group_id_list": {
															// Property: SecurityGroupIdList
															// CloudFormation resource type schema:
															/*
															   {
															     "items": {
															       "maxLength": 255,
															       "minLength": 1,
															       "pattern": "",
															       "type": "string"
															     },
															     "$ref": "#/definitions/SecurityGroupIdList",
															     "type": "array"
															   }
															*/
															Type:     types.ListType{ElemType: types.StringType},
															Required: true,
														},
														"subnet_id_list": {
															// Property: SubnetIdList
															// CloudFormation resource type schema:
															/*
															   {
															     "items": {
															       "maxLength": 255,
															       "pattern": "",
															       "type": "string"
															     },
															     "$ref": "#/definitions/SubnetIdList",
															     "type": "array"
															   }
															*/
															Type:     types.ListType{ElemType: types.StringType},
															Required: true,
														},
													},
												),
												Required: true,
											},
										},
									),
									Optional: true,
								},
								"redshift_source_config": {
									// Property: RedshiftSourceConfig
									// CloudFormation resource type schema:
									/*
									   {
									     "additionalProperties": false,
									     "properties": {
									       "ClusterIdentifier": {
									         "maxLength": 63,
									         "minLength": 1,
									         "pattern": "",
									         "type": "string"
									       },
									       "DatabaseHost": {
									         "maxLength": 253,
									         "minLength": 1,
									         "pattern": "",
									         "$ref": "#/definitions/DatabaseHost",
									         "type": "string"
									       },
									       "DatabaseName": {
									         "maxLength": 100,
									         "minLength": 1,
									         "pattern": "",
									         "type": "string"
									       },
									       "DatabasePort": {
									         "$ref": "#/definitions/DatabasePort",
									         "type": "integer"
									       },
									       "RoleArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/Arn",
									         "type": "string"
									       },
									       "SecretManagerArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/SecretManagerArn",
									         "type": "string"
									       },
									       "TableName": {
									         "maxLength": 100,
									         "minLength": 1,
									         "pattern": "",
									         "$ref": "#/definitions/TableName",
									         "type": "string"
									       },
									       "VpcConfiguration": {
									         "additionalProperties": false,
									         "properties": {
									           "SecurityGroupIdList": {
									             "items": {
									               "maxLength": 255,
									               "minLength": 1,
									               "pattern": "",
									               "type": "string"
									             },
									             "$ref": "#/definitions/SecurityGroupIdList",
									             "type": "array"
									           },
									           "SubnetIdList": {
									             "items": {
									               "maxLength": 255,
									               "pattern": "",
									               "type": "string"
									             },
									             "$ref": "#/definitions/SubnetIdList",
									             "type": "array"
									           }
									         },
									         "$ref": "#/definitions/VpcConfiguration",
									         "required": [
									           "SubnetIdList",
									           "SecurityGroupIdList"
									         ],
									         "type": "object"
									       }
									     },
									     "$ref": "#/definitions/RedshiftSourceConfig",
									     "required": [
									       "ClusterIdentifier",
									       "DatabaseHost",
									       "DatabasePort",
									       "SecretManagerArn",
									       "DatabaseName",
									       "TableName",
									       "RoleArn",
									       "VpcConfiguration"
									     ],
									     "type": "object"
									   }
									*/
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"cluster_identifier": {
												// Property: ClusterIdentifier
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 63,
												     "minLength": 1,
												     "pattern": "",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"database_host": {
												// Property: DatabaseHost
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 253,
												     "minLength": 1,
												     "pattern": "",
												     "$ref": "#/definitions/DatabaseHost",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"database_name": {
												// Property: DatabaseName
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 100,
												     "minLength": 1,
												     "pattern": "",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"database_port": {
												// Property: DatabasePort
												// CloudFormation resource type schema:
												/*
												   {
												     "$ref": "#/definitions/DatabasePort",
												     "type": "integer"
												   }
												*/
												Type:     types.NumberType,
												Required: true,
											},
											"role_arn": {
												// Property: RoleArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/Arn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"secret_manager_arn": {
												// Property: SecretManagerArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/SecretManagerArn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"table_name": {
												// Property: TableName
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 100,
												     "minLength": 1,
												     "pattern": "",
												     "$ref": "#/definitions/TableName",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"vpc_configuration": {
												// Property: VpcConfiguration
												// CloudFormation resource type schema:
												/*
												   {
												     "additionalProperties": false,
												     "properties": {
												       "SecurityGroupIdList": {
												         "items": {
												           "maxLength": 255,
												           "minLength": 1,
												           "pattern": "",
												           "type": "string"
												         },
												         "$ref": "#/definitions/SecurityGroupIdList",
												         "type": "array"
												       },
												       "SubnetIdList": {
												         "items": {
												           "maxLength": 255,
												           "pattern": "",
												           "type": "string"
												         },
												         "$ref": "#/definitions/SubnetIdList",
												         "type": "array"
												       }
												     },
												     "$ref": "#/definitions/VpcConfiguration",
												     "required": [
												       "SubnetIdList",
												       "SecurityGroupIdList"
												     ],
												     "type": "object"
												   }
												*/
												Attributes: schema.SingleNestedAttributes(
													map[string]schema.Attribute{
														"security_group_id_list": {
															// Property: SecurityGroupIdList
															// CloudFormation resource type schema:
															/*
															   {
															     "items": {
															       "maxLength": 255,
															       "minLength": 1,
															       "pattern": "",
															       "type": "string"
															     },
															     "$ref": "#/definitions/SecurityGroupIdList",
															     "type": "array"
															   }
															*/
															Type:     types.ListType{ElemType: types.StringType},
															Required: true,
														},
														"subnet_id_list": {
															// Property: SubnetIdList
															// CloudFormation resource type schema:
															/*
															   {
															     "items": {
															       "maxLength": 255,
															       "pattern": "",
															       "type": "string"
															     },
															     "$ref": "#/definitions/SubnetIdList",
															     "type": "array"
															   }
															*/
															Type:     types.ListType{ElemType: types.StringType},
															Required: true,
														},
													},
												),
												Required: true,
											},
										},
									),
									Optional: true,
								},
								"s3_source_config": {
									// Property: S3SourceConfig
									// CloudFormation resource type schema:
									/*
									   {
									     "additionalProperties": false,
									     "properties": {
									       "FileFormatDescriptor": {
									         "additionalProperties": false,
									         "properties": {
									           "CsvFormatDescriptor": {
									             "additionalProperties": false,
									             "properties": {
									               "Charset": {
									                 "maxLength": 63,
									                 "pattern": "",
									                 "$ref": "#/definitions/Charset",
									                 "type": "string"
									               },
									               "ContainsHeader": {
									                 "type": "boolean"
									               },
									               "Delimiter": {
									                 "maxLength": 1,
									                 "pattern": "",
									                 "type": "string"
									               },
									               "FileCompression": {
									                 "enum": [
									                   "NONE",
									                   "GZIP"
									                 ],
									                 "type": "string"
									               },
									               "HeaderList": {
									                 "items": {
									                   "description": "Name of a column in the data.",
									                   "maxLength": 63,
									                   "minLength": 1,
									                   "pattern": "",
									                   "$ref": "#/definitions/ColumnName",
									                   "type": "string"
									                 },
									                 "type": "array"
									               },
									               "QuoteSymbol": {
									                 "maxLength": 1,
									                 "pattern": "",
									                 "type": "string"
									               }
									             },
									             "$ref": "#/definitions/CsvFormatDescriptor",
									             "type": "object"
									           },
									           "JsonFormatDescriptor": {
									             "additionalProperties": false,
									             "properties": {
									               "Charset": {
									                 "maxLength": 63,
									                 "pattern": "",
									                 "$ref": "#/definitions/Charset",
									                 "type": "string"
									               },
									               "FileCompression": {
									                 "enum": [
									                   "NONE",
									                   "GZIP"
									                 ],
									                 "type": "string"
									               }
									             },
									             "$ref": "#/definitions/JsonFormatDescriptor",
									             "type": "object"
									           }
									         },
									         "$ref": "#/definitions/FileFormatDescriptor",
									         "type": "object"
									       },
									       "HistoricalDataPathList": {
									         "items": {
									           "maxLength": 1024,
									           "pattern": "",
									           "type": "string"
									         },
									         "maxItems": 1,
									         "minItems": 1,
									         "type": "array"
									       },
									       "RoleArn": {
									         "maxLength": 256,
									         "pattern": "",
									         "$ref": "#/definitions/Arn",
									         "type": "string"
									       },
									       "TemplatedPathList": {
									         "items": {
									           "maxLength": 1024,
									           "pattern": "",
									           "type": "string"
									         },
									         "maxItems": 1,
									         "minItems": 1,
									         "type": "array"
									       }
									     },
									     "$ref": "#/definitions/S3SourceConfig",
									     "required": [
									       "RoleArn",
									       "FileFormatDescriptor"
									     ],
									     "type": "object"
									   }
									*/
									Attributes: schema.SingleNestedAttributes(
										map[string]schema.Attribute{
											"file_format_descriptor": {
												// Property: FileFormatDescriptor
												// CloudFormation resource type schema:
												/*
												   {
												     "additionalProperties": false,
												     "properties": {
												       "CsvFormatDescriptor": {
												         "additionalProperties": false,
												         "properties": {
												           "Charset": {
												             "maxLength": 63,
												             "pattern": "",
												             "$ref": "#/definitions/Charset",
												             "type": "string"
												           },
												           "ContainsHeader": {
												             "type": "boolean"
												           },
												           "Delimiter": {
												             "maxLength": 1,
												             "pattern": "",
												             "type": "string"
												           },
												           "FileCompression": {
												             "enum": [
												               "NONE",
												               "GZIP"
												             ],
												             "type": "string"
												           },
												           "HeaderList": {
												             "items": {
												               "description": "Name of a column in the data.",
												               "maxLength": 63,
												               "minLength": 1,
												               "pattern": "",
												               "$ref": "#/definitions/ColumnName",
												               "type": "string"
												             },
												             "type": "array"
												           },
												           "QuoteSymbol": {
												             "maxLength": 1,
												             "pattern": "",
												             "type": "string"
												           }
												         },
												         "$ref": "#/definitions/CsvFormatDescriptor",
												         "type": "object"
												       },
												       "JsonFormatDescriptor": {
												         "additionalProperties": false,
												         "properties": {
												           "Charset": {
												             "maxLength": 63,
												             "pattern": "",
												             "$ref": "#/definitions/Charset",
												             "type": "string"
												           },
												           "FileCompression": {
												             "enum": [
												               "NONE",
												               "GZIP"
												             ],
												             "type": "string"
												           }
												         },
												         "$ref": "#/definitions/JsonFormatDescriptor",
												         "type": "object"
												       }
												     },
												     "$ref": "#/definitions/FileFormatDescriptor",
												     "type": "object"
												   }
												*/
												Attributes: schema.SingleNestedAttributes(
													map[string]schema.Attribute{
														"csv_format_descriptor": {
															// Property: CsvFormatDescriptor
															// CloudFormation resource type schema:
															/*
															   {
															     "additionalProperties": false,
															     "properties": {
															       "Charset": {
															         "maxLength": 63,
															         "pattern": "",
															         "$ref": "#/definitions/Charset",
															         "type": "string"
															       },
															       "ContainsHeader": {
															         "type": "boolean"
															       },
															       "Delimiter": {
															         "maxLength": 1,
															         "pattern": "",
															         "type": "string"
															       },
															       "FileCompression": {
															         "enum": [
															           "NONE",
															           "GZIP"
															         ],
															         "type": "string"
															       },
															       "HeaderList": {
															         "items": {
															           "description": "Name of a column in the data.",
															           "maxLength": 63,
															           "minLength": 1,
															           "pattern": "",
															           "$ref": "#/definitions/ColumnName",
															           "type": "string"
															         },
															         "type": "array"
															       },
															       "QuoteSymbol": {
															         "maxLength": 1,
															         "pattern": "",
															         "type": "string"
															       }
															     },
															     "$ref": "#/definitions/CsvFormatDescriptor",
															     "type": "object"
															   }
															*/
															Attributes: schema.SingleNestedAttributes(
																map[string]schema.Attribute{
																	"charset": {
																		// Property: Charset
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "maxLength": 63,
																		     "pattern": "",
																		     "$ref": "#/definitions/Charset",
																		     "type": "string"
																		   }
																		*/
																		Type:     types.StringType,
																		Optional: true,
																	},
																	"contains_header": {
																		// Property: ContainsHeader
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "type": "boolean"
																		   }
																		*/
																		Type:     types.BoolType,
																		Optional: true,
																	},
																	"delimiter": {
																		// Property: Delimiter
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "maxLength": 1,
																		     "pattern": "",
																		     "type": "string"
																		   }
																		*/
																		Type:     types.StringType,
																		Optional: true,
																	},
																	"file_compression": {
																		// Property: FileCompression
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "enum": [
																		       "NONE",
																		       "GZIP"
																		     ],
																		     "type": "string"
																		   }
																		*/
																		Type:     types.StringType,
																		Optional: true,
																	},
																	"header_list": {
																		// Property: HeaderList
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "items": {
																		       "description": "Name of a column in the data.",
																		       "maxLength": 63,
																		       "minLength": 1,
																		       "pattern": "",
																		       "$ref": "#/definitions/ColumnName",
																		       "type": "string"
																		     },
																		     "type": "array"
																		   }
																		*/
																		Type:     types.ListType{ElemType: types.StringType},
																		Optional: true,
																	},
																	"quote_symbol": {
																		// Property: QuoteSymbol
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "maxLength": 1,
																		     "pattern": "",
																		     "type": "string"
																		   }
																		*/
																		Type:     types.StringType,
																		Optional: true,
																	},
																},
															),
															Optional: true,
														},
														"json_format_descriptor": {
															// Property: JsonFormatDescriptor
															// CloudFormation resource type schema:
															/*
															   {
															     "additionalProperties": false,
															     "properties": {
															       "Charset": {
															         "maxLength": 63,
															         "pattern": "",
															         "$ref": "#/definitions/Charset",
															         "type": "string"
															       },
															       "FileCompression": {
															         "enum": [
															           "NONE",
															           "GZIP"
															         ],
															         "type": "string"
															       }
															     },
															     "$ref": "#/definitions/JsonFormatDescriptor",
															     "type": "object"
															   }
															*/
															Attributes: schema.SingleNestedAttributes(
																map[string]schema.Attribute{
																	"charset": {
																		// Property: Charset
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "maxLength": 63,
																		     "pattern": "",
																		     "$ref": "#/definitions/Charset",
																		     "type": "string"
																		   }
																		*/
																		Type:     types.StringType,
																		Optional: true,
																	},
																	"file_compression": {
																		// Property: FileCompression
																		// CloudFormation resource type schema:
																		/*
																		   {
																		     "enum": [
																		       "NONE",
																		       "GZIP"
																		     ],
																		     "type": "string"
																		   }
																		*/
																		Type:     types.StringType,
																		Optional: true,
																	},
																},
															),
															Optional: true,
														},
													},
												),
												Required: true,
											},
											"historical_data_path_list": {
												// Property: HistoricalDataPathList
												// CloudFormation resource type schema:
												/*
												   {
												     "items": {
												       "maxLength": 1024,
												       "pattern": "",
												       "type": "string"
												     },
												     "maxItems": 1,
												     "minItems": 1,
												     "type": "array"
												   }
												*/
												Type:     types.ListType{ElemType: types.StringType},
												Optional: true,
											},
											"role_arn": {
												// Property: RoleArn
												// CloudFormation resource type schema:
												/*
												   {
												     "maxLength": 256,
												     "pattern": "",
												     "$ref": "#/definitions/Arn",
												     "type": "string"
												   }
												*/
												Type:     types.StringType,
												Required: true,
											},
											"templated_path_list": {
												// Property: TemplatedPathList
												// CloudFormation resource type schema:
												/*
												   {
												     "items": {
												       "maxLength": 1024,
												       "pattern": "",
												       "type": "string"
												     },
												     "maxItems": 1,
												     "minItems": 1,
												     "type": "array"
												   }
												*/
												Type:     types.ListType{ElemType: types.StringType},
												Optional: true,
											},
										},
									),
									Optional: true,
								},
							},
						),
						Required: true,
					},
					"offset": {
						// Property: Offset
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "Offset, in seconds, between the frequency interval and the time at which the metrics are available.",
						     "type": "integer"
						   }
						*/
						Description: "Offset, in seconds, between the frequency interval and the time at which the metrics are available.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"timestamp_column": {
						// Property: TimestampColumn
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "properties": {
						       "ColumnFormat": {
						         "description": "A timestamp format for the timestamps in the dataset",
						         "maxLength": 63,
						         "pattern": "",
						         "type": "string"
						       },
						       "ColumnName": {
						         "description": "Name of a column in the data.",
						         "maxLength": 63,
						         "minLength": 1,
						         "pattern": "",
						         "$ref": "#/definitions/ColumnName",
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/TimestampColumn",
						     "type": "object"
						   }
						*/
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"column_format": {
									// Property: ColumnFormat
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "A timestamp format for the timestamps in the dataset",
									     "maxLength": 63,
									     "pattern": "",
									     "type": "string"
									   }
									*/
									Description: "A timestamp format for the timestamps in the dataset",
									Type:        types.StringType,
									Optional:    true,
								},
								"column_name": {
									// Property: ColumnName
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "Name of a column in the data.",
									     "maxLength": 63,
									     "minLength": 1,
									     "pattern": "",
									     "$ref": "#/definitions/ColumnName",
									     "type": "string"
									   }
									*/
									Description: "Name of a column in the data.",
									Type:        types.StringType,
									Optional:    true,
								},
							},
						),
						Optional: true,
					},
					"timezone": {
						// Property: Timezone
						// CloudFormation resource type schema:
						/*
						   {
						     "maxLength": 60,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Type:     types.StringType,
						Optional: true,
					},
				},
				schema.ListNestedAttributesOptions{
					MinItems: 1,
					MaxItems: 1,
				},
			),
			Required: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "An Amazon Lookout for Metrics Detector",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::LookoutMetrics::AnomalyDetector").WithTerraformTypeName("aws_lookoutmetrics_anomaly_detector").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(15).WithDeleteTimeoutInMinutes(15)

	opts = opts.WithUpdateTimeoutInMinutes(15)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_lookoutmetrics_anomaly_detector", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
