// Code generated by generators/resource/main.go; DO NOT EDIT.

package connect

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/generic"
	"github.com/hashicorp/terraform-provider-aws-cloudapi/internal/registry"
	providertypes "github.com/hashicorp/terraform-provider-aws-cloudapi/internal/types"
)

func init() {
	registry.AddResourceTypeFactory("aws_connect_quick_connect", quickConnectResourceType)
}

// quickConnectResourceType returns the Terraform aws_connect_quick_connect resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Connect::QuickConnect resource type.
func quickConnectResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]schema.Attribute{
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The description of the quick connect.",
			     "maxLength": 250,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "The description of the quick connect.",
			Type:        types.StringType,
			Optional:    true,
		},
		"instance_arn": {
			// Property: InstanceArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The identifier of the Amazon Connect instance.",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The identifier of the Amazon Connect instance.",
			Type:        types.StringType,
			Required:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The name of the quick connect.",
			     "maxLength": 127,
			     "minLength": 1,
			     "type": "string"
			   }
			*/
			Description: "The name of the quick connect.",
			Type:        types.StringType,
			Required:    true,
		},
		"quick_connect_arn": {
			// Property: QuickConnectArn
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "The Amazon Resource Name (ARN) for the quick connect.",
			     "pattern": "",
			     "type": "string"
			   }
			*/
			Description: "The Amazon Resource Name (ARN) for the quick connect.",
			Type:        types.StringType,
			Computed:    true,
		},
		"quick_connect_config": {
			// Property: QuickConnectConfig
			// CloudFormation resource type schema:
			/*
			   {
			     "additionalProperties": false,
			     "description": "Configuration settings for the quick connect.",
			     "properties": {
			       "PhoneConfig": {
			         "additionalProperties": false,
			         "description": "The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.",
			         "properties": {
			           "PhoneNumber": {
			             "description": "The phone number in E.164 format.",
			             "pattern": "",
			             "$ref": "#/definitions/PhoneNumber",
			             "type": "string"
			           }
			         },
			         "$ref": "#/definitions/PhoneNumberQuickConnectConfig",
			         "required": [
			           "PhoneNumber"
			         ],
			         "type": "object"
			       },
			       "QueueConfig": {
			         "additionalProperties": false,
			         "description": "The queue configuration. This is required only if QuickConnectType is QUEUE.",
			         "properties": {
			           "ContactFlowArn": {
			             "description": "The identifier of the contact flow.",
			             "pattern": "",
			             "$ref": "#/definitions/ContactFlowArn",
			             "type": "string"
			           },
			           "QueueArn": {
			             "description": "The identifier for the queue.",
			             "pattern": "",
			             "$ref": "#/definitions/QueueArn",
			             "type": "string"
			           }
			         },
			         "$ref": "#/definitions/QueueQuickConnectConfig",
			         "required": [
			           "ContactFlowArn",
			           "QueueArn"
			         ],
			         "type": "object"
			       },
			       "QuickConnectType": {
			         "description": "The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).",
			         "enum": [
			           "PHONE_NUMBER",
			           "QUEUE",
			           "USER"
			         ],
			         "$ref": "#/definitions/QuickConnectType",
			         "type": "string"
			       },
			       "UserConfig": {
			         "additionalProperties": false,
			         "description": "The user configuration. This is required only if QuickConnectType is USER.",
			         "properties": {
			           "ContactFlowArn": {
			             "description": "The identifier of the contact flow.",
			             "pattern": "",
			             "$ref": "#/definitions/ContactFlowArn",
			             "type": "string"
			           },
			           "UserArn": {
			             "description": "The identifier of the user.",
			             "pattern": "",
			             "$ref": "#/definitions/UserArn",
			             "type": "string"
			           }
			         },
			         "$ref": "#/definitions/UserQuickConnectConfig",
			         "required": [
			           "ContactFlowArn",
			           "UserArn"
			         ],
			         "type": "object"
			       }
			     },
			     "$ref": "#/definitions/QuickConnectConfig",
			     "required": [
			       "QuickConnectType"
			     ],
			     "type": "object"
			   }
			*/
			Description: "Configuration settings for the quick connect.",
			Attributes: schema.SingleNestedAttributes(
				map[string]schema.Attribute{
					"phone_config": {
						// Property: PhoneConfig
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "description": "The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.",
						     "properties": {
						       "PhoneNumber": {
						         "description": "The phone number in E.164 format.",
						         "pattern": "",
						         "$ref": "#/definitions/PhoneNumber",
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/PhoneNumberQuickConnectConfig",
						     "required": [
						       "PhoneNumber"
						     ],
						     "type": "object"
						   }
						*/
						Description: "The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"phone_number": {
									// Property: PhoneNumber
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The phone number in E.164 format.",
									     "pattern": "",
									     "$ref": "#/definitions/PhoneNumber",
									     "type": "string"
									   }
									*/
									Description: "The phone number in E.164 format.",
									Type:        types.StringType,
									Required:    true,
								},
							},
						),
						Optional: true,
					},
					"queue_config": {
						// Property: QueueConfig
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "description": "The queue configuration. This is required only if QuickConnectType is QUEUE.",
						     "properties": {
						       "ContactFlowArn": {
						         "description": "The identifier of the contact flow.",
						         "pattern": "",
						         "$ref": "#/definitions/ContactFlowArn",
						         "type": "string"
						       },
						       "QueueArn": {
						         "description": "The identifier for the queue.",
						         "pattern": "",
						         "$ref": "#/definitions/QueueArn",
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/QueueQuickConnectConfig",
						     "required": [
						       "ContactFlowArn",
						       "QueueArn"
						     ],
						     "type": "object"
						   }
						*/
						Description: "The queue configuration. This is required only if QuickConnectType is QUEUE.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"contact_flow_arn": {
									// Property: ContactFlowArn
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The identifier of the contact flow.",
									     "pattern": "",
									     "$ref": "#/definitions/ContactFlowArn",
									     "type": "string"
									   }
									*/
									Description: "The identifier of the contact flow.",
									Type:        types.StringType,
									Required:    true,
								},
								"queue_arn": {
									// Property: QueueArn
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The identifier for the queue.",
									     "pattern": "",
									     "$ref": "#/definitions/QueueArn",
									     "type": "string"
									   }
									*/
									Description: "The identifier for the queue.",
									Type:        types.StringType,
									Required:    true,
								},
							},
						),
						Optional: true,
					},
					"quick_connect_type": {
						// Property: QuickConnectType
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).",
						     "enum": [
						       "PHONE_NUMBER",
						       "QUEUE",
						       "USER"
						     ],
						     "$ref": "#/definitions/QuickConnectType",
						     "type": "string"
						   }
						*/
						Description: "The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).",
						Type:        types.StringType,
						Required:    true,
					},
					"user_config": {
						// Property: UserConfig
						// CloudFormation resource type schema:
						/*
						   {
						     "additionalProperties": false,
						     "description": "The user configuration. This is required only if QuickConnectType is USER.",
						     "properties": {
						       "ContactFlowArn": {
						         "description": "The identifier of the contact flow.",
						         "pattern": "",
						         "$ref": "#/definitions/ContactFlowArn",
						         "type": "string"
						       },
						       "UserArn": {
						         "description": "The identifier of the user.",
						         "pattern": "",
						         "$ref": "#/definitions/UserArn",
						         "type": "string"
						       }
						     },
						     "$ref": "#/definitions/UserQuickConnectConfig",
						     "required": [
						       "ContactFlowArn",
						       "UserArn"
						     ],
						     "type": "object"
						   }
						*/
						Description: "The user configuration. This is required only if QuickConnectType is USER.",
						Attributes: schema.SingleNestedAttributes(
							map[string]schema.Attribute{
								"contact_flow_arn": {
									// Property: ContactFlowArn
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The identifier of the contact flow.",
									     "pattern": "",
									     "$ref": "#/definitions/ContactFlowArn",
									     "type": "string"
									   }
									*/
									Description: "The identifier of the contact flow.",
									Type:        types.StringType,
									Required:    true,
								},
								"user_arn": {
									// Property: UserArn
									// CloudFormation resource type schema:
									/*
									   {
									     "description": "The identifier of the user.",
									     "pattern": "",
									     "$ref": "#/definitions/UserArn",
									     "type": "string"
									   }
									*/
									Description: "The identifier of the user.",
									Type:        types.StringType,
									Required:    true,
								},
							},
						),
						Optional: true,
					},
				},
			),
			Required: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			/*
			   {
			     "description": "One or more tags.",
			     "insertionOrder": false,
			     "items": {
			       "additionalProperties": false,
			       "description": "A key-value pair to associate with a resource.",
			       "properties": {
			         "Key": {
			           "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			           "maxLength": 128,
			           "minLength": 1,
			           "pattern": "",
			           "type": "string"
			         },
			         "Value": {
			           "description": "The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			           "maxLength": 256,
			           "type": "string"
			         }
			       },
			       "$ref": "#/definitions/Tag",
			       "required": [
			         "Key",
			         "Value"
			       ],
			       "type": "object"
			     },
			     "maxItems": 200,
			     "type": "array",
			     "uniqueItems": true
			   }
			*/
			Description: "One or more tags.",
			Attributes: providertypes.SetNestedAttributes(
				map[string]schema.Attribute{
					"key": {
						// Property: Key
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						     "maxLength": 128,
						     "minLength": 1,
						     "pattern": "",
						     "type": "string"
						   }
						*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Required:    true,
					},
					"value": {
						// Property: Value
						// CloudFormation resource type schema:
						/*
						   {
						     "description": "The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						     "maxLength": 256,
						     "type": "string"
						   }
						*/
						Description: "The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Required:    true,
					},
				},
				providertypes.SetNestedAttributesOptions{
					MaxItems: 200,
				},
			),
			Optional: true,
		},
	}

	// Required for acceptance testing.
	attributes["id"] = schema.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::Connect::QuickConnect",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Connect::QuickConnect").WithTerraformTypeName("aws_connect_quick_connect").WithTerraformSchema(schema)

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "aws_connect_quick_connect", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
