// Code generated by generators/resource/main.go; DO NOT EDIT.

package ce

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_ce_anomaly_subscription", anomalySubscriptionResourceType)
}

// anomalySubscriptionResourceType returns the Terraform awscc_ce_anomaly_subscription resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::CE::AnomalySubscription resource type.
func anomalySubscriptionResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"account_id": {
			// Property: AccountId
			// CloudFormation resource type schema:
			// {
			//   "description": "The accountId",
			//   "maxLength": 1024,
			//   "minLength": 0,
			//   "type": "string"
			// }
			Description: "The accountId",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"frequency": {
			// Property: Frequency
			// CloudFormation resource type schema:
			// {
			//   "description": "The frequency at which anomaly reports are sent over email. ",
			//   "enum": [
			//     "DAILY",
			//     "IMMEDIATE",
			//     "WEEKLY"
			//   ],
			//   "type": "string"
			// }
			Description: "The frequency at which anomaly reports are sent over email. ",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"DAILY",
					"IMMEDIATE",
					"WEEKLY",
				}),
			},
		},
		"monitor_arn_list": {
			// Property: MonitorArnList
			// CloudFormation resource type schema:
			// {
			//   "description": "A list of cost anomaly monitors.",
			//   "insertionOrder": false,
			//   "items": {
			//     "description": "Subscription ARN",
			//     "pattern": "",
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Description: "A list of cost anomaly monitors.",
			Type:        types.ListType{ElemType: types.StringType},
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
			},
		},
		"subscribers": {
			// Property: Subscribers
			// CloudFormation resource type schema:
			// {
			//   "description": "A list of subscriber",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Address": {
			//         "pattern": "",
			//         "type": "string"
			//       },
			//       "Status": {
			//         "enum": [
			//           "CONFIRMED",
			//           "DECLINED"
			//         ],
			//         "type": "string"
			//       },
			//       "Type": {
			//         "enum": [
			//           "EMAIL",
			//           "SNS"
			//         ],
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Address",
			//       "Type"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Description: "A list of subscriber",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"address": {
						// Property: Address
						Type:     types.StringType,
						Required: true,
					},
					"status": {
						// Property: Status
						Type:     types.StringType,
						Optional: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"CONFIRMED",
								"DECLINED",
							}),
						},
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"EMAIL",
								"SNS",
							}),
						},
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				Multiset(),
			},
		},
		"subscription_arn": {
			// Property: SubscriptionArn
			// CloudFormation resource type schema:
			// {
			//   "description": "Subscription ARN",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "Subscription ARN",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.UseStateForUnknown(),
			},
		},
		"subscription_name": {
			// Property: SubscriptionName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the subscription.",
			//   "maxLength": 1024,
			//   "minLength": 0,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The name of the subscription.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 1024),
			},
		},
		"threshold": {
			// Property: Threshold
			// CloudFormation resource type schema:
			// {
			//   "description": "The dollar value that triggers a notification if the threshold is exceeded. ",
			//   "minimum": 0,
			//   "type": "number"
			// }
			Description: "The dollar value that triggers a notification if the threshold is exceeded. ",
			Type:        types.NumberType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.FloatAtLeast(0.000000),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			tfsdk.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "AWS Cost Anomaly Detection leverages advanced Machine Learning technologies to identify anomalous spend and root causes, so you can quickly take action. Create subscription to be notified",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::CE::AnomalySubscription").WithTerraformTypeName("awscc_ce_anomaly_subscription")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":        "AccountId",
		"address":           "Address",
		"frequency":         "Frequency",
		"monitor_arn_list":  "MonitorArnList",
		"status":            "Status",
		"subscribers":       "Subscribers",
		"subscription_arn":  "SubscriptionArn",
		"subscription_name": "SubscriptionName",
		"threshold":         "Threshold",
		"type":              "Type",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
