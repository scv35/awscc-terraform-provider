// Code generated by generators/resource/main.go; DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceFactory("awscc_dynamodb_table", tableResource)
}

// tableResource returns the Terraform awscc_dynamodb_table resource.
// This Terraform resource corresponds to the CloudFormation AWS::DynamoDB::Table resource.
func tableResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"attribute_definitions": {
			// Property: AttributeDefinitions
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "AttributeName": {
			//	        "type": "string"
			//	      },
			//	      "AttributeType": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "AttributeName",
			//	      "AttributeType"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": true
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"attribute_name": {
						// Property: AttributeName
						Type:     types.StringType,
						Required: true,
					},
					"attribute_type": {
						// Property: AttributeType
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			Validators: []tfsdk.AttributeValidator{
				validate.UniqueItems(),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"billing_mode": {
			// Property: BillingMode
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"contributor_insights_specification": {
			// Property: ContributorInsightsSpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "Enabled": {
			//	      "type": "boolean"
			//	    }
			//	  },
			//	  "required": [
			//	    "Enabled"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"enabled": {
						// Property: Enabled
						Type:     types.BoolType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"global_secondary_indexes": {
			// Property: GlobalSecondaryIndexes
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "ContributorInsightsSpecification": {
			//	        "additionalProperties": false,
			//	        "properties": {
			//	          "Enabled": {
			//	            "type": "boolean"
			//	          }
			//	        },
			//	        "required": [
			//	          "Enabled"
			//	        ],
			//	        "type": "object"
			//	      },
			//	      "IndexName": {
			//	        "type": "string"
			//	      },
			//	      "KeySchema": {
			//	        "items": {
			//	          "additionalProperties": false,
			//	          "properties": {
			//	            "AttributeName": {
			//	              "type": "string"
			//	            },
			//	            "KeyType": {
			//	              "type": "string"
			//	            }
			//	          },
			//	          "required": [
			//	            "KeyType",
			//	            "AttributeName"
			//	          ],
			//	          "type": "object"
			//	        },
			//	        "type": "array",
			//	        "uniqueItems": true
			//	      },
			//	      "Projection": {
			//	        "additionalProperties": false,
			//	        "properties": {
			//	          "NonKeyAttributes": {
			//	            "items": {
			//	              "type": "string"
			//	            },
			//	            "type": "array",
			//	            "uniqueItems": false
			//	          },
			//	          "ProjectionType": {
			//	            "type": "string"
			//	          }
			//	        },
			//	        "type": "object"
			//	      },
			//	      "ProvisionedThroughput": {
			//	        "additionalProperties": false,
			//	        "properties": {
			//	          "ReadCapacityUnits": {
			//	            "type": "integer"
			//	          },
			//	          "WriteCapacityUnits": {
			//	            "type": "integer"
			//	          }
			//	        },
			//	        "required": [
			//	          "WriteCapacityUnits",
			//	          "ReadCapacityUnits"
			//	        ],
			//	        "type": "object"
			//	      }
			//	    },
			//	    "required": [
			//	      "IndexName",
			//	      "Projection",
			//	      "KeySchema"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"contributor_insights_specification": {
						// Property: ContributorInsightsSpecification
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"enabled": {
									// Property: Enabled
									Type:     types.BoolType,
									Required: true,
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"index_name": {
						// Property: IndexName
						Type:     types.StringType,
						Required: true,
					},
					"key_schema": {
						// Property: KeySchema
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"attribute_name": {
									// Property: AttributeName
									Type:     types.StringType,
									Required: true,
								},
								"key_type": {
									// Property: KeyType
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.UniqueItems(),
						},
					},
					"projection": {
						// Property: Projection
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"non_key_attributes": {
									// Property: NonKeyAttributes
									Type:     types.ListType{ElemType: types.StringType},
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"projection_type": {
									// Property: ProjectionType
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Required: true,
					},
					"provisioned_throughput": {
						// Property: ProvisionedThroughput
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"read_capacity_units": {
									// Property: ReadCapacityUnits
									Type:     types.Int64Type,
									Required: true,
								},
								"write_capacity_units": {
									// Property: WriteCapacityUnits
									Type:     types.Int64Type,
									Required: true,
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"import_source_specification": {
			// Property: ImportSourceSpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "InputCompressionType": {
			//	      "type": "string"
			//	    },
			//	    "InputFormat": {
			//	      "type": "string"
			//	    },
			//	    "InputFormatOptions": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "Csv": {
			//	          "additionalProperties": false,
			//	          "properties": {
			//	            "Delimiter": {
			//	              "type": "string"
			//	            },
			//	            "HeaderList": {
			//	              "items": {
			//	                "type": "string"
			//	              },
			//	              "type": "array",
			//	              "uniqueItems": true
			//	            }
			//	          },
			//	          "type": "object"
			//	        }
			//	      },
			//	      "type": "object"
			//	    },
			//	    "S3BucketSource": {
			//	      "additionalProperties": false,
			//	      "properties": {
			//	        "S3Bucket": {
			//	          "type": "string"
			//	        },
			//	        "S3BucketOwner": {
			//	          "type": "string"
			//	        },
			//	        "S3KeyPrefix": {
			//	          "type": "string"
			//	        }
			//	      },
			//	      "required": [
			//	        "S3Bucket"
			//	      ],
			//	      "type": "object"
			//	    }
			//	  },
			//	  "required": [
			//	    "S3BucketSource",
			//	    "InputFormat"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"input_compression_type": {
						// Property: InputCompressionType
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"input_format": {
						// Property: InputFormat
						Type:     types.StringType,
						Required: true,
					},
					"input_format_options": {
						// Property: InputFormatOptions
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"csv": {
									// Property: Csv
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"delimiter": {
												// Property: Delimiter
												Type:     types.StringType,
												Optional: true,
												Computed: true,
												PlanModifiers: []tfsdk.AttributePlanModifier{
													resource.UseStateForUnknown(),
												},
											},
											"header_list": {
												// Property: HeaderList
												Type:     types.ListType{ElemType: types.StringType},
												Optional: true,
												Computed: true,
												Validators: []tfsdk.AttributeValidator{
													validate.UniqueItems(),
												},
												PlanModifiers: []tfsdk.AttributePlanModifier{
													resource.UseStateForUnknown(),
												},
											},
										},
									),
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"s3_bucket_source": {
						// Property: S3BucketSource
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"s3_bucket": {
									// Property: S3Bucket
									Type:     types.StringType,
									Required: true,
								},
								"s3_bucket_owner": {
									// Property: S3BucketOwner
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"s3_key_prefix": {
									// Property: S3KeyPrefix
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
			// ImportSourceSpecification is a write-only property.
		},
		"key_schema": {
			// Property: KeySchema
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "object"
			//	}
			Type:     types.MapType{ElemType: types.StringType},
			Required: true,
		},
		"kinesis_stream_specification": {
			// Property: KinesisStreamSpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "StreamArn": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "StreamArn"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"stream_arn": {
						// Property: StreamArn
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"local_secondary_indexes": {
			// Property: LocalSecondaryIndexes
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "IndexName": {
			//	        "type": "string"
			//	      },
			//	      "KeySchema": {
			//	        "items": {
			//	          "additionalProperties": false,
			//	          "properties": {
			//	            "AttributeName": {
			//	              "type": "string"
			//	            },
			//	            "KeyType": {
			//	              "type": "string"
			//	            }
			//	          },
			//	          "required": [
			//	            "KeyType",
			//	            "AttributeName"
			//	          ],
			//	          "type": "object"
			//	        },
			//	        "type": "array",
			//	        "uniqueItems": true
			//	      },
			//	      "Projection": {
			//	        "additionalProperties": false,
			//	        "properties": {
			//	          "NonKeyAttributes": {
			//	            "items": {
			//	              "type": "string"
			//	            },
			//	            "type": "array",
			//	            "uniqueItems": false
			//	          },
			//	          "ProjectionType": {
			//	            "type": "string"
			//	          }
			//	        },
			//	        "type": "object"
			//	      }
			//	    },
			//	    "required": [
			//	      "IndexName",
			//	      "Projection",
			//	      "KeySchema"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"index_name": {
						// Property: IndexName
						Type:     types.StringType,
						Required: true,
					},
					"key_schema": {
						// Property: KeySchema
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"attribute_name": {
									// Property: AttributeName
									Type:     types.StringType,
									Required: true,
								},
								"key_type": {
									// Property: KeyType
									Type:     types.StringType,
									Required: true,
								},
							},
						),
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.UniqueItems(),
						},
					},
					"projection": {
						// Property: Projection
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"non_key_attributes": {
									// Property: NonKeyAttributes
									Type:     types.ListType{ElemType: types.StringType},
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
								"projection_type": {
									// Property: ProjectionType
									Type:     types.StringType,
									Optional: true,
									Computed: true,
									PlanModifiers: []tfsdk.AttributePlanModifier{
										resource.UseStateForUnknown(),
									},
								},
							},
						),
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"point_in_time_recovery_specification": {
			// Property: PointInTimeRecoverySpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "PointInTimeRecoveryEnabled": {
			//	      "type": "boolean"
			//	    }
			//	  },
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"point_in_time_recovery_enabled": {
						// Property: PointInTimeRecoveryEnabled
						Type:     types.BoolType,
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"provisioned_throughput": {
			// Property: ProvisionedThroughput
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "ReadCapacityUnits": {
			//	      "type": "integer"
			//	    },
			//	    "WriteCapacityUnits": {
			//	      "type": "integer"
			//	    }
			//	  },
			//	  "required": [
			//	    "WriteCapacityUnits",
			//	    "ReadCapacityUnits"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"read_capacity_units": {
						// Property: ReadCapacityUnits
						Type:     types.Int64Type,
						Required: true,
					},
					"write_capacity_units": {
						// Property: WriteCapacityUnits
						Type:     types.Int64Type,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"sse_specification": {
			// Property: SSESpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "KMSMasterKeyId": {
			//	      "type": "string"
			//	    },
			//	    "SSEEnabled": {
			//	      "type": "boolean"
			//	    },
			//	    "SSEType": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "SSEEnabled"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"kms_master_key_id": {
						// Property: KMSMasterKeyId
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
					"sse_enabled": {
						// Property: SSEEnabled
						Type:     types.BoolType,
						Required: true,
					},
					"sse_type": {
						// Property: SSEType
						Type:     types.StringType,
						Optional: true,
						Computed: true,
						PlanModifiers: []tfsdk.AttributePlanModifier{
							resource.UseStateForUnknown(),
						},
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"stream_arn": {
			// Property: StreamArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"stream_specification": {
			// Property: StreamSpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "StreamViewType": {
			//	      "type": "string"
			//	    }
			//	  },
			//	  "required": [
			//	    "StreamViewType"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"stream_view_type": {
						// Property: StreamViewType
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"table_class": {
			// Property: TableClass
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"table_name": {
			// Property: TableName
			// CloudFormation resource type schema:
			//
			//	{
			//	  "type": "string"
			//	}
			Type:     types.StringType,
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
				resource.RequiresReplace(),
			},
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			//
			//	{
			//	  "items": {
			//	    "additionalProperties": false,
			//	    "properties": {
			//	      "Key": {
			//	        "type": "string"
			//	      },
			//	      "Value": {
			//	        "type": "string"
			//	      }
			//	    },
			//	    "required": [
			//	      "Value",
			//	      "Key"
			//	    ],
			//	    "type": "object"
			//	  },
			//	  "type": "array",
			//	  "uniqueItems": false
			//	}
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"time_to_live_specification": {
			// Property: TimeToLiveSpecification
			// CloudFormation resource type schema:
			//
			//	{
			//	  "additionalProperties": false,
			//	  "properties": {
			//	    "AttributeName": {
			//	      "type": "string"
			//	    },
			//	    "Enabled": {
			//	      "type": "boolean"
			//	    }
			//	  },
			//	  "required": [
			//	    "Enabled",
			//	    "AttributeName"
			//	  ],
			//	  "type": "object"
			//	}
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"attribute_name": {
						// Property: AttributeName
						Type:     types.StringType,
						Required: true,
					},
					"enabled": {
						// Property: Enabled
						Type:     types.BoolType,
						Required: true,
					},
				},
			),
			Optional: true,
			Computed: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Version: None. Resource Type definition for AWS::DynamoDB::Table",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DynamoDB::Table").WithTerraformTypeName("awscc_dynamodb_table")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                                  "Arn",
		"attribute_definitions":                "AttributeDefinitions",
		"attribute_name":                       "AttributeName",
		"attribute_type":                       "AttributeType",
		"billing_mode":                         "BillingMode",
		"contributor_insights_specification":   "ContributorInsightsSpecification",
		"csv":                                  "Csv",
		"delimiter":                            "Delimiter",
		"enabled":                              "Enabled",
		"global_secondary_indexes":             "GlobalSecondaryIndexes",
		"header_list":                          "HeaderList",
		"import_source_specification":          "ImportSourceSpecification",
		"index_name":                           "IndexName",
		"input_compression_type":               "InputCompressionType",
		"input_format":                         "InputFormat",
		"input_format_options":                 "InputFormatOptions",
		"key":                                  "Key",
		"key_schema":                           "KeySchema",
		"key_type":                             "KeyType",
		"kinesis_stream_specification":         "KinesisStreamSpecification",
		"kms_master_key_id":                    "KMSMasterKeyId",
		"local_secondary_indexes":              "LocalSecondaryIndexes",
		"non_key_attributes":                   "NonKeyAttributes",
		"point_in_time_recovery_enabled":       "PointInTimeRecoveryEnabled",
		"point_in_time_recovery_specification": "PointInTimeRecoverySpecification",
		"projection":                           "Projection",
		"projection_type":                      "ProjectionType",
		"provisioned_throughput":               "ProvisionedThroughput",
		"read_capacity_units":                  "ReadCapacityUnits",
		"s3_bucket":                            "S3Bucket",
		"s3_bucket_owner":                      "S3BucketOwner",
		"s3_bucket_source":                     "S3BucketSource",
		"s3_key_prefix":                        "S3KeyPrefix",
		"sse_enabled":                          "SSEEnabled",
		"sse_specification":                    "SSESpecification",
		"sse_type":                             "SSEType",
		"stream_arn":                           "StreamArn",
		"stream_specification":                 "StreamSpecification",
		"stream_view_type":                     "StreamViewType",
		"table_class":                          "TableClass",
		"table_name":                           "TableName",
		"tags":                                 "Tags",
		"time_to_live_specification":           "TimeToLiveSpecification",
		"value":                                "Value",
		"write_capacity_units":                 "WriteCapacityUnits",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/ImportSourceSpecification",
	})
	opts = opts.WithCreateTimeoutInMinutes(720).WithDeleteTimeoutInMinutes(720)

	opts = opts.WithUpdateTimeoutInMinutes(720)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
