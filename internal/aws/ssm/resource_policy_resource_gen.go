// Code generated by generators/resource/main.go; DO NOT EDIT.

package ssm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ssm_resource_policy", resourcePolicyResource)
}

// resourcePolicyResource returns the Terraform awscc_ssm_resource_policy resource.
// This Terraform resource corresponds to the CloudFormation AWS::SSM::ResourcePolicy resource.
func resourcePolicyResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]tfsdk.Attribute{
		"policy": {
			// Property: Policy
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Actual policy statement.",
			//	  "type": "string"
			//	}
			Description: "Actual policy statement.",
			Type:        types.StringType,
			Required:    true,
		},
		"policy_hash": {
			// Property: PolicyHash
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "A snapshot identifier for the policy over time.",
			//	  "type": "string"
			//	}
			Description: "A snapshot identifier for the policy over time.",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"policy_id": {
			// Property: PolicyId
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "An unique identifier within the policies of a resource. ",
			//	  "type": "string"
			//	}
			Description: "An unique identifier within the policies of a resource. ",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"resource_arn": {
			// Property: ResourceArn
			// CloudFormation resource type schema:
			//
			//	{
			//	  "description": "Arn of OpsItemGroup etc.",
			//	  "type": "string"
			//	}
			Description: "Arn of OpsItemGroup etc.",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.RequiresReplace(),
			},
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
		PlanModifiers: []tfsdk.AttributePlanModifier{
			resource.UseStateForUnknown(),
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::SSM::ResourcePolicy",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSM::ResourcePolicy").WithTerraformTypeName("awscc_ssm_resource_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"policy":       "Policy",
		"policy_hash":  "PolicyHash",
		"policy_id":    "PolicyId",
		"resource_arn": "ResourceArn",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
