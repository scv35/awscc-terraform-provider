// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ssm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ssm_parameter", parameterDataSource)
}

// parameterDataSource returns the Terraform awscc_ssm_parameter data source.
// This Terraform data source corresponds to the CloudFormation AWS::SSM::Parameter resource.
func parameterDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllowedPattern
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The regular expression used to validate the parameter value.",
		//	  "type": "string"
		//	}
		"allowed_pattern": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The regular expression used to validate the parameter value.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The corresponding DataType of the parameter.",
		//	  "enum": [
		//	    "text",
		//	    "aws:ec2:image"
		//	  ],
		//	  "type": "string"
		//	}
		"data_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The corresponding DataType of the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The information about the parameter.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The information about the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the parameter.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Policies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The policies attached to the parameter.",
		//	  "type": "string"
		//	}
		"policies": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The policies attached to the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A key-value pair to associate with a resource.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A key-value pair to associate with a resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The corresponding tier of the parameter.",
		//	  "enum": [
		//	    "Standard",
		//	    "Advanced",
		//	    "Intelligent-Tiering"
		//	  ],
		//	  "type": "string"
		//	}
		"tier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The corresponding tier of the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the parameter.",
		//	  "enum": [
		//	    "String",
		//	    "StringList",
		//	    "SecureString"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Value
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value associated with the parameter.",
		//	  "type": "string"
		//	}
		"value": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value associated with the parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SSM::Parameter",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSM::Parameter").WithTerraformTypeName("awscc_ssm_parameter")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allowed_pattern": "AllowedPattern",
		"data_type":       "DataType",
		"description":     "Description",
		"name":            "Name",
		"policies":        "Policies",
		"tags":            "Tags",
		"tier":            "Tier",
		"type":            "Type",
		"value":           "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
