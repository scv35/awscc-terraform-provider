// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iotevents

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_iotevents_detector_model", detectorModelResource)
}

// detectorModelResource returns the Terraform awscc_iotevents_detector_model resource.
// This Terraform resource corresponds to the CloudFormation AWS::IoTEvents::DetectorModel resource.
func detectorModelResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DetectorModelDefinition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Information that defines how a detector operates.",
		//	  "properties": {
		//	    "InitialStateName": {
		//	      "description": "The state that is entered at the creation of each detector (instance).",
		//	      "maxLength": 128,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "States": {
		//	      "description": "Information about the states of the detector.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Information that defines a state of a detector.",
		//	        "properties": {
		//	          "OnEnter": {
		//	            "additionalProperties": false,
		//	            "description": "When entering this state, perform these `actions` if the `condition` is `TRUE`.",
		//	            "properties": {
		//	              "Events": {
		//	                "description": "Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.",
		//	                  "properties": {
		//	                    "Actions": {
		//	                      "description": "The actions to be performed.",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "The actions to be performed.",
		//	                        "properties": {
		//	                          "ClearTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to clear the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDB": {
		//	                            "additionalProperties": false,
		//	                            "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "HashKeyField": {
		//	                                "description": "The name of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyType": {
		//	                                "description": "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyValue": {
		//	                                "description": "The value of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "Operation": {
		//	                                "description": "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "PayloadField": {
		//	                                "description": "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyField": {
		//	                                "description": "The name of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyType": {
		//	                                "description": "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyValue": {
		//	                                "description": "The value of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "HashKeyField",
		//	                              "HashKeyValue",
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDBv2": {
		//	                            "additionalProperties": false,
		//	                            "description": "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Firehose": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
		//	                            "properties": {
		//	                              "DeliveryStreamName": {
		//	                                "description": "The name of the Kinesis Data Firehose delivery stream where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "Separator": {
		//	                                "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
		//	                                "pattern": "([\\n\\t])|(\\r\\n)|(,)",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "DeliveryStreamName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotEvents": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
		//	                            "properties": {
		//	                              "InputName": {
		//	                                "description": "The name of the AWS IoT Events input where the data is sent.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "InputName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotSiteWise": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
		//	                            "properties": {
		//	                              "AssetId": {
		//	                                "description": "The ID of the asset that has the specified property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "EntryId": {
		//	                                "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyAlias": {
		//	                                "description": "The alias of the asset property. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyId": {
		//	                                "description": "The ID of the asset property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyValue": {
		//	                                "additionalProperties": false,
		//	                                "description": "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                "properties": {
		//	                                  "Quality": {
		//	                                    "description": "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Timestamp": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "OffsetInNanos": {
		//	                                        "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "TimeInSeconds": {
		//	                                        "description": "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "TimeInSeconds"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "Value": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "BooleanValue": {
		//	                                        "description": "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "DoubleValue": {
		//	                                        "description": "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "IntegerValue": {
		//	                                        "description": "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "StringValue": {
		//	                                        "description": "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "type": "object"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "PropertyValue"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotTopicPublish": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the MQTT message through the AWS IoT message broker.",
		//	                            "properties": {
		//	                              "MqttTopic": {
		//	                                "description": "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.\u003cvariable-name\u003e`) and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the topic string.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "MqttTopic"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Lambda": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "FunctionArn": {
		//	                                "description": "The ARN of the Lambda function that is executed.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "FunctionArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "ResetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "description": "The name of the timer to reset.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to set the timer.",
		//	                            "properties": {
		//	                              "DurationExpression": {
		//	                                "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.\u003cvariable-name\u003e`), and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Seconds": {
		//	                                "description": "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
		//	                                "maximum": 31622400,
		//	                                "minimum": 60,
		//	                                "type": "integer"
		//	                              },
		//	                              "TimerName": {
		//	                                "description": "The name of the timer.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetVariable": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information about the variable and its new value.",
		//	                            "properties": {
		//	                              "Value": {
		//	                                "description": "The new value of the variable.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "VariableName": {
		//	                                "description": "The name of the variable.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Value",
		//	                              "VariableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sns": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the Amazon SNS message.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TargetArn": {
		//	                                "description": "The ARN of the Amazon SNS target where the message is sent.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TargetArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sqs": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "QueueUrl": {
		//	                                "description": "The URL of the SQS queue where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "UseBase64": {
		//	                                "description": "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
		//	                                "type": "boolean"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "QueueUrl"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": false
		//	                    },
		//	                    "Condition": {
		//	                      "description": "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
		//	                      "maxLength": 512,
		//	                      "type": "string"
		//	                    },
		//	                    "EventName": {
		//	                      "description": "The name of the event.",
		//	                      "maxLength": 128,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "EventName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "OnExit": {
		//	            "additionalProperties": false,
		//	            "description": "When exiting this state, perform these `actions` if the specified `condition` is `TRUE`.",
		//	            "properties": {
		//	              "Events": {
		//	                "description": "Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.",
		//	                  "properties": {
		//	                    "Actions": {
		//	                      "description": "The actions to be performed.",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "The actions to be performed.",
		//	                        "properties": {
		//	                          "ClearTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to clear the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDB": {
		//	                            "additionalProperties": false,
		//	                            "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "HashKeyField": {
		//	                                "description": "The name of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyType": {
		//	                                "description": "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyValue": {
		//	                                "description": "The value of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "Operation": {
		//	                                "description": "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "PayloadField": {
		//	                                "description": "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyField": {
		//	                                "description": "The name of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyType": {
		//	                                "description": "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyValue": {
		//	                                "description": "The value of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "HashKeyField",
		//	                              "HashKeyValue",
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDBv2": {
		//	                            "additionalProperties": false,
		//	                            "description": "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Firehose": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
		//	                            "properties": {
		//	                              "DeliveryStreamName": {
		//	                                "description": "The name of the Kinesis Data Firehose delivery stream where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "Separator": {
		//	                                "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
		//	                                "pattern": "([\\n\\t])|(\\r\\n)|(,)",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "DeliveryStreamName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotEvents": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
		//	                            "properties": {
		//	                              "InputName": {
		//	                                "description": "The name of the AWS IoT Events input where the data is sent.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "InputName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotSiteWise": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
		//	                            "properties": {
		//	                              "AssetId": {
		//	                                "description": "The ID of the asset that has the specified property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "EntryId": {
		//	                                "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyAlias": {
		//	                                "description": "The alias of the asset property. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyId": {
		//	                                "description": "The ID of the asset property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyValue": {
		//	                                "additionalProperties": false,
		//	                                "description": "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                "properties": {
		//	                                  "Quality": {
		//	                                    "description": "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Timestamp": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "OffsetInNanos": {
		//	                                        "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "TimeInSeconds": {
		//	                                        "description": "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "TimeInSeconds"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "Value": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "BooleanValue": {
		//	                                        "description": "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "DoubleValue": {
		//	                                        "description": "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "IntegerValue": {
		//	                                        "description": "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "StringValue": {
		//	                                        "description": "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "type": "object"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "PropertyValue"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotTopicPublish": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the MQTT message through the AWS IoT message broker.",
		//	                            "properties": {
		//	                              "MqttTopic": {
		//	                                "description": "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.\u003cvariable-name\u003e`) and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the topic string.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "MqttTopic"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Lambda": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "FunctionArn": {
		//	                                "description": "The ARN of the Lambda function that is executed.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "FunctionArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "ResetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "description": "The name of the timer to reset.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to set the timer.",
		//	                            "properties": {
		//	                              "DurationExpression": {
		//	                                "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.\u003cvariable-name\u003e`), and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Seconds": {
		//	                                "description": "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
		//	                                "maximum": 31622400,
		//	                                "minimum": 60,
		//	                                "type": "integer"
		//	                              },
		//	                              "TimerName": {
		//	                                "description": "The name of the timer.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetVariable": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information about the variable and its new value.",
		//	                            "properties": {
		//	                              "Value": {
		//	                                "description": "The new value of the variable.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "VariableName": {
		//	                                "description": "The name of the variable.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Value",
		//	                              "VariableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sns": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the Amazon SNS message.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TargetArn": {
		//	                                "description": "The ARN of the Amazon SNS target where the message is sent.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TargetArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sqs": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "QueueUrl": {
		//	                                "description": "The URL of the SQS queue where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "UseBase64": {
		//	                                "description": "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
		//	                                "type": "boolean"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "QueueUrl"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": false
		//	                    },
		//	                    "Condition": {
		//	                      "description": "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
		//	                      "maxLength": 512,
		//	                      "type": "string"
		//	                    },
		//	                    "EventName": {
		//	                      "description": "The name of the event.",
		//	                      "maxLength": 128,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "EventName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "OnInput": {
		//	            "additionalProperties": false,
		//	            "description": "When an input is received and the `condition` is `TRUE`, perform the specified `actions`.",
		//	            "properties": {
		//	              "Events": {
		//	                "description": "Specifies the `actions` performed when the `condition` evaluates to `TRUE`.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.",
		//	                  "properties": {
		//	                    "Actions": {
		//	                      "description": "The actions to be performed.",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "The actions to be performed.",
		//	                        "properties": {
		//	                          "ClearTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to clear the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDB": {
		//	                            "additionalProperties": false,
		//	                            "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "HashKeyField": {
		//	                                "description": "The name of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyType": {
		//	                                "description": "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyValue": {
		//	                                "description": "The value of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "Operation": {
		//	                                "description": "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "PayloadField": {
		//	                                "description": "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyField": {
		//	                                "description": "The name of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyType": {
		//	                                "description": "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyValue": {
		//	                                "description": "The value of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "HashKeyField",
		//	                              "HashKeyValue",
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDBv2": {
		//	                            "additionalProperties": false,
		//	                            "description": "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Firehose": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
		//	                            "properties": {
		//	                              "DeliveryStreamName": {
		//	                                "description": "The name of the Kinesis Data Firehose delivery stream where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "Separator": {
		//	                                "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
		//	                                "pattern": "([\\n\\t])|(\\r\\n)|(,)",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "DeliveryStreamName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotEvents": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
		//	                            "properties": {
		//	                              "InputName": {
		//	                                "description": "The name of the AWS IoT Events input where the data is sent.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "InputName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotSiteWise": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
		//	                            "properties": {
		//	                              "AssetId": {
		//	                                "description": "The ID of the asset that has the specified property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "EntryId": {
		//	                                "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyAlias": {
		//	                                "description": "The alias of the asset property. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyId": {
		//	                                "description": "The ID of the asset property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyValue": {
		//	                                "additionalProperties": false,
		//	                                "description": "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                "properties": {
		//	                                  "Quality": {
		//	                                    "description": "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Timestamp": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "OffsetInNanos": {
		//	                                        "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "TimeInSeconds": {
		//	                                        "description": "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "TimeInSeconds"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "Value": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "BooleanValue": {
		//	                                        "description": "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "DoubleValue": {
		//	                                        "description": "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "IntegerValue": {
		//	                                        "description": "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "StringValue": {
		//	                                        "description": "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "type": "object"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "PropertyValue"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotTopicPublish": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the MQTT message through the AWS IoT message broker.",
		//	                            "properties": {
		//	                              "MqttTopic": {
		//	                                "description": "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.\u003cvariable-name\u003e`) and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the topic string.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "MqttTopic"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Lambda": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "FunctionArn": {
		//	                                "description": "The ARN of the Lambda function that is executed.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "FunctionArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "ResetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "description": "The name of the timer to reset.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to set the timer.",
		//	                            "properties": {
		//	                              "DurationExpression": {
		//	                                "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.\u003cvariable-name\u003e`), and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Seconds": {
		//	                                "description": "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
		//	                                "maximum": 31622400,
		//	                                "minimum": 60,
		//	                                "type": "integer"
		//	                              },
		//	                              "TimerName": {
		//	                                "description": "The name of the timer.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetVariable": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information about the variable and its new value.",
		//	                            "properties": {
		//	                              "Value": {
		//	                                "description": "The new value of the variable.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "VariableName": {
		//	                                "description": "The name of the variable.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Value",
		//	                              "VariableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sns": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the Amazon SNS message.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TargetArn": {
		//	                                "description": "The ARN of the Amazon SNS target where the message is sent.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TargetArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sqs": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "QueueUrl": {
		//	                                "description": "The URL of the SQS queue where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "UseBase64": {
		//	                                "description": "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
		//	                                "type": "boolean"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "QueueUrl"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": false
		//	                    },
		//	                    "Condition": {
		//	                      "description": "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
		//	                      "maxLength": 512,
		//	                      "type": "string"
		//	                    },
		//	                    "EventName": {
		//	                      "description": "The name of the event.",
		//	                      "maxLength": 128,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "EventName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "TransitionEvents": {
		//	                "description": "Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Specifies the `actions `performed and the next `state` entered when a `condition` evaluates to `TRUE`.",
		//	                  "properties": {
		//	                    "Actions": {
		//	                      "description": "The actions to be performed.",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "The actions to be performed.",
		//	                        "properties": {
		//	                          "ClearTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to clear the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDB": {
		//	                            "additionalProperties": false,
		//	                            "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "HashKeyField": {
		//	                                "description": "The name of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyType": {
		//	                                "description": "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "HashKeyValue": {
		//	                                "description": "The value of the hash key (also called the partition key).",
		//	                                "type": "string"
		//	                              },
		//	                              "Operation": {
		//	                                "description": "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "PayloadField": {
		//	                                "description": "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyField": {
		//	                                "description": "The name of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyType": {
		//	                                "description": "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
		//	                                "type": "string"
		//	                              },
		//	                              "RangeKeyValue": {
		//	                                "description": "The value of the range key (also called the sort key).",
		//	                                "type": "string"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "HashKeyField",
		//	                              "HashKeyValue",
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "DynamoDBv2": {
		//	                            "additionalProperties": false,
		//	                            "description": "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TableName": {
		//	                                "description": "The name of the DynamoDB table.",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Firehose": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
		//	                            "properties": {
		//	                              "DeliveryStreamName": {
		//	                                "description": "The name of the Kinesis Data Firehose delivery stream where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "Separator": {
		//	                                "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
		//	                                "pattern": "([\\n\\t])|(\\r\\n)|(,)",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "DeliveryStreamName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotEvents": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
		//	                            "properties": {
		//	                              "InputName": {
		//	                                "description": "The name of the AWS IoT Events input where the data is sent.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "InputName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotSiteWise": {
		//	                            "additionalProperties": false,
		//	                            "description": "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
		//	                            "properties": {
		//	                              "AssetId": {
		//	                                "description": "The ID of the asset that has the specified property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "EntryId": {
		//	                                "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyAlias": {
		//	                                "description": "The alias of the asset property. You can also specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyId": {
		//	                                "description": "The ID of the asset property. You can specify an expression.",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyValue": {
		//	                                "additionalProperties": false,
		//	                                "description": "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                "properties": {
		//	                                  "Quality": {
		//	                                    "description": "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Timestamp": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "OffsetInNanos": {
		//	                                        "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "TimeInSeconds": {
		//	                                        "description": "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "TimeInSeconds"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "Value": {
		//	                                    "additionalProperties": false,
		//	                                    "description": "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
		//	                                    "properties": {
		//	                                      "BooleanValue": {
		//	                                        "description": "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "DoubleValue": {
		//	                                        "description": "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "IntegerValue": {
		//	                                        "description": "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "StringValue": {
		//	                                        "description": "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "type": "object"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "PropertyValue"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "IotTopicPublish": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the MQTT message through the AWS IoT message broker.",
		//	                            "properties": {
		//	                              "MqttTopic": {
		//	                                "description": "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.\u003cvariable-name\u003e`) and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the topic string.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "MqttTopic"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Lambda": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "FunctionArn": {
		//	                                "description": "The ARN of the Lambda function that is executed.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "FunctionArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "ResetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
		//	                            "properties": {
		//	                              "TimerName": {
		//	                                "description": "The name of the timer to reset.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetTimer": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information needed to set the timer.",
		//	                            "properties": {
		//	                              "DurationExpression": {
		//	                                "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.\u003cvariable-name\u003e`), and input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "Seconds": {
		//	                                "description": "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
		//	                                "maximum": 31622400,
		//	                                "minimum": 60,
		//	                                "type": "integer"
		//	                              },
		//	                              "TimerName": {
		//	                                "description": "The name of the timer.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimerName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "SetVariable": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information about the variable and its new value.",
		//	                            "properties": {
		//	                              "Value": {
		//	                                "description": "The new value of the variable.",
		//	                                "maxLength": 1024,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "VariableName": {
		//	                                "description": "The name of the variable.",
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Value",
		//	                              "VariableName"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sns": {
		//	                            "additionalProperties": false,
		//	                            "description": "Information required to publish the Amazon SNS message.",
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TargetArn": {
		//	                                "description": "The ARN of the Amazon SNS target where the message is sent.",
		//	                                "maxLength": 2048,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TargetArn"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Sqs": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Payload": {
		//	                                "additionalProperties": false,
		//	                                "description": "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
		//	                                "properties": {
		//	                                  "ContentExpression": {
		//	                                    "description": "The content of the payload. You can use a string expression that includes quoted strings (`'\u003cstring\u003e'`), variables (`$variable.\u003cvariable-name\u003e`), input values (`$input.\u003cinput-name\u003e.\u003cpath-to-datum\u003e`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "description": "The value of the payload type can be either `STRING` or `JSON`.",
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "ContentExpression",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "QueueUrl": {
		//	                                "description": "The URL of the SQS queue where the data is written.",
		//	                                "type": "string"
		//	                              },
		//	                              "UseBase64": {
		//	                                "description": "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
		//	                                "type": "boolean"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "QueueUrl"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": false
		//	                    },
		//	                    "Condition": {
		//	                      "description": "A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.",
		//	                      "maxLength": 512,
		//	                      "type": "string"
		//	                    },
		//	                    "EventName": {
		//	                      "description": "The name of the event.",
		//	                      "maxLength": 128,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    },
		//	                    "NextState": {
		//	                      "description": "The next state to enter.",
		//	                      "maxLength": 128,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Condition",
		//	                    "EventName",
		//	                    "NextState"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "StateName": {
		//	            "description": "The name of the state.",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "StateName"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "required": [
		//	    "States",
		//	    "InitialStateName"
		//	  ],
		//	  "type": "object"
		//	}
		"detector_model_definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: InitialStateName
				"initial_state_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The state that is entered at the creation of each detector (instance).",
					Required:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 128),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
				// Property: States
				"states": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: OnEnter
							"on_enter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Events
									"events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Actions
												"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: ClearTimer
															"clear_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Required: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to clear the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDB
															"dynamo_db": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: HashKeyField
																	"hash_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyType
																	"hash_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyValue
																	"hash_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Operation
																	"operation": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PayloadField
																	"payload_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyField
																	"range_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyType
																	"range_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyValue
																	"range_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDBv2
															"dynamo_d_bv_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Firehose
															"firehose": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DeliveryStreamName
																	"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the Kinesis Data Firehose delivery stream where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Separator
																	"separator": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.RegexMatches(regexp.MustCompile("([\\n\\t])|(\\r\\n)|(,)"), ""),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotEvents
															"iot_events": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: InputName
																	"input_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the AWS IoT Events input where the data is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotSiteWise
															"iot_site_wise": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: AssetId
																	"asset_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset that has the specified property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: EntryId
																	"entry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyAlias
																	"property_alias": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The alias of the asset property. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyId
																	"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyValue
																	"property_value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Quality
																			"quality": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Timestamp
																			"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: OffsetInNanos
																					"offset_in_nanos": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: TimeInSeconds
																					"time_in_seconds": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
																						Required:    true,
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																					objectplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: BooleanValue
																					"boolean_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: DoubleValue
																					"double_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: IntegerValue
																					"integer_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: StringValue
																					"string_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotTopicPublish
															"iot_topic_publish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: MqttTopic
																	"mqtt_topic": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the MQTT message through the AWS IoT message broker.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Lambda
															"lambda": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: FunctionArn
																	"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Lambda function that is executed.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: ResetTimer
															"reset_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer to reset.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetTimer
															"set_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DurationExpression
																	"duration_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Seconds
																	"seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
																		Description: "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.Int64{ /*START VALIDATORS*/
																			int64validator.Between(60, 31622400),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																			int64planmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to set the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetVariable
															"set_variable": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The new value of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: VariableName
																	"variable_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information about the variable and its new value.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sns
															"sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TargetArn
																	"target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Amazon SNS target where the message is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the Amazon SNS message.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sqs
															"sqs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: QueueUrl
																	"queue_url": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The URL of the SQS queue where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: UseBase64
																	"use_base_64": schema.BoolAttribute{ /*START ATTRIBUTE*/
																		Description: "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
																			boolplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "The actions to be performed.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Condition
												"condition": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
													Optional:    true,
													Computed:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(512),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: EventName
												"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the event.",
													Required:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(128),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											generic.Multiset(),
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "When entering this state, perform these `actions` if the `condition` is `TRUE`.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: OnExit
							"on_exit": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Events
									"events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Actions
												"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: ClearTimer
															"clear_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Required: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to clear the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDB
															"dynamo_db": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: HashKeyField
																	"hash_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyType
																	"hash_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyValue
																	"hash_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Operation
																	"operation": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PayloadField
																	"payload_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyField
																	"range_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyType
																	"range_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyValue
																	"range_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDBv2
															"dynamo_d_bv_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Firehose
															"firehose": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DeliveryStreamName
																	"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the Kinesis Data Firehose delivery stream where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Separator
																	"separator": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.RegexMatches(regexp.MustCompile("([\\n\\t])|(\\r\\n)|(,)"), ""),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotEvents
															"iot_events": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: InputName
																	"input_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the AWS IoT Events input where the data is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotSiteWise
															"iot_site_wise": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: AssetId
																	"asset_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset that has the specified property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: EntryId
																	"entry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyAlias
																	"property_alias": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The alias of the asset property. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyId
																	"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyValue
																	"property_value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Quality
																			"quality": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Timestamp
																			"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: OffsetInNanos
																					"offset_in_nanos": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: TimeInSeconds
																					"time_in_seconds": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
																						Required:    true,
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																					objectplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: BooleanValue
																					"boolean_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: DoubleValue
																					"double_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: IntegerValue
																					"integer_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: StringValue
																					"string_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotTopicPublish
															"iot_topic_publish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: MqttTopic
																	"mqtt_topic": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the MQTT message through the AWS IoT message broker.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Lambda
															"lambda": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: FunctionArn
																	"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Lambda function that is executed.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: ResetTimer
															"reset_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer to reset.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetTimer
															"set_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DurationExpression
																	"duration_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Seconds
																	"seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
																		Description: "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.Int64{ /*START VALIDATORS*/
																			int64validator.Between(60, 31622400),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																			int64planmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to set the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetVariable
															"set_variable": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The new value of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: VariableName
																	"variable_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information about the variable and its new value.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sns
															"sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TargetArn
																	"target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Amazon SNS target where the message is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the Amazon SNS message.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sqs
															"sqs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: QueueUrl
																	"queue_url": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The URL of the SQS queue where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: UseBase64
																	"use_base_64": schema.BoolAttribute{ /*START ATTRIBUTE*/
																		Description: "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
																			boolplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "The actions to be performed.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Condition
												"condition": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
													Optional:    true,
													Computed:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(512),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: EventName
												"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the event.",
													Required:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(128),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											generic.Multiset(),
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "When exiting this state, perform these `actions` if the specified `condition` is `TRUE`.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: OnInput
							"on_input": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Events
									"events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Actions
												"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: ClearTimer
															"clear_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Required: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to clear the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDB
															"dynamo_db": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: HashKeyField
																	"hash_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyType
																	"hash_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyValue
																	"hash_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Operation
																	"operation": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PayloadField
																	"payload_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyField
																	"range_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyType
																	"range_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyValue
																	"range_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDBv2
															"dynamo_d_bv_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Firehose
															"firehose": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DeliveryStreamName
																	"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the Kinesis Data Firehose delivery stream where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Separator
																	"separator": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.RegexMatches(regexp.MustCompile("([\\n\\t])|(\\r\\n)|(,)"), ""),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotEvents
															"iot_events": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: InputName
																	"input_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the AWS IoT Events input where the data is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotSiteWise
															"iot_site_wise": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: AssetId
																	"asset_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset that has the specified property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: EntryId
																	"entry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyAlias
																	"property_alias": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The alias of the asset property. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyId
																	"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyValue
																	"property_value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Quality
																			"quality": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Timestamp
																			"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: OffsetInNanos
																					"offset_in_nanos": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: TimeInSeconds
																					"time_in_seconds": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
																						Required:    true,
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																					objectplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: BooleanValue
																					"boolean_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: DoubleValue
																					"double_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: IntegerValue
																					"integer_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: StringValue
																					"string_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotTopicPublish
															"iot_topic_publish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: MqttTopic
																	"mqtt_topic": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the MQTT message through the AWS IoT message broker.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Lambda
															"lambda": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: FunctionArn
																	"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Lambda function that is executed.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: ResetTimer
															"reset_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer to reset.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetTimer
															"set_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DurationExpression
																	"duration_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Seconds
																	"seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
																		Description: "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.Int64{ /*START VALIDATORS*/
																			int64validator.Between(60, 31622400),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																			int64planmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to set the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetVariable
															"set_variable": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The new value of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: VariableName
																	"variable_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information about the variable and its new value.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sns
															"sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TargetArn
																	"target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Amazon SNS target where the message is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the Amazon SNS message.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sqs
															"sqs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: QueueUrl
																	"queue_url": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The URL of the SQS queue where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: UseBase64
																	"use_base_64": schema.BoolAttribute{ /*START ATTRIBUTE*/
																		Description: "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
																			boolplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "The actions to be performed.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Condition
												"condition": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).",
													Optional:    true,
													Computed:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(512),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: EventName
												"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the event.",
													Required:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(128),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Specifies the `actions` performed when the `condition` evaluates to `TRUE`.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											generic.Multiset(),
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: TransitionEvents
									"transition_events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Actions
												"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: ClearTimer
															"clear_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Required: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to clear the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDB
															"dynamo_db": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: HashKeyField
																	"hash_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyType
																	"hash_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the hash key (also called the partition key). You can specify the following values:\n\n* `STRING` - The hash key is a string.\n\n* `NUMBER` - The hash key is a number.\n\nIf you don't specify `hashKeyType`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: HashKeyValue
																	"hash_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the hash key (also called the partition key).",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Operation
																	"operation": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The type of operation to perform. You can specify the following values:\n\n* `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.\n\n* `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\n* `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.\n\nIf you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PayloadField
																	"payload_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB column that receives the action payload.\n\nIf you don't specify this parameter, the name of the DynamoDB column is `payload`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyField
																	"range_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyType
																	"range_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The data type for the range key (also called the sort key), You can specify the following values:\n\n* `STRING` - The range key is a string.\n\n* `NUMBER` - The range key is number.\n\nIf you don't specify `rangeKeyField`, the default value is `STRING`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: RangeKeyValue
																	"range_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The value of the range key (also called the sort key).",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DynamoDBv2
															"dynamo_d_bv_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TableName
																	"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the DynamoDB table.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.\n\nYou can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Firehose
															"firehose": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DeliveryStreamName
																	"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the Kinesis Data Firehose delivery stream where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Separator
																	"separator": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.RegexMatches(regexp.MustCompile("([\\n\\t])|(\\r\\n)|(,)"), ""),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotEvents
															"iot_events": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: InputName
																	"input_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the AWS IoT Events input where the data is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotSiteWise
															"iot_site_wise": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: AssetId
																	"asset_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset that has the specified property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: EntryId
																	"entry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyAlias
																	"property_alias": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The alias of the asset property. You can also specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyId
																	"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the asset property. You can specify an expression.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyValue
																	"property_value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Quality
																			"quality": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Timestamp
																			"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: OffsetInNanos
																					"offset_in_nanos": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: TimeInSeconds
																					"time_in_seconds": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.",
																						Required:    true,
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.",
																				Optional:    true,
																				Computed:    true,
																				PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																					objectplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: BooleanValue
																					"boolean_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: DoubleValue
																					"double_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: IntegerValue
																					"integer_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: StringValue
																					"string_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Description: "The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.",
																						Optional:    true,
																						Computed:    true,
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																				Description: "A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: IotTopicPublish
															"iot_topic_publish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: MqttTopic
																	"mqtt_topic": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the MQTT message through the AWS IoT message broker.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Lambda
															"lambda": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: FunctionArn
																	"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Lambda function that is executed.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: ResetTimer
															"reset_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer to reset.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetTimer
															"set_timer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: DurationExpression
																	"duration_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Seconds
																	"seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
																		Description: "The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.Int64{ /*START VALIDATORS*/
																			int64validator.Between(60, 31622400),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																			int64planmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TimerName
																	"timer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the timer.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information needed to set the timer.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: SetVariable
															"set_variable": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The new value of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 1024),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																	// Property: VariableName
																	"variable_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the variable.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$"), ""),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information about the variable and its new value.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sns
															"sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TargetArn
																	"target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ARN of the Amazon SNS target where the message is sent.",
																		Required:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 2048),
																		}, /*END VALIDATORS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Information required to publish the Amazon SNS message.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sqs
															"sqs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Payload
																	"payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: ContentExpression
																			"content_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.",
																				Required:    true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.LengthAtLeast(1),
																				}, /*END VALIDATORS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "The value of the payload type can be either `STRING` or `JSON`.",
																				Required:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Information needed to configure the payload.\n\nBy default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: QueueUrl
																	"queue_url": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The URL of the SQS queue where the data is written.",
																		Required:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: UseBase64
																	"use_base_64": schema.BoolAttribute{ /*START ATTRIBUTE*/
																		Description: "Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.",
																		Optional:    true,
																		Computed:    true,
																		PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
																			boolplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "The actions to be performed.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Condition
												"condition": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.",
													Required:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthAtMost(512),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
												// Property: EventName
												"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the event.",
													Required:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthBetween(1, 128),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
												// Property: NextState
												"next_state": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The next state to enter.",
													Required:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthBetween(1, 128),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "When an input is received and the `condition` is `TRUE`, perform the specified `actions`.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: StateName
							"state_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The name of the state.",
								Required:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthBetween(1, 128),
								}, /*END VALIDATORS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Information about the states of the detector.",
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeAtLeast(1),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Information that defines how a detector operates.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: DetectorModelDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A brief description of the detector model.",
		//	  "maxLength": 1024,
		//	  "type": "string"
		//	}
		"detector_model_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A brief description of the detector model.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(1024),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DetectorModelName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the detector model.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_-]+$",
		//	  "type": "string"
		//	}
		"detector_model_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the detector model.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EvaluationMethod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information about the order in which events are evaluated and how actions are executed.",
		//	  "enum": [
		//	    "BATCH",
		//	    "SERIAL"
		//	  ],
		//	  "type": "string"
		//	}
		"evaluation_method": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Information about the order in which events are evaluated and how actions are executed.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"BATCH",
					"SERIAL",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Key
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information.\n\nThis parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w\\- ]+`)|([\\w\\-]+)))*$",
		//	  "type": "string"
		//	}
		"key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information.\n\nThis parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
				stringvalidator.RegexMatches(regexp.MustCompile("^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w\\- ]+`)|([\\w\\-]+)))*$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the role that grants permission to AWS IoT Events to perform its operations.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the role that grants permission to AWS IoT Events to perform its operations.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 2048),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.\n\nFor more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Tags to be applied to Input.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "Key of the Tag.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Value of the Tag.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Key of the Tag.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Value of the Tag.",
						Required:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.\n\nFor more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The AWS::IoTEvents::DetectorModel resource creates a detector model. You create a *detector model* (a model of your equipment or process) using *states*. For each state, you define conditional (Boolean) logic that evaluates the incoming inputs to detect significant events. When an event is detected, it can change the state or trigger custom-built or predefined actions using other AWS services. You can define additional events that trigger actions when entering or exiting a state and, optionally, when a condition is met. For more information, see [How to Use AWS IoT Events](https://docs.aws.amazon.com/iotevents/latest/developerguide/how-to-use-iotevents.html) in the *AWS IoT Events Developer Guide*.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTEvents::DetectorModel").WithTerraformTypeName("awscc_iotevents_detector_model")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":                    "Actions",
		"asset_id":                   "AssetId",
		"boolean_value":              "BooleanValue",
		"clear_timer":                "ClearTimer",
		"condition":                  "Condition",
		"content_expression":         "ContentExpression",
		"delivery_stream_name":       "DeliveryStreamName",
		"detector_model_definition":  "DetectorModelDefinition",
		"detector_model_description": "DetectorModelDescription",
		"detector_model_name":        "DetectorModelName",
		"double_value":               "DoubleValue",
		"duration_expression":        "DurationExpression",
		"dynamo_d_bv_2":              "DynamoDBv2",
		"dynamo_db":                  "DynamoDB",
		"entry_id":                   "EntryId",
		"evaluation_method":          "EvaluationMethod",
		"event_name":                 "EventName",
		"events":                     "Events",
		"firehose":                   "Firehose",
		"function_arn":               "FunctionArn",
		"hash_key_field":             "HashKeyField",
		"hash_key_type":              "HashKeyType",
		"hash_key_value":             "HashKeyValue",
		"initial_state_name":         "InitialStateName",
		"input_name":                 "InputName",
		"integer_value":              "IntegerValue",
		"iot_events":                 "IotEvents",
		"iot_site_wise":              "IotSiteWise",
		"iot_topic_publish":          "IotTopicPublish",
		"key":                        "Key",
		"lambda":                     "Lambda",
		"mqtt_topic":                 "MqttTopic",
		"next_state":                 "NextState",
		"offset_in_nanos":            "OffsetInNanos",
		"on_enter":                   "OnEnter",
		"on_exit":                    "OnExit",
		"on_input":                   "OnInput",
		"operation":                  "Operation",
		"payload":                    "Payload",
		"payload_field":              "PayloadField",
		"property_alias":             "PropertyAlias",
		"property_id":                "PropertyId",
		"property_value":             "PropertyValue",
		"quality":                    "Quality",
		"queue_url":                  "QueueUrl",
		"range_key_field":            "RangeKeyField",
		"range_key_type":             "RangeKeyType",
		"range_key_value":            "RangeKeyValue",
		"reset_timer":                "ResetTimer",
		"role_arn":                   "RoleArn",
		"seconds":                    "Seconds",
		"separator":                  "Separator",
		"set_timer":                  "SetTimer",
		"set_variable":               "SetVariable",
		"sns":                        "Sns",
		"sqs":                        "Sqs",
		"state_name":                 "StateName",
		"states":                     "States",
		"string_value":               "StringValue",
		"table_name":                 "TableName",
		"tags":                       "Tags",
		"target_arn":                 "TargetArn",
		"time_in_seconds":            "TimeInSeconds",
		"timer_name":                 "TimerName",
		"timestamp":                  "Timestamp",
		"transition_events":          "TransitionEvents",
		"type":                       "Type",
		"use_base_64":                "UseBase64",
		"value":                      "Value",
		"variable_name":              "VariableName",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
