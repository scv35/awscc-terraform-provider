// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_securityhub_finding_aggregator", findingAggregatorDataSource)
}

// findingAggregatorDataSource returns the Terraform awscc_securityhub_finding_aggregator data source.
// This Terraform data source corresponds to the CloudFormation AWS::SecurityHub::FindingAggregator resource.
func findingAggregatorDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: FindingAggregationRegion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The aggregation Region of the FindingAggregator",
		//	  "pattern": "^[a-zA-Z0-9-]{1,32}$",
		//	  "type": "string"
		//	}
		"finding_aggregation_region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The aggregation Region of the FindingAggregator",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FindingAggregatorArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the FindingAggregator being created and assigned as the unique identifier",
		//	  "pattern": "arn:aws\\S*:securityhub:\\S*",
		//	  "type": "string"
		//	}
		"finding_aggregator_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the FindingAggregator being created and assigned as the unique identifier",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RegionLinkingMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions",
		//	  "enum": [
		//	    "ALL_REGIONS",
		//	    "ALL_REGIONS_EXCEPT_SPECIFIED",
		//	    "SPECIFIED_REGIONS"
		//	  ],
		//	  "type": "string"
		//	}
		"region_linking_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Regions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of excluded Regions or included Regions",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "pattern": "^[a-zA-Z0-9-]{1,32}$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"regions": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The list of excluded Regions or included Regions",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SecurityHub::FindingAggregator",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityHub::FindingAggregator").WithTerraformTypeName("awscc_securityhub_finding_aggregator")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"finding_aggregation_region": "FindingAggregationRegion",
		"finding_aggregator_arn":     "FindingAggregatorArn",
		"region_linking_mode":        "RegionLinkingMode",
		"regions":                    "Regions",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
