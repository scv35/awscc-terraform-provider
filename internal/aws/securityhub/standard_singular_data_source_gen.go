// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_securityhub_standard", standardDataSource)
}

// standardDataSource returns the Terraform awscc_securityhub_standard data source.
// This Terraform data source corresponds to the CloudFormation AWS::SecurityHub::Standard resource.
func standardDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DisabledStandardsControls
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "StandardsControls to disable from this Standard.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An individual StandardsControl within the Standard.",
		//	    "properties": {
		//	      "Reason": {
		//	        "description": "the reason the standard control is disabled",
		//	        "type": "string"
		//	      },
		//	      "StandardsControlArn": {
		//	        "description": "the Arn for the standard control.",
		//	        "pattern": "arn:aws\\S*:securityhub:\\S*",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "StandardsControlArn"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 100,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"disabled_standards_controls": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Reason
					"reason": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "the reason the standard control is disabled",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: StandardsControlArn
					"standards_control_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "the Arn for the standard control.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "StandardsControls to disable from this Standard.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StandardsArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the Standard being enabled",
		//	  "pattern": "arn:aws\\S*:securityhub:\\S",
		//	  "type": "string"
		//	}
		"standards_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the Standard being enabled",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StandardsSubscriptionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the StandardsSubscription for the account ID, region, and Standard.",
		//	  "pattern": "arn:aws\\S*:securityhub:\\S*",
		//	  "type": "string"
		//	}
		"standards_subscription_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the StandardsSubscription for the account ID, region, and Standard.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SecurityHub::Standard",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityHub::Standard").WithTerraformTypeName("awscc_securityhub_standard")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"disabled_standards_controls": "DisabledStandardsControls",
		"reason":                      "Reason",
		"standards_arn":               "StandardsArn",
		"standards_control_arn":       "StandardsControlArn",
		"standards_subscription_arn":  "StandardsSubscriptionArn",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
